<!DOCTYPE html>
<html lang="en-US" class="no-js no-svg">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="profile" href="https://gmpg.org/xfn/11">

<script>(function(html){html.className = html.className.replace(/\bno-js\b/,'js')})(document.documentElement);</script>
<title>Alex Ionescu&#8217;s Blog &#8211; Windows Internals, Thoughts on Security, and Reverse Engineering</title>
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="Alex Ionescu&#039;s Blog &raquo; Feed" href="https://alex-ionescu.com" />
<link rel="alternate" type="application/rss+xml" title="Alex Ionescu&#039;s Blog &raquo; Comments Feed" href="https://alex-ionescu.com/?feed=comments-rss2" />
		<script>
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/alex-ionescu.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.5.3"}};
			!function(e,a,t){var r,n,o,i,p=a.createElement("canvas"),s=p.getContext&&p.getContext("2d");function c(e,t){var a=String.fromCharCode;s.clearRect(0,0,p.width,p.height),s.fillText(a.apply(this,e),0,0);var r=p.toDataURL();return s.clearRect(0,0,p.width,p.height),s.fillText(a.apply(this,t),0,0),r===p.toDataURL()}function l(e){if(!s||!s.fillText)return!1;switch(s.textBaseline="top",s.font="600 32px Arial",e){case"flag":return!c([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])&&(!c([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!c([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]));case"emoji":return!c([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}function d(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(i=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},o=0;o<i.length;o++)t.supports[i[o]]=l(i[o]),t.supports.everything=t.supports.everything&&t.supports[i[o]],"flag"!==i[o]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[i[o]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(r=t.source||{}).concatemoji?d(r.concatemoji):r.wpemoji&&r.twemoji&&(d(r.twemoji),d(r.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style>
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='ultimate-tables-style-css'  href='https://alex-ionescu.com/wp-content/plugins/ultimate-tables/css/ultimate-tables.css?ver=5.5.3' media='all' />
<link rel='stylesheet' id='ultimate-datatables-style-css'  href='https://alex-ionescu.com/wp-content/plugins/ultimate-tables/css/jquery.dataTables.css?ver=5.5.3' media='all' />
<link rel='stylesheet' id='wp-block-library-css'  href='https://alex-ionescu.com/wp-includes/css/dist/block-library/style.min.css?ver=5.5.3' media='all' />
<link rel='stylesheet' id='wp-block-library-theme-css'  href='https://alex-ionescu.com/wp-includes/css/dist/block-library/theme.min.css?ver=5.5.3' media='all' />
<link rel='stylesheet' id='contact-form-7-css'  href='https://alex-ionescu.com/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=5.3' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='https://alex-ionescu.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.1' media='all' />
<link rel='stylesheet' id='twentyseventeen-fonts-css'  href='https://fonts.googleapis.com/css?family=Libre+Franklin%3A300%2C300i%2C400%2C400i%2C600%2C600i%2C800%2C800i&#038;subset=latin%2Clatin-ext&#038;display=fallback' media='all' />
<link rel='stylesheet' id='twentyseventeen-style-css'  href='https://alex-ionescu.com/wp-content/themes/twentyseventeen/style.css?ver=20190507' media='all' />
<link rel='stylesheet' id='twentyseventeen-block-style-css'  href='https://alex-ionescu.com/wp-content/themes/twentyseventeen/assets/css/blocks.css?ver=20190105' media='all' />
<link rel='stylesheet' id='twentyseventeen-colors-dark-css'  href='https://alex-ionescu.com/wp-content/themes/twentyseventeen/assets/css/colors-dark.css?ver=20190408' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='twentyseventeen-ie8-css'  href='https://alex-ionescu.com/wp-content/themes/twentyseventeen/assets/css/ie8.css?ver=20161202' media='all' />
<![endif]-->
<link rel='stylesheet' id='tablepress-default-css'  href='https://alex-ionescu.com/wp-content/tablepress-combined.min.css?ver=1' media='all' />
<link rel='stylesheet' id='enlighterjs-css'  href='https://alex-ionescu.com/wp-content/plugins/enlighter/cache/enlighterjs.min.css?ver=6rbXWoIZDnNv/0r' media='all' />
<script src='https://alex-ionescu.com/wp-includes/js/jquery/jquery.js?ver=1.12.4-wp' id='jquery-core-js'></script>
<script src='https://alex-ionescu.com/wp-content/mu-plugins/1and1-wordpress-assistant/js/cookies.js?ver=5.5.3' id='1and1-wp-cookies-js'></script>
<!--[if lt IE 9]>
<script src='https://alex-ionescu.com/wp-content/themes/twentyseventeen/assets/js/html5.js?ver=20161020' id='html5-js'></script>
<![endif]-->
<link rel="https://api.w.org/" href="https://alex-ionescu.com/index.php?rest_route=/" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://alex-ionescu.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://alex-ionescu.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.5.3" />
</head>

<body class="home blog wp-embed-responsive hfeed has-header-image has-sidebar colors-dark">
<div id="page" class="site">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<header id="masthead" class="site-header" role="banner">

		<div class="custom-header">

		<div class="custom-header-media">
			<div id="wp-custom-header" class="wp-custom-header"><img src="https://www.alex-ionescu.com/wp-content/uploads/cropped-BlogHeader.jpg" width="2000" height="1199" alt="Alex Ionescu&#039;s Blog" srcset="https://alex-ionescu.com/wp-content/uploads/cropped-BlogHeader.jpg 2000w, https://alex-ionescu.com/wp-content/uploads/cropped-BlogHeader-300x180.jpg 300w, https://alex-ionescu.com/wp-content/uploads/cropped-BlogHeader-768x460.jpg 768w, https://alex-ionescu.com/wp-content/uploads/cropped-BlogHeader-1024x614.jpg 1024w" sizes="100vw" /></div>		</div>

	<div class="site-branding">
	<div class="wrap">

		
		<div class="site-branding-text">
							<h1 class="site-title"><a href="https://alex-ionescu.com/" rel="home">Alex Ionescu&#8217;s Blog</a></h1>
			
							<p class="site-description">Windows Internals, Thoughts on Security, and Reverse Engineering</p>
					</div><!-- .site-branding-text -->

		
	</div><!-- .wrap -->
</div><!-- .site-branding -->

</div><!-- .custom-header -->

					<div class="navigation-top">
				<div class="wrap">
					<nav id="site-navigation" class="main-navigation" role="navigation" aria-label="Top Menu">
	<button class="menu-toggle" aria-controls="top-menu" aria-expanded="false">
		<svg class="icon icon-bars" aria-hidden="true" role="img"> <use href="#icon-bars" xlink:href="#icon-bars"></use> </svg><svg class="icon icon-close" aria-hidden="true" role="img"> <use href="#icon-close" xlink:href="#icon-close"></use> </svg>Menu	</button>

	<div class="menu-posts-container"><ul id="top-menu" class="menu"><li id="menu-item-415" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-415"><a target="_blank" rel="noopener noreferrer" href="http://www.windows-internals.com">Windows Internals Training</a></li>
</ul></div>
			<a href="#content" class="menu-scroll-down"><svg class="icon icon-arrow-right" aria-hidden="true" role="img"> <use href="#icon-arrow-right" xlink:href="#icon-arrow-right"></use> </svg><span class="screen-reader-text">Scroll down to content</span></a>
	</nav><!-- #site-navigation -->
				</div><!-- .wrap -->
			</div><!-- .navigation-top -->
		
	</header><!-- #masthead -->

	
	<div class="site-content-contain">
		<div id="content" class="site-content">

<div class="wrap">
		<header class="page-header">
		<h2 class="page-title">Posts</h2>
	</header>
	
	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

			
<article id="post-471" class="post-471 post type-post status-publish format-standard hentry category-articles-and-presentations category-coding-and-reversing">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=471" rel="bookmark"><time class="entry-date published" datetime="2019-01-27T16:33:27-05:00">January 27, 2019</time><time class="updated" datetime="2019-03-03T19:44:45-05:00">March 3, 2019</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=471" rel="bookmark">Writing a Hyper-V &#8220;Bridge&#8221; for Fuzzing &#8212; Part 2 : Hypercalls &#038; MDLs</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		
<h2>Introduction</h2>



<p class="has-drop-cap">Previously, in <a href="http://www.alex-ionescu.com/?p=377">Part 1</a>,&nbsp;we were able to see how the <em>Windows Driver Foundation (WDF) </em>can significantly simplify the development of drivers, including even &#8220;research-type&#8221; non-PnP drivers. In this part, we will now enter the guts of Hyper-V and talk about how <em>hypercalls </em>work (a portmanteau of <em>syscall</em> (system call) as applied when talking about an OS-&gt;Hypervisor transition instead of an App-&gt;OS transition).</p>



<p>First, it&#8217;s important to learn that there are two kinds of hypercalls that Hyper-V supports, which are described in the <a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/reference/tlfs"><em>Top Level Functional Specification (TLFS)</em></a>. The first, called  <em>regular</em> or <em>slow&nbsp;</em>hypercalls, use physical addresses of RAM in order to send and receive input and output parameters, which are aligned to natural boundaries. We&#8217;ll have to learn about the Windows concept of <em>Memory Descriptor Lists (MDLs)</em> to explain how we can pass such data to Hyper-V, and this will be the topic of this part.</p>



<p>The second kind of hypercall is called an <em>extended fast</em> hypercall and uses registers, including <em>XMM </em>non-integer registers in order to pass in up to 112 bytes of data, aligned on and padded to 8 byte boundaries. This is much faster as memory allocations and mappings are not involved, but requires some more complex understanding of memory alignments, and we&#8217;ll leave this for the next part.</p>



<h2>Hypercall Basics</h2>



<p class="has-drop-cap">Regardless of the type of hypercall being initiated,  a <em>hypercall&nbsp;input&nbsp;value </em>and a <em>hypercall&nbsp;result&nbsp;value</em> are always used and returned. This data is used to both inform the hypervisor as to the calling convention and type of hypercall being attempted, as well as to provide any errors, intermediate state, or final result back to the caller. To begin with, here&#8217;s what the <em>input&nbsp;value</em> looks like:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">typedef union _HV_X64_HYPERCALL_INPUT
{
    struct
    {
        UINT32 CallCode : 16;
        UINT32 IsFast : 1;
        UINT32 Reserved1 : 15;
        UINT32 CountOfElements : 12;
        UINT32 Reserved2 : 4;
        UINT32 RepStartIndex : 12;
        UINT32 Reserved3 : 4;
    };
    UINT64 AsUINT64;
} HV_X64_HYPERCALL_INPUT, *PHV_X64_HYPERCALL_INPUT;</pre>



<p>While the first members should be self-evident (specifying the hypercall index and the calling convention used, the count and start index fields related to a concept not yet introduced &#8212; the <em>repeated&nbsp;hypercall</em>. You see, because processing a hypercall essentially results in the OS losing control of the processor (no interrupts and no scheduling), it&#8217;s important for the hypervisor to minimize this time. </p>



<p>Hyper-V employs an innovative idea of allowing more complex requests to be split up as &#8220;chunks of work&#8221; (i.e.: repetitions), and for the hypervisor to perform enough repetitions to fill up a timeslice (say, 50 microseconds), return back the current index where it left off, and allowing the OS some time to handle interrupts and scheduling needs, before re-issuing the hypercall at the updated start index. This works, by the way, both for input and output parameters.</p>



<p>Now let&#8217;s see what the <em>result&nbsp;value</em> has in store:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">typedef union _HV_X64_HYPERCALL_OUTPUT
{
    struct
    {
        HV_STATUS CallStatus;
        UINT16 Reserved1;
        UINT32 ElementsProcessed : 12;
        UINT32 Reserved2 : 20;
    };
    UINT64 AsUINT64;
} HV_X64_HYPERCALL_OUTPUT, *PHV_X64_HYPERCALL_OUTPUT;</pre>



<p>Once again, we can see both the obvious return value itself (similar to an <strong>NTSTATUS </strong>or <strong>HRESULT</strong>) as well as a specific <em>repeated&nbsp;hypercall</em> field, which allows the caller, as explained above, to correctly restart the hypercall with the start index pointing after the number of elements processed (or, in the case of an error, determine which element caused the error).</p>



<h2>Memory Descriptor Lists</h2>



<p class="has-drop-cap"><em>Memory Descriptor Lists</em> are an extremely useful construct in the Windows kernel which allows driver writers to either take existing user-mode memory or kernel-mode memory (such as a nonpaged pool buffer) and lock it down in memory (pinning it so that it can not be reused nor freed), guaranteeing its access rights, and returning an array of corresponding <em>Page Frame Numbers (PFNs)</em> that map to the virtual buffers. </p>



<p>Obviously, this type of data structure is extremely useful when doing <em>Direct Memory Access (DMA</em>) with a <em>Network Interface Card (NIC)</em> and its driver, but it also has software-specific uses such as re-mapping an existing buffer with different permissions (by creating a new, secondary mapping, of the initial buffer whose pages are now locked down) &#8212; this specific use case being seen in certain rootkits, for example. Windows also provides APIs for directly requesting empty physical memory and attaching an <em>MDL </em>to it, followed by APIs which allow mapping the physical pages into a virtual buffer based on the requested mapping flags.</p>



<p>In our use case, the hypervisor expects a page aligned contiguous set of input physical pages that match the data (potentially repeated) specified by the <em>hypercall&nbsp;input&nbsp;value</em> and a similar set of pages for the output buffer. In the code snippet below, a helper function is used to take a user-mode buffer and convert it into an appropriate <em>MDL </em>for use with Hyper-V <em>hypercalls</em>, returning the underlying physical address. </p>



<p>Note that, as mentioned above, it is technically possible to directly construct an<em> MDL</em> around the initial user buffer without requiring a kernel-copy to be made, but this would assume that the user-buffer is on physically contiguous pages (or page-aligned within a single page). A safer approach is taken here, where the <em>MDL </em>is allocated and a copy of the user buffer is made. On output, this means that the caller must copy the <em>MDL </em>buffer back into the user buffer. </p>



<p>Also take note that the virtual buffer is not zeroed out for performance reasons, which means that the output buffer copied back into user-mode should only copy the exact number of bytes that the hypervisor returned back, in order to avoid leaking arbitrary kernel memory back to the user (in this particular implementation, this is a moot point, as the hypercalls used in the fuzzing interface regularly accept/return kernel pointers and assume a Ring 0 attacker to begin with).</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">NTSTATUS
MapUserBufferToMdl (
    _In_ PVOID UserBuffer,
    _In_ ULONG BufferSize,
    _In_ BOOLEAN IsInput,
    _Out_ PULONGLONG MappedPa,
    _Out_ PMDL* MdlToFree
    )
{
    PMDL hvMdl;
    PHYSICAL_ADDRESS low, high;
    PVOID mapBuffer;
    ULONG pageCount;
    ULONG idealNode;
    ULONG flags;
    NTSTATUS status;

    //
    // Allocate an MDL for the number of pages needed, in the
    // current NUMA node, and allow the processor to cache them.
    // In case more than a page of data is needed, make sure to
    // require contiguous pages, as the hypervisor only receives
    // the starting PFN, not an array. We also allow the memory
    // manager to look at other non local nodes if the current
    // one is unavailable, and we speed it up by not requesting
    // zeroed memory.
    //
    *MdlToFree = NULL;
    *MappedPa = 0;
    low.QuadPart = 0;
    high.QuadPart = ~0ULL;
    pageCount = ROUND_TO_PAGES(BufferSize);
    idealNode = KeGetCurrentNodeNumber();
    flags = MM_ALLOCATE_REQUIRE_CONTIGUOUS_CHUNKS |
            MM_ALLOCATE_FULLY_REQUIRED |
            MM_DONT_ZERO_ALLOCATION;

    //
    // Use the very latest 1809 API which also allows us to
    // pass in the Memory Partition from which to grab the
    // pages from -- in our case we pass NULL meaning use the
    // System Partition (0).
    //
    hvMdl = MmAllocatePartitionNodePagesForMdlEx(low,
                                                 high,
                                                 low,
                                                 pageCount,
                                                 MmCached,
                                                 idealNode,
                                                 flags,
                                                 NULL);
    if (hvMdl == NULL)
    {
        //
        // There is not enough free contiguous physical memory,
        // bail out
        //
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "Failed to allocate MDL\n");
        status = STATUS_INSUFFICIENT_RESOURCES;
        goto Cleanup;
    }

    //
    // Map the MDL pages in kernel-mode, with RWNX permissions
    //
    mapBuffer = MmGetSystemAddressForMdlSafe(hvMdl,
                                            MdlMappingNoExecute);
    if (mapBuffer == NULL)
    {
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "Failed to map buffer\n");
        status = STATUS_INSUFFICIENT_RESOURCES;
        goto Cleanup;
    }

    //
    // Use SEH in case the user-mode buffer is invalid
    //
    __try
    {
        if (IsInput != FALSE)
        {
            //
            // Make sure the input buffer is aligned user-mode
            // memory, then copy it into the mapped kernel buffer
            //
            ProbeForRead(UserBuffer,
                         BufferSize,
                         __alignof(UCHAR));
            RtlCopyMemory(mapBuffer,
                          UserBuffer,
                          BufferSize);
        }
        else
        {
            //
            // Make sure the output buffer is aligned user-mode
            // memory and that it is writeable. The copy will be
            // done after the hypercall completes.
            //
            ProbeForWrite(UserBuffer,
                          BufferSize,
                          __alignof(UCHAR));
        }
    }
    __except(EXCEPTION_EXECUTE_HANDLER)
    {
        //
        // An exception was raised, bail out
        //
        status = GetExceptionCode();
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "Exception copying buffer : %lx\n",
                   status);
        goto Cleanup;
    }

    //
    // Hyper-V will want to know the starting physical address
    // for the buffer, so grab it
    //
    *MappedPa = *MmGetMdlPfnArray(hvMdl) &lt;&lt; PAGE_SHIFT;
    *MdlToFree = hvMdl;
    status = STATUS_SUCCESS;

Cleanup:
    //
    // On failure, clean up the MDL if one was created/mapped
    //
    if (!(NT_SUCCESS(status)) &amp;&amp; (hvMdl != NULL))
    {
        //
        // This also cleans up the mapping buffer if one exists
        //
        MmFreePagesFromMdlEx(hvMdl, 0);
        ExFreePool(hvMdl);
    }
    return status;
}</pre>



<p>As a small addendum related to Windows Internals, however, it should be noted that Windows does not typically go through this heavy handed approach each time it wishes to issue a hypercall. Instead, two helper functions: <strong><em>HvlpAcquireHypercallPage </em></strong>and <strong><em>HvlpReleaseHypercallPage</em></strong>, are used to grab an appropriate physical page from one of the following possible locations:</p>



<ul><li>An  <em>SLIST (Lock-Free Stack List)</em> is used, which is used to cache a number of pre-configured cached hypercall pages stored in the <strong>KPRCB </strong>(<strong>HypercallPageList</strong>). 4 such pages are stored in the <strong>KPRCB HypercallCachedPages </strong>array, starting at index 2.</li><li>If no cached pages are available, and the stack buffer can be used, it is page aligned and its physical address is used for the hypercall. The <em>Interrupt&nbsp;Request&nbsp;Level&nbsp;(IRQL)</em> is raised to <strong>DISPATCH_LEVEL </strong>to avoid the kernel stack from being marked as non-resident.</li><li>If the stack buffer cannot be used, two hardcoded pages are used from the <strong>KPRCB HypercallCachedPages </strong>array &#8212; index 0 for the input page, index 1 for the output page.</li></ul>



<p>For processor 0 (the <em>bootstrap processo</em>r or <em>BSP</em>) the default and cached pages are allocated by the <strong><em>HvlpSetupBootProcessorEarlyHypercallPages </em></strong>function by using the <em>HAL (Hardware Abstraction Layer)</em> early allocation code (<strong><em>HalAllocateEarlyPages </em></strong>from the <em>HAL Private Dispatch Table</em>), which ends up grabbing memory from the so-called <em>HAL Heap</em> (advanced readers are advised that this is interesting), while for the <em>Application Processors (APs)</em>, <strong><em>MmAllocateIndependentPages</em></strong>, the <strong><em>HvlInitializeProcessor </em></strong>function uses <strong><em>MmAllocateIndependentPages </em></strong>to grab per-NUMA-node local physical pages.</p>



<h2>Issuing the Hypercall</h2>



<p class="has-drop-cap">Now that we know how to take the input and output buffer and convert them into appropriate physical addresses, we need to talk about how to actually talk to Hyper-V to issue this call. First, it&#8217;s important to note that the goal of this series is not to go into Hyper-V specifics as much as it is to talk about interfacing with Hyper-V on a Windows system, for security/fuzzing purposes &#8212; therefore, the details of how the actual <em><strong>VMCALL</strong></em><strong> </strong>instruction works and how Hyper-V maps its &#8220;hypercall page&#8221; through the <em>Hypercall Interface MSR</em> will be left to readers curious enough to read the <em>TLFS</em>. </p>



<p>Our approach, instead, will be to re-use Windows&#8217; existing capabilities, and avoid handcrafing assembly code (and conflicting with the <em>memory manager</em>, <em>VSM</em>, and <em>Patchguard</em>). In order to assist us, Windows 10 has a helpful exported kernel call which lets us do just that:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">NTKERNELAPI
HV_X64_HYPERCALL_OUTPUT
NTAPI
HvlInvokeHypercall (
    _In_ HV_X64_HYPERCALL_INPUT InputValue,
    _In_ ULONGLONG InputPa,
    _In_opt_ ULONGLONG OutputPa
    );</pre>



<p>As you may have expected, this API simply takes in the <em>hypercall&nbsp;input&nbsp;value</em>, comes back with the <em>hypercall&nbsp;result</em> <em>value</em>, and accepts the physical addresses of the input and output buffers (if any). Therefore, all we have to do is plug in a call to this export from our <em>IOCTL </em>handler (seen in Part 1), and correctly construct the <em>MDLs </em>with the copy of the input and output buffer.</p>



<h2>Sample Code &#8212; Bridging User and Kernel</h2>



<p class="has-drop-cap">All the building blocks are now ready and we begin by first defining the <em>IOCTL </em>value itself as well as the data structure that will be used to communicate between the two worlds. Then, we add some code to the <em>IOCTL </em>event callback to execute our handler, which will build the <em>MDLs </em>and then issue the call. Afterwise, we copy any output data back to the caller, and the user-mode client displays the result.</p>



<h4>Defining the IOCTL Value and Buffer</h4>



<p>In this approach, we&#8217;ve decided to simply use the standard of beginning our <em>IOCTL </em>functions at 0x100, and picking the <strong>FILE_DEVICE_UNKNOWN</strong> device type instead of defining our own. The input data structure contains the actual pointers to the input and output buffers (and their size), as well as the <em>hypercall&nbsp;input&nbsp;value</em> and the <em>hypercall&nbsp;result value</em>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#define IOCTL_ISSUE_HYPER_CALL   \
    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x100, METHOD_BUFFERED, FILE_WRITE_ACCESS)

typedef struct _VTL_BRIDGE_ISSUE_HYPER_CALL
{
    HV_X64_HYPERCALL_INPUT InputDescriptor;
    _Field_size_(InputSize) _User_always_
        PVOID InputBuffer;
    ULONG InputSize;

    HV_X64_HYPERCALL_OUTPUT OutputDescriptor;
    _Field_size_opt_(OutputSize) _User_always_
        PVOID OutputBuffer;
    ULONG OutputSize;
} VTL_BRIDGE_ISSUE_HYPER_CALL, *PVTL_BRIDGE_ISSUE_HYPER_CALL;</pre>



<h4>Extending the IOCTL Event Callback</h4>



<p>We take the stub code seen in Part 1 and we add the following block of code to the IOCTL switch statement, which now calls the handler itself.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">    case IOCTL_ISSUE_HYPER_CALL:
    {
        //
        // The input and output buffer sizes are identical
        //
        if (InputLength != OutputLength)
        {
            DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                       DPFLTR_ERROR_LEVEL,
                       "Size mismatch: %llx %llx\n",
                       InputLength,
                       OutputLength);
            status = STATUS_INVALID_PARAMETER;
            goto Exit;
        }

        //
        // Handle a regular hypercall request
        //
        status = HandleRegularHvCall(inBuffer,
                                     InputLength,
                                     &amp;resultLength);
        break;
    }</pre>



<h4>Implementing the Handler</h4>



<p>The handler needs to take our request buffer, make sure it&#8217;s the expected size, and then construct <em>MDLs </em>for the input and output buffers that are referenced. Once they are constructed, the HVL interface can be used to communicate to Hyper-V, after which the <em>result&nbsp;value</em> can be written back in the buffer.</p>



<p>Recall that <em>WDF</em> takes care of probing and copying the request buffer, but the deep pointers to the input and output buffers are user-mode data for us to correctly handle.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">NTSTATUS
HandleRegularHvCall (
    _In_ PVOID RequestBuffer,
    _In_ SIZE_T RequestBufferSize,
    _Out_ PULONG_PTR ResultLength
    )
{
    NTSTATUS status;
    PVTL_BRIDGE_ISSUE_HYPER_CALL hcCall;
    HV_X64_HYPERCALL_OUTPUT output;
    ULONGLONG inputPa, outputPa;
    PMDL inputMdl, outputMdl;

    //
    // Grab the hypercall buffer from the caller
    //
    hcCall = (PVTL_BRIDGE_ISSUE_HYPER_CALL)RequestBuffer;
    inputMdl = NULL;
    outputMdl = NULL;
    inputPa = 0;
    outputPa = 0;

    //
    // The request buffer must match the size we expect
    //
    *ResultLength = 0;
    if (RequestBufferSize != sizeof(*hcCall))
    {
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "Buffer size mismatch: %lx\n",
                   RequestBuffer);
        status = STATUS_INVALID_BUFFER_SIZE;
        goto Cleanup;
    }

    //
    // Check if the hypercall has any input data
    //
    if (hcCall->InputSize != 0)
    {
        //
        // Make an MDL for it
        //
        status = MapUserBufferToMdl(hcCall->InputBuffer,
                                    hcCall->InputSize,
                                    TRUE,
                                    &amp;inputPa,
                                    &amp;inputMdl);
        if (!NT_SUCCESS(status))
        {
            DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                       DPFLTR_ERROR_LEVEL,
                       "Failed to create input MDL: %lx\n",
                       status);
            goto Cleanup;
        }
    }

    //
    // Check if the hypercall has output data
    //
    if (hcCall->OutputSize != 0)
    {
        //
        // Make an MDL for it too
        //
        status = MapUserBufferToMdl(hcCall->OutputBuffer,
                                    hcCall->OutputSize,
                                    FALSE,
                                    &amp;outputPa,
                                    &amp;outputMdl);
        if (!NT_SUCCESS(status))
        {
            DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                       DPFLTR_ERROR_LEVEL,
                       "Failed to create output MDL: %lx\n",
                       status);
            goto Cleanup;
        }
    }

    //
    // Issue the hyper call, providing the physical addresses
    //
    output = HvlInvokeHypercall(hcCall->InputDescriptor,
                                inputPa,
                                outputPa);
    hcCall->OutputDescriptor = output;

    //
    // Check if the caller expected an output buffer
    //
    if (hcCall->OutputSize != 0)
    {
        //
        // The user buffer may have become invalid,
        // guard against this with an exception handler
        //
        __try
        {
            NT_ASSERT(outputMdl != NULL);
            RtlCopyMemory(hcCall->OutputBuffer,
                          MmGetMdlVirtualAddress(outputMdl),
                          MmGetMdlByteCount(outputMdl));
        }
        __except (EXCEPTION_EXECUTE_HANDLER)
        {
            status = GetExceptionCode();
            goto Cleanup;
        }
    }

    //
    // Return the data back to the user, who will deal with it
    //
    *ResultLength = sizeof(*hcCall);
    status = STATUS_SUCCESS;

Cleanup:
    //
    // If there was an input MDL, free it
    //
    if (inputMdl != NULL)
    {
        NT_ASSERT(hcCall->InputSize != 0);
        MmFreePagesFromMdlEx(inputMdl, 0);
        ExFreePool(inputMdl);
    }

    //
    // To the same for the output MDL
    //
    if (outputMdl != NULL)
    {
        NT_ASSERT(hcCall->OutputSize != 0);
        MmFreePagesFromMdlEx(outputMdl, 0);
        ExFreePool(outputMdl);
    }
    return status;
}</pre>



<h4>Issuing the IOCTL from User-Mode</h4>



<p>Now let&#8217;s try an actual hypercall and see if the bridge works. For this example, we&#8217;ll use <strong><em>HvCallGetVpIndexFromApicId</em></strong>, which is a very simple call that returns the <em>Virtual Processor (VP)</em> index based on the physical <em>Advanced Programmable Interrupt Controller (APIC) ID</em> of the processor. From the host, this call should be allowed, and should return the identical number back &#8212; as on the root partition, there is a 1:1 mapping between <em>VPs </em>and <em>APIC IDs</em>.</p>



<p>You might note that this is actually a <em>repeated&nbsp;call</em> as is visible by the setting of the <strong>CountOfElements </strong>field. This is because an array of <em>APIC IDs</em> can be provided, which will result in an array of <em>VPs</em>. In this sample, though, we are only specifying a single element, so we don&#8217;t have the restarting logic that a repeated call normally requires.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">DWORD
HcBridgeTest (
    _In_ HANDLE hFuzzer
    )
{
    HV_INPUT_GET_VP_INDEX_FROM_APIC_ID Input;
    HV_VP_INDEX Output;
    VTL_BRIDGE_ISSUE_HYPER_CALL hcCall;
    BOOL bRes;
    DWORD dwError;
    HV_STATUS hvStatus;

    //
    // Clear buffers
    //
    RtlZeroMemory(&amp;Input, sizeof(Input));
    RtlZeroMemory(&amp;Output, sizeof(Output));

    //
    // Issue a slow call with a single element
    //
    hcCall.InputDescriptor.AsUINT64 = HvCallGetVpIndexFromApicId;
    hcCall.InputDescriptor.CountOfElements = 1;
    hcCall.InputDescriptor.IsFast = 0;

    //
    // Request the VP Index for APIC ID 1
    //
    Input.PartitionId = HV_PARTITION_ID_SELF;
    Input.TargetVtl = 0;
    Input.ProcHwIds[0] = 1;

    //
    // Construct the request buffer
    //
    hcCall.InputSize = sizeof(Input);
    hcCall.OutputSize = sizeof(Output);
    hcCall.InputBuffer = &Input;
    hcCall.OutputBuffer = &Output;

    //
    // Issue the IOCTL to our bridge
    //
    bRes = DeviceIoControl(hFuzzer,
                           IOCTL_ISSUE_HYPER_CALL,
                           &amp;hcCall,
                           sizeof(hcCall),
                           &amp;hcCall,
                           sizeof(hcCall),
                           NULL,
                           NULL);
    if (bRes == FALSE)
    {
        //
        // The bridge failed in some way
        //
        dwError = GetLastError();
        printf("Bridge failed to issue call: %lx\n", dwError);
        goto Exit;
    }

    //
    // Bridge worked -- see what the hypervisor returned
    //
    hvStatus = hcCall.OutputDescriptor.CallStatus;
    if (hvStatus != HV_STATUS_SUCCESS)
    {
        //
        // The hypercall made it, but it failed for some reason
        //
        printf("Hypercall failure: %lx\n", hvStatus);
        dwError = RtlNtStatusToDosError(0xC0350000 | hvStatus);
        goto Exit;
    }

    //
    // Print the processor index and return 
    //
    printf("VP Index: %lx\n", Output);
    dwError = ERROR_SUCCESS;
Exit:
    return dwError;
}</pre>



<h2>Conclusion</h2>



<p class="has-drop-cap">By now, you have hopefully gained an insight into how the elementary <em>hypercall </em>interface works in Windows, for regular (slow) calls that are either simple or repeated, and additional clarity on how to interface with kernel-mode drivers from user-mode through an <em>IOCTL</em>-based interface on top of <em>WDF </em>(although a <em>WDM </em>driver would behave identically in this particular case).</p>



<p>In part 3, we will continue this series by looking at <em>extended fast hypercalls</em>, which will require some careful understanding of stack layouts and memory alignments due to the use of <em>XMM </em>registers. I&#8217;ve asked <a href="https://azeria-labs.com/">Azeria </a>to help me with one or two diagrams which should hopefully make things easier to visualize, thanks to her amazing graphic skills.</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-471 -->

<article id="post-377" class="post-377 post type-post status-publish format-standard hentry category-articles-and-presentations category-coding-and-reversing">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=377" rel="bookmark"><time class="entry-date published" datetime="2019-01-14T23:51:13-05:00">January 14, 2019</time><time class="updated" datetime="2019-01-27T18:07:20-05:00">January 27, 2019</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=377" rel="bookmark">Writing a Hyper-V &#8220;Bridge&#8221; for Fuzzing &#8212; Part 1: WDF</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		
<h2>Introduction</h2>



<p style="text-align:left" class="has-drop-cap">After spending the better part of a weekend writing a specialized <em>Windows</em> driver for the purposes of allowing me to communicate with the <em>Hyper-V</em> hypervisor, as well as the <em>Secure Kernel</em>, from user-mode, I realized that there was a dearth of concise technical content on non-PnP driver development, and especially on how the <em>Windows Driver Foundation (WDF)</em> fundamentally changes how such drivers can be developed.</p>



<p>While I&#8217;ll eventually release my full tool, once better polished, on <em>GitHub</em>, I figured I&#8217;d share some of the steps I took in getting there. Unlike my more usual low-level super-technical posts, this one is meant more as an introduction and tutorial, so if you already consider yourself experienced in <em>WDF</em> driver development, feel free to wait for Part 2.</p>



<h2>Writing a Traditional Non-PnP Driver</h2>



<p class="has-drop-cap">Having written non-PnP <em>Windows Driver Model (WDM</em>) style drivers for almost two decades, it&#8217;s almost become a mechanized skill that allows me to churn out a basic driver (and associated user-mode client application) in less than 15 minutes, where I always find myself following the same basic recipe:</p>



<ul><li>Write the <strong><em>DriverEntry</em></strong> and <strong><em>DriverUnload</em></strong> function, including creating a device object, naming it, ACL&#8217;ing it correctly, and then creating a Win32 symbolic link under <strong>\DosDevices</strong></li><li>Stub out an <strong>IRP_MJ_CREATE</strong>, <strong>IRP_MJ_CLOSE</strong> and <strong>IRP_MJ_DEVICE_CONTROL</strong> handler</li><li>Define some IOCTLs as <strong>METHOD_BUFFERED</strong>, to be safe</li><li>Implement the <strong>IRP_MJ_CREATE</strong>/<strong>IRP_MJ_CLOSE</strong> handlers to always return success and complete the IRP</li><li>Do the right <strong>IO_STACK_LOCATION</strong> manipulation in the IOCTL handler and use the appropriate <em>WDM</em> macros to read, parse, and complete the request(s)</li><li>Write a user-mode tool that calls <strong><em>CreateFile</em></strong> and then <strong><em>DeviceIoControl</em></strong> to communicate to the driver</li><li>Either use <strong>Sc.exe</strong> on the command-line to create a kernel-mode service entry and then start/stop the driver as needed, or write the equivalent C Code using <strong><em>CreateService</em></strong>, <strong><em>StartService</em></strong> and <strong><em>StopService</em></strong></li></ul>



<p>Countless online tutorials and updated samples on <em>GitHub</em> from <em>Microsoft</em> (such as those part of the <em>Windows Driver Kit</em>) explain these steps in detail for the curious minded &#8212; but this post isn&#8217;t about rehashing that, it&#8217;s about looking at the new.</p>



<p>I had long heard how the <em>Windows Driver Foundation (WDF)</em> is meant to provide a much easier model for writing true hardware device drivers &#8212; including, in <em>Windows 10</em>, allowing mostly cross-compilable user-mode drivers (vs. the older framework which required writing the driver in C++/COM). </p>



<p>But I had wrongly assumed that for writing Non-PnP research/academic drivers (or even for production), <em>WDM</em> was still the better, and easier choice. For example, I don&#8217;t know of a single anti-malware tool whose filter drivers are <em>WDF</em> based &#8212; and in fact, the framework is poorly suited for such use (or <em>NDIS Light-Weight Filters (LWF</em>), or <em>Windows Filtering Platform</em> (<em>WFP)</em> callout drivers, or etc&#8230;).</p>



<p>The truth is that, unless you&#8217;re truly plugging into some OS filtering stack still focused on <em>WDM</em>, a simple &#8220;process some IOCTLs&#8221; driver can be much more easily written in <em>WDF</em>, and the installation/uninstallation process can also be made more robust by following certain principles.</p>



<h2>Writing a Modern &#8220;Non-PnP&#8221; Driver</h2>



<p class="has-drop-cap">With <em>WDF</em> &#8212; and more specifically, its kernel counterpart, the <em>Kernel Mode Driver Framework (KMDF)</em> &#8212; you&#8217;ll have two options at your disposal for writing a simple non-hardware driver that communicates with a user-space client (and note that KMDF was back-ported all the way back to <em>Windows 2000</em>, so this isn&#8217;t some sort of new <em>Windows 10</em> functionality):</p>



<ol><li>You can write a true non-PnP driver by setting the correct flag on your <em>WDF</em> <em>Driver Object,</em> manually creating your <em>WDF Device</em> as a &#8220;Control Device&#8221;, naming it, creating the <em>Win32</em> symbolic link, and securing it with an ACL. You don&#8217;t need an <strong>IRP_MJ_CREATE</strong> or <strong>IRP_MJ_CLOSE</strong> handler, and can immediately write your IOCTL handler. You must still provide a <strong><em>DriverUnload</em></strong> routine.</li><li>Or you can develop a &#8220;root bus-enumerated&#8221; PnP driver by providing a simple .INF file, provide an <strong><em>AddDevice</em></strong> routine, and have <em>WDF</em> automatically call that when your &#8216;device&#8217; is detected. In your <strong><em>AddDevice</em></strong> routine, construct an unnamed <em>WDF Device</em>, register an interface with a custom GUID (you can also do this in the INF and avoid a few extra lines of code), and provide your IOCTL handler. You do not need an <strong>IRP_MJ_CREATE</strong>, <strong>IRP_MJ_CLOSE</strong>, or <strong>IRP_MJ_PNP</strong>/<strong>IRP_MJ_POWER</strong> handler, and must still provide a DriverUnload routine.</li></ol>



<p>While these two options appear similar, there is one crucial difference &#8212; in the first implementation, you must manually register, load, and unload this driver every time you wish to talk with it from user-mode. If you leave it loaded, the user&#8217;s only choice is to manually run command-line tools like <strong>Sc.exe</strong> or <strong>Net.exe</strong> to unload it. Without using forensic tools, the debugger, or power tools, the user does not know your driver is loaded. You must pick a static name for your device, and hope it does not collide with anyone else&#8217;s device name.</p>



<p>In the second implementation, your driver is registered with the system as a PnP driver that is automatically detected by virtue of being on the &#8220;root bus&#8221;. This means users see it in <em>Device Manager</em>, and can easily interrogate it for information, disable it, and even uninstall it. To communicate with your driver, your application uses a custom GUID that you&#8217;ve defined, and enumerates an <em>interface</em> associated with it &#8212; a much stricter and unique protocol than relying on a string. Such a driver can also be more easily signed by <em>Microsoft&#8217;s Windows Hardware Quality Lab (WHQL) </em>infrastructure, and can attest to its security better than a raw non-PnP driver without an .INF or .CAT file.</p>



<p>Clearly, for a pure &#8220;proof-of-concept&#8221; driver, the benefits of the second implementation may not seem worth writing an extra INF file and learning some new <strong><em>SetupAPI</em></strong> functions instead of <strong><em>CreateService</em></strong>. But for something a little more polished, more generally usable, a root bus-enumerated driver, is in my opinion, the way to go.</p>



<p>It&#8217;s worth noting that <em>WDF</em> doesn&#8217;t invent this concept, but what finally makes it (in my opinion) reachable to the researcher masses, is that unlike in <em>WDM</em>, where this option required 1500-4000 lines of boiler-plate PnP code to be correctly enumerated, installed, uninstalled, disabled, interrogated, and more, there is literally zero additional work required when using <em>WDF</em> &#8212; again, no <strong>IRP_MJ_PNP</strong> handler, no <em>WMI</em>, no <em>Power Management</em>, and none of the things you may have seen if you have ever attempted this in your past.</p>



<p>In fact, strictly speaking, it&#8217;s actually <em>less&nbsp;line&nbsp;of&nbsp;code </em>to write a root-bus enumerated PnP driver than a non-PnP driver, with the caveat that the latter needs an INF file. But let&#8217;s be honest, once you&#8217;ve written one, you can largely copy-paste it &#8212; and if you ever wanted to have your driver signed by <em>Microsoft</em>, you&#8217;ll need an INF anyway.</p>



<h2>Interacting with a Root-Enumerated PnP Driver</h2>



<p class="has-drop-cap">Because you are not statically naming your device driver, and because it must be PnP enumerated, the user-mode code looks a bit different than the traditional way to install and talk to a non-PnP driver. There are 2 steps that might be new to you:</p>



<ol><li>Installing the driver is done by first creating a &#8220;fake&#8221; <em>device node</em> under the root bus. Typically, true hardware device drivers are installed when the PnP manager discovers a physical device on the machine, interrogates it and builds a unique device instance path for it (containing, among other things, information such as <em>Device ID</em> and/or <em>Vendor ID</em>), and finds a matching driver that is registered with some combination/part of that <em>device instance path</em> (through its INF file).  In our case, we will manually create a device node pretending that PnP detected such a &#8220;device&#8221; on the root bus, and we will manually name this node in the exact same way our INF file indicates, while claiming that this &#8220;device&#8221; is of the same device class our INF file indicates.</li><li>After we&#8217;ve created this fake <em>device node</em>, we&#8217;ll point <em>Windows</em> at our INF file, and tell it to do an update/refresh of the PnP device tree &#8212; which will make it discover our fake device node, see that there&#8217;s a perfectly matching INF that describes it, and load the indicated driver!</li></ol>



<p>If this sounds scary and a lot of code &#8212; let me re-assure you: we are talking about 3 APIs and less than 20 lines of code, as you&#8217;ll shortly see in the sample code below!</p>



<p>Now that the driver has been installed, unless your code (or the user/some other code) uninstalls it, it will remain persistent on the system, and automatically reloaded every boot. In fact, if you repeat the steps above even in the face of an already-installed copy of the driver, you will simply be creating yet another fake <em>device node</em>, and load another copy of your driver.</p>



<p>Therefore, we must solve our last hurdle &#8212; figuring out if our driver is already loaded &#8212; both so that we can avoid multiple re-installations, as well as so we can figure out how to communicate with it from user-mode. This is achieved by using that <em>device interface GUID</em> that we mentioned a driver should register:</p>



<ol><li>First, begin by checking if there are any devices that expose our custom <em>device interface GUID</em>. If not, then our driver is not loaded, which means we must perform the installation steps described.</li><li>If so, this will return a <em>device interface data structure</em>, which we can then query to obtain a <em>device instance path name</em>. This name can then directly be passed to <strong><em>CreateFile</em></strong> in order to obtain a handle to the device object and send IOCTLs.</li></ol>



<p>Behind the scenes, what really happens is that the &#8220;unnamed&#8221; WDF/PnP device object that was created does actually have a name &#8212; say, for example <strong>\Device\0000005c</strong> (if you&#8217;ve seen such devices in your <em>WinObj</em> or <em>WinDbg</em> before, now you know what they are). In turn, under the <strong>\DosDevices</strong> namespace (aka <strong>\GLOBAL??</strong>), the I/O manager <em>did</em> create a symbolic link &#8212; but based on a string representation of the unique device instance path. The API that queries the device interface data mentioned in step #2 above essentially does this lookup, and returns that symbolic link.</p>



<p>Once again, while this may also sound like a lot of complex code, it&#8217;s actually achieved by a single API call and less than a dozen lines of code (and that includes error handling), as you&#8217;re about to see below!</p>



<p>Finally, you may also want to provide the option (or automatically do this every time your user-mode tool exits) to uninstall the driver. In this situation, we use the <strong><em>SetupAPI</em></strong> calls to enumerate for our device class GUID (instead of our interface GUID), and once found, we pass that information to the same installer API, but a different parameter that handles uninstallation in this situation. </p>



<p>With only 3 APIs and another 20 lines of code, the driver is automatically unloaded assuming there&#8217;s no longer any handles (otherwise, it will be unloaded when the handles are closed and/or when the machine reboots), and uninstalled from <em>Device Manage</em>r so that the <em>device node</em> is not found and matched again at the next boot.</p>



<h2>Sample Code</h2>



<p class="has-drop-cap">Enough theory &#8212; let&#8217;s take a look at a very simple root-bus enumerated driver to see the code in practice, including how the INF file should look like. Then, we&#8217;ll see how the associated user-mode client application looks like, and how it can install, uninstall, and communicate with our device by finding its interface and opening a handle to it.</p>



<h4>DriverEntry and DriverUnload Routines</h4>



<p>First, our <strong><em>DriverEntry</em></strong> function looks a bit different than in <em>WDM</em>, as we are not touching the <strong>DRIVER_OBJECT</strong> in any way. Instead, we use a <strong>WDF_DRIVER_CONFIG </strong>structure to initialize our <strong><em>AddDevice</em></strong> routine and our Unload routine, then use <strong><em>WdfDriverCreate</em></strong> to initialize a <em>WDF Driver Object</em> on top of the <em>WDM/NT</em> <strong>DRIVER_OBJECT</strong>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="wpcustom" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">NTSTATUS
DriverEntry (
    _Inout_ PDRIVER_OBJECT DriverObject,
    _In_ PUNICODE_STRING RegistryPath
    )
{
    NTSTATUS status;
    WDF_DRIVER_CONFIG config;

    //
    // Initialize our Driver Configuration, specifying an unload
    // routine and an AddDevice routine (making us a PnP driver)
    //
    WDF_DRIVER_CONFIG_INIT(&amp;config, DeviceAdd);
    config.EvtDriverUnload = DriverUnload;

    //
    // Create the WDF Driver Object
    //
    status = WdfDriverCreate(DriverObject,
                             RegistryPath,
                             WDF_NO_OBJECT_ATTRIBUTES,
                             &amp;config,
                             WDF_NO_HANDLE);
    if (!NT_SUCCESS(status))
    {
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "WdfDriverCreate fail: %lx\n",
                   status);
    }

    //
    // Return back to OS
    //
    return status;
}
</pre>



<p>The <strong><em>DriverUnload</em></strong> function works just like in the <em>WDM</em> world, except that from now on, all routines (except the <strong><em>DriverEntry</em></strong>) will be receiving a <strong>WDFDRIVER</strong>, not a <strong>DRIVER_OBJECT</strong>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="wpcustom" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">VOID
DriverUnload (
    _In_ WDFDRIVER Driver
    )
{
    UNREFERENCED_PARAMETER(Driver);
    PAGED_CODE();

    //
    // Nothing to do for now
    //
    NOTHING;
}</pre>



<h4>AddDevice Routine</h4>



<p>This is where, traditional PnP <em>WDM</em> drivers would create their <strong>DEVICE_OBJECT</strong> and do PCI/bus scanning and/or identification to confirm this is a device they can handle. Additional initialization would then usually happen in the driver&#8217;s <strong>IRP_MN_START_DEVICE</strong> handler as part of their <strong>IRP_MJ_PNP</strong> handler. But as we are not a true hardware driver, these concerns do not affect us.</p>



<p>Instead, in the <em>WDF</em> world, the only things we have to worry about are creating a <em>WDF Device Object</em>, register a custom <em>device interface GUID </em>so that we can talk to our device from user mode, and initialize a <em>WDF Queue Object</em>, which is how we&#8217;ll be able to receive IRPs &#8212; in our case, we register an IOCTL handler for <strong>IRP_MJ_DEVICE_CONTROL</strong>. </p>



<p>A <em>WDF queue</em> can either be serialized or parallelized, and we don&#8217;t have any specific restrictions that prevent multiple client apps from talking with us concurrently (but if we wanted to prevent that, we could).</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">DEFINE_GUID(HyprFuzzGuid,
            0x4056adb2,
            0x8e4e,
            0x4b6a,
            0x88, 0x2e, 0xff, 0x1, 0xc, 0x3a, 0x1c, 0x63);

NTSTATUS
AddDevice (
    _In_ WDFDRIVER Driver,
    _In_ PWDFDEVICE_INIT DeviceInit
    )
{
    NTSTATUS status;
    WDFDEVICE device;
    WDF_IO_QUEUE_CONFIG queueConfig;
    WDFQUEUE queue;
    UNREFERENCED_PARAMETER(Driver);

    //
    // Create a WDF Device 
    //
    status = WdfDeviceCreate(&amp;DeviceInit,
                             WDF_NO_OBJECT_ATTRIBUTES,
                             &amp;device);
    if (!NT_SUCCESS(status))
    {
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "WdfDeviceCreate fail: %lx\n",
                   status);
        goto Exit;
    }

    //
    // Create a device interface so that UM can talk with us
    //
    status = WdfDeviceCreateDeviceInterface(device,
                                            &amp;HyprFuzzGuid,
                                            NULL);
    if (!NT_SUCCESS(status))
    {
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "WdfDeviceCreateDeviceInterface fail: %lx\n",
                   status);
        goto Exit;
    }

    //
    // Create a queue that handles IOCTLs
    //
    WDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(&amp;queueConfig,
                                    WdfIoQueueDispatchParallel);
    queueConfig.EvtIoDeviceControl = IoDeviceControl;
    status = WdfIoQueueCreate(device,
                              &amp;queueConfig,
                              WDF_NO_OBJECT_ATTRIBUTES,
                              &amp;queue);
    if (!NT_SUCCESS(status))
    {
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "WdfIoQueueCreate fail: %lx\n",
                   status);
        goto Exit;
    }

Exit:
    return status;
}</pre>



<h4>Device I/O Control (IOCTL) Routine</h4>



<p>Well, that&#8217;s almost it! At this point, the only missing piece is the IOCTL handler which will consume request from user-mode.</p>



<p>With <em>WDF</em>, you do not need to worry about <em>I/O Stack Locations</em>, and the various macros to copy, skip, switch these locations. In addition, instead of having a generic <strong>IRP </strong>handler which requires you to manually read the appropriate arguments in the <em>I/O Stack Location</em>, each <em>WDF</em> <em>event callback</em> contains specifically the data associated with this request, making development easier.</p>



<p>An additional benefit of <em>WDF</em> is that regardless of the IOCTL mechanism, APIs exist to grab the input buffer and length, so that you do not have to remember which field in the <strong>IRP</strong> contains the input and output buffers.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">VOID
IoDeviceControl (
    _In_ WDFQUEUE Queue,
    _In_ WDFREQUEST Request,
    _In_ SIZE_T OutputLength,
    _In_ SIZE_T InputLength,
    _In_ ULONG IoControlCode
    )
{
    NTSTATUS status;
    PVOID inBuffer;
    PVOID outBuffer;
    ULONG_PTR resultLength;
    PAGED_CODE();
    UNREFERENCED_PARAMETER(Queue);

    //
    // Assume we won't return anything
    //
    resultLength = 0;
    inBuffer = NULL;
    outBuffer = NULL;

    //
    // Grab the input buffer (this will fail if it's 0 bytes)
    //
    status = WdfRequestRetrieveInputBuffer(Request,
                                           InputLength,
                                           &amp;inBuffer,
                                           NULL);
    if (!NT_SUCCESS(status))
    {
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "WdfRequestRetrieveInputBuffer fail: %lx\n",
                   status);
        goto Exit;
    }

    //
    // Grab the output buffer (this will fail if it's 0 bytes)
    //
    status = WdfRequestRetrieveOutputBuffer(Request,
                                            OutputLength,
                                            &amp;outBuffer,
                                            NULL);
    if (!NT_SUCCESS(status))
    {
        DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                   DPFLTR_ERROR_LEVEL,
                   "WdfRequestRetrieveOutputBuffer fail: %lx\n",
                   status);
        goto Exit;
    }

    //
    // Handle the possible IOCTLs
    //
    switch (IoControlCode)
    {
        case IOCTL_ISSUE_HYPER_CALL:
        {
            //
            // Implement this
            //
            status = STATUS_SUCCESS;
            break;
        }

        default:
        {
            DbgPrintEx(DPFLTR_IHVDRIVER_ID,
                       DPFLTR_ERROR_LEVEL,
                       "Invalid IOCTL: %lx\n",
                       IoControlCode);
            status = STATUS_INVALID_DEVICE_REQUEST;
            break;
        }
    }

Exit:
    //
    // Return back to caller
    //
    WdfRequestCompleteWithInformation(Request,
                                      status,
                                      resultLength);
}</pre>



<h4>The INF File</h4>



<p>The last step in a proper <em>WDF</em> driver is having an INF file that marks us as a root-enumerated driver, sets a strong security descriptor, and populates some strings and icons for the user to see in their <em>Device Manager</em>.</p>



<p>The key part is the <em>Device Class GUID</em>, which we&#8217;ll need to remember for the installation of our driver, and the device node name, which here is <strong>Root\VtlBrdge</strong>. Everything else you see is mostly boilerplate, or done for readability and UI purposes.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">[Version]
DriverVer = 01/15/2019,10.30.45.805
signature="$WINDOWS NT$"
Class=FuzzerClass
CatalogFile=vtlbrdge.cat
ClassGuid={0D833DAE-8619-11D3-C19B-B60B0E0FD4AB}
Provider=%Mfg%

[SourceDisksNames]
1=%DiskId%

[SourceDisksFiles]
vtlbrdge.sys = 1

[ClassInstall32]
AddReg=FuzzerClass

[FuzzerClass]
HKR,,,,%ClassName%
HKR,,Icon,,-8
HKR,,Security,,"D:P(A;;GA;;;SY)(A;;GA;;;BA)"

[DestinationDirs]
SYS.CopyList=10,system32\drivers

[Manufacturer]
%Mfg%=AlexIonescu,NTAMD64

[AlexIonescu.NTAMD64]
%DeviceDesc% = VtlBrdgeInstall, Root\VtlBrdge

[VtlBrdgeInstall]
CopyFiles=SYS.CopyList

[SYS.CopyList]
vtlbrdge.sys

[VtlBrdgeInstall.Services]
AddService = VtlBrdge,2,VtlBrdgeInstall_Service_Inst

[VtlBrdgeInstall_Service_Inst]
ServiceType   = 1
StartType     = 3
ErrorControl  = 1
LoadOrderGroup = "Base"
ServiceBinary = %12%\vtlbrdge.sys 

[Strings]
Mfg = "Alex Ionescu (@aionescu)"
DeviceDesc = "VTL Bridge and Hyper Call Connector"
DiskId = "Install disk (1 of 1)"
ClassName = "Fuzzer Devices"</pre>



<p>So now we have a fully working driver that we are ready to talk to from user-mode, let&#8217;s look at how we can install our driver, obtain a handle to communicate with it, and finally, uninstall it.</p>



<h4>Installing the Driver</h4>



<p>First, installing the driver is a simple matter of creating the fake root device node, then pointing <em>Windows</em> at the INF to bind with it and load our driver. The trick is referencing the same <em>device class GUID</em> as in the INF, as well as the same root <em>device instance path</em>, as we mentioned above.</p>



<p>Note that there are more complex APIs that you can use to automatically parse the INF and extract this information if you&#8217;re dealing with someone else&#8217;s driver, but you ought to know (and hardcode) your own GUID and instance path for your own driver, in my opinion.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">DEFINE_GUID(FuzzerClassGuid,
            0xd833dae,
            0x8619,
            0x11d3,
            0xc1, 0x9b, 0xb6, 0xb, 0xe, 0xf, 0xd4, 0xab);

LPWSTR g_DevPath = L"Root\\VtlBrdge\0\0";

LPWSTR g_InfPath = L"C:\\vtlbrdge\\vtlbrdge.inf";

DWORD
HvFuzzInstallDevice (
    VOID
    )
{
    HDEVINFO hDevInfo;
    SP_DEVINFO_DATA devInfo;
    BOOL bReboot, bRes;
    DWORD dwError;
    DWORD dwPathLen;

    //
    // Create a device info list for our class GUID
    //
    hDevInfo = SetupDiCreateDeviceInfoList(&amp;FuzzerClassGuid,
                                           NULL);
    if (hDevInfo == INVALID_HANDLE_VALUE)
    {
        dwError = GetLastError();
        printf("SetupDiCreateDeviceInfoList fail: %lx\n",
               dwError);
        goto Exit;
    }

    //
    // Construct a device information structure for this device
    //
    ZeroMemory(&amp;devInfo, sizeof(devInfo));
    devInfo.cbSize = sizeof(devInfo);
    bRes = SetupDiCreateDeviceInfo(hDevInfo,
                                   L"FuzzerClass",
                                   &amp;FuzzerClassGuid,
                                   L"Fuzzer Class Devices",
                                   NULL,
                                   DICD_GENERATE_ID,
                                   &amp;devInfo);
    if (bRes == FALSE)
    {
        dwError = GetLastError();
        printf("SetupDiCreateDeviceInfo fail: %lx\n",
               dwError);
        goto Exit;
    }

    //
    // Add the hardware ID for this specific fuzzing device
    //
    dwPathLen = ((DWORD)wcslen(g_DevPath) + 3) * sizeof(WCHAR);
    bRes = SetupDiSetDeviceRegistryProperty(hDevInfo,
                                            &amp;devInfo,
                                            SPDRP_HARDWAREID,
                                            (LPBYTE)g_DevPath,
                                            dwPathLen);
    if (bRes == FALSE)
    {
        dwError = GetLastError();
        printf("SetupDiSetDeviceRegistryProperty fail: %lx\n",
               dwError);
        goto Exit;
    }

    //
    // Create the "fake" root device node for the device
    //
    bRes = SetupDiCallClassInstaller(DIF_REGISTERDEVICE,
                                     hDevInfo,
                                     &amp;devInfo);
    if (bRes == FALSE)
    {
        dwError = GetLastError();
        printf("SetupDiCallClassInstaller fail: %lx\n",
               dwError);
        goto Exit;
    }

    //
    // Now install the INF file for the fuzzing device.
    //
    // It will be root enumerated because of the device node
    // that we created above, resulting in the driver loading.
    //
    bRes = UpdateDriverForPlugAndPlayDevices(NULL,
                                             g_DevPath,
                                             g_InfPath,
                                             INSTALLFLAG_FORCE,
                                             &amp;bReboot);
    if (bRes == FALSE)
    {
        dwError = GetLastError();
        printf("UpdateDriverForPlugAndPlayDevices fail: %lx\n",
               dwError);
        goto Exit;
    }

    dwError = ERROR_SUCCESS;
Exit:
    return dwError;
}</pre>



<h4>Opening a Handle to the Driver</h4>



<p>Next, or rather, typically, even before attempting installation, we must obtain a handle to our device, checking if anyone exposes our device interface GUID on this system, and if so, obtaining the symbolic link name of the interface and creating a file handle to it. Here, we must use the GUID of our <em>device interface</em>, not that of the <em>device class</em>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">DEFINE_GUID(HyprFuzzGuid,
            0x4056adb2,
            0x8e4e,
            0x4b6a,
            0x88, 0x2e, 0xff, 0x1, 0xc, 0x3a, 0x1c, 0x63);

DWORD
HvFuzzGetHandle (
    _Outptr_ PHANDLE phFuzzer
    )
{
    CONFIGRET cr;
    DWORD dwError;
    WCHAR pwszDeviceName[MAX_DEVICE_ID_LEN];
    HANDLE hFuzzer;

    //
    // Assume failure
    //
    *phFuzzer = NULL;

    //
    // Get the device interface -- we only expose one
    //
    pwszDeviceName[0] = UNICODE_NULL;
    cr = CM_Get_Device_Interface_List((LPGUID)&amp;HyprFuzzGuid,
                                      NULL,
                                      pwszDeviceName,
                                      _countof(pwszDeviceName),
                                      CM_GET_DEVICE_INTERFACE_
                                      LIST_PRESENT);
    if (cr != CR_SUCCESS)
    {
        dwError = GetLastError();
        printf("CM_Get_Device_Interface_List fail: %lx\n",
               dwError);
        goto Exit;
    }

    //
    // Make sure there's an actual name there
    //
    if (pwszDeviceName[0] == UNICODE_NULL)
    {
        dwError = ERROR_NOT_FOUND;
        goto Exit;
    }

    //
    // Open the device
    //
    hFuzzer = CreateFile(pwszDeviceName,
                         GENERIC_WRITE | GENERIC_READ,
                         FILE_SHARE_READ | FILE_SHARE_WRITE,
                         NULL,
                         OPEN_EXISTING,
                         FILE_ATTRIBUTE_NORMAL,
                         NULL);
    if (hFuzzer == INVALID_HANDLE_VALUE)
    {
        dwError = GetLastError();
        printf("CreateFile fail: %lx\n",
               dwError);
        goto Exit;
    }

    //
    // Return a handle to the device
    //
    *phFuzzer = hFuzzer;
    dwError = ERROR_SUCCESS;
Exit:
    return dwError;
}</pre>



<h4>Uninstalling the Driver</h4>



<p>Either by offering it up as a user action in a command-line tool, or doing it every single time your user-mode application exists, you may want to uninstall the driver without prompting the user to use <em>Device Manage</em>r to do so. This is a simple matter of enumerating our driver to find it (this time using the <em>device class </em>GUID) and calling the same <strong><em>SetupAPI</em></strong> function as for installation, but with the <strong>DIF_REMOVE</strong> parameter instead.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">DWORD
HvFuzzUninstallDevice (
    VOID
    )
{
    BOOL bRes;
    DWORD dwError;
    HDEVINFO hDevInfo;
    SP_DEVINFO_DATA devData;

    //
    // Open the device info list for our class GUID
    //
    hDevInfo = SetupDiGetClassDevs(&amp;FuzzerClassGuid,
                                   NULL,
                                   NULL,
                                   0);
    if (hDevInfo == INVALID_HANDLE_VALUE)
    {
        dwError = GetLastError();
        printf("SetupDiGetClassDevs fail: %lx\n",
               dwError);
        goto Exit;
    }

    //
    // Locate our class device
    //
    ZeroMemory(&amp;devData, sizeof(devData));
    devData.cbSize = sizeof(devData);
    bRes = SetupDiEnumDeviceInfo(hDevInfo, 0, &amp;devData);
    if (bRes == FALSE)
    {
        dwError = GetLastError();
        printf("SetupDiEnumDeviceInfo fail: %lx\n",
               dwError);
        goto Exit;
    }

    //
    // Uninstall it
    //
    bRes = SetupDiCallClassInstaller(DIF_REMOVE,
                                     hDevInfo,
                                     &amp;devData);
    if (bRes == FALSE)
    {
        dwError = GetLastError();
        printf("SetupDiCallClassInstaller fail: %lx\n",
               dwError);
        goto Exit;
    }

    dwError = ERROR_SUCCESS;
Exit:
    return dwError;
}</pre>



<h3>Conclusion</h3>



<p class="has-drop-cap">Now that you&#8217;ve written up both the driver code and application code, checking if everything works is fairly simple. Once the installation path executes, a nicely visible entry in <em>Device Manager</em> will show up as per below, with the various strings we specified in our INF file.</p>



<p>Furthermore, due to the negative <em>Icon ID</em> (-8) we specified in our INF file, this instructs <em>Device Manager</em> to look up <em>Icon Group 8 </em>in the resource section of <strong>SetupApi.dll</strong>, which I thought matched quite well with the &#8220;<strong><em>VTL Bridge and Hyper Call Connector</em></strong>&#8221; device we are trying to represent. I used <em>Resource Hacker</em> to go over the resources, since the icons are not formally documented anywhere. Note that using a positive <em>Icon ID </em>results in <em>Device Manager</em> looking up the resource in&nbsp;your&nbsp;driver binary (or <em>DLL co-installer</em>).</p>



<figure class="wp-block-image"><img loading="lazy" width="432" height="772" src="http://www.alex-ionescu.com/wp-content/uploads/device.png" alt="" class="wp-image-455" srcset="https://alex-ionescu.com/wp-content/uploads/device.png 432w, https://alex-ionescu.com/wp-content/uploads/device-168x300.png 168w" sizes="(max-width: 432px) 100vw, 432px" /><figcaption>Our visible device in the Device Manager, under our custom device class (&#8220;Fuzzer Devices&#8221;)</figcaption></figure>



<p>And, once your application is talking to the driver, you&#8217;ll see a handle to some &#8220;unnamed&#8221;, or rather, as we&#8217;ve seen, a <em>numbered</em> device object, thanks to the instance path symbolic link exposed by our interface. By using hfiref0x&#8217;s great <em><a href="https://github.com/hfiref0x/WinObjEx64">WinObjEx64</a></em> tool, you can easily see it, as in the screenshot below.</p>



<figure class="wp-block-image"><img loading="lazy" width="514" height="603" src="http://www.alex-ionescu.com/wp-content/uploads/object.png" alt="" class="wp-image-454" srcset="https://alex-ionescu.com/wp-content/uploads/object.png 514w, https://alex-ionescu.com/wp-content/uploads/object-256x300.png 256w" sizes="(max-width: 514px) 100vw, 514px" /><figcaption>The device instance path symbolic link to the numbered device object</figcaption></figure>



<p>The astute reader may notice that this instance path is a simple combination of the root bus name, the <em>device class name</em>, an <em>instance&nbsp;identifier</em> for the device (0000), followed by the GUID of the <em>HyprFuzz device interface</em> we defined in our code above. As such, while not recommended, you can theoretically directly try to open a handle to your driver by hard-coding this information, but going through the appropriate API is certainly nicer.</p>



<p>This concludes Part 1 &#8212; while I apologize that no meaty technical details about <em>Hyper-V </em>were present, I still do hope that this content/tutorial was useful to some of the more junior readers, and check back next week for Part 2, where we&#8217;ll go over in detail into some hypervisor internals!</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-377 -->

<article id="post-358" class="post-358 post type-post status-publish format-standard hentry category-articles-and-presentations category-coding-and-reversing">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=358" rel="bookmark"><time class="entry-date published" datetime="2018-08-02T07:39:15-05:00">August 2, 2018</time><time class="updated" datetime="2018-08-04T04:39:28-05:00">August 4, 2018</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=358" rel="bookmark">Dynamic Tracing in Windows 10 19H1</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		<p>Windows 10 introduces an exciting new feature with potential security implications – <em>dynamic tracing</em> which finally enables long awaited-for features in the operating system.</p>
<p>At boot, the OS now calls KiInitDynamicTraceSupport, which <u>only if kernel debugging is enabled</u>, will call into the TraceInitSystem export provided by the ext-win-ms-ntos-trace-L-1-1-0 API Set, which is not currently shipping in the public OS schemas. This export receives a callback table with the following 4 functions:</p>
<ul>
<li>KeSetSystemServiceCallback</li>
<li>KeSetTracepoint</li>
<li>EtwRegisterEventCallback</li>
<li>MmDbgCopyMemory</li>
</ul>
<p>If the function returns successfully, KiDynamicTraceEnabled is now set.</p>
<p>The last routine is not terribly interesting, as it is already used by the debugger when accessing physical memory through commands such as !dd or dd /p. But the other three routines, well, Christmas came early this year.</p>
<h2>Kernel Mode ETW Event Callbacks</h2>
<p>EtwRegisterEventCallback is a new internal function, accessible only by the dynamic trace system, which allows associating a custom ETW event callback routine, and associated context, with any ETW Logger ID. The function validates that the callback function is valid by calling KeIsValidTraceCallbackTarget, which does two things:</p>
<ol>
<li>Is Dynamic Tracing Enabled? (i.e.: KiDynamicTraceEnabled == 1)</li>
<li>Is this a valid callback (same requirements as Ps and Ob callbacks, i.e.: was the driver containing the callback linked with /INTEGRITYCHECK)</li>
</ol>
<p>Once the check succeeds, the matching logger context structure (WMI_LOGGER_CONTEXT) is looked up, and an appropriate ETW_EVENT_CALLBACK_CONTEXT structure is allocated from the pool (tag EtwC), and inserted into the CallbackContext field of the logger context.</p>
<p>At this point, any time an ETW event is thrown by this logger, this kernel-mode callback is also called, introducing, for the first time, support for kernel-mode consumption of ETW events, one of the biggest asks of the security industry in the last decade. This call is done by EtwpInvokeEventCallback, which calls the registered ETW callback with the raw ETW buffer data at the correct offset where this event starts, and the size of the event in the buffer. This new callback is called from:</p>
<ul>
<li>EtwTraceEvent and EtwTraceRaw</li>
<li>EtwpLogKernelEvent and EtwpWriteUserEvent</li>
<li>EtwpEventWriteFull</li>
<li>EtwpTraceMessageVa</li>
<li>EtwpLogSystemEventUnsafe</li>
</ul>
<p>This essentially gives access to the callback to any and all ETW event data, including even WPP and TraceLog debug messages.</p>
<h2>System Call Hooks</h2>
<p>KeSetSystemServiceCallback, on the other hand, fulfills the second Christmas wish of every Windows security researcher: officially implemented system call hooks. The API allows the dynamic trace system to register a system call hook <u>by name</u> and pass an associated callback function and context. It introduces a new table, called the KiSystemServiceTraceCallbackTable, which copies the contents of the KiServicesTab (a new, more comprehensive system call table) into a Red-Black tree which contains an entry for each system call with its absolute location, number of arguments, and a <em>pre </em>and <em>post</em> callback (and context).</p>
<p>Before continuing, it’s worth talking about the format of the new KiServicesTab structure, as it introduces some valuable information for reverse engineering:</p>
<ul>
<li>The first 32-bit value is the hash of the system call function’s name</li>
<li>The second 32-bit value is the argument count of the function</li>
<li>The last 64-bit value, is the absolute pointer to the function</li>
</ul>
<p>The hash function, implemented in a sane language as C looks as follows:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="c" style="font-family:monospace;"><span style="color: #b1b100;">for</span> <span style="color: #009900;">&#40;</span>nameHash <span style="color: #339933;">=</span> <span style="color: #0000dd;">0</span><span style="color: #339933;">;</span> <span style="color: #339933;">*</span>CallName <span style="color: #339933;">!=</span> ANSI_NULL<span style="color: #339933;">;</span> CallName<span style="color: #339933;">++</span>
<span style="color: #009900;">&#123;</span>     
    nameHash <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span><span style="color: #0000dd;">1025</span> <span style="color: #339933;">*</span> <span style="color: #009900;">&#40;</span>nameHash <span style="color: #339933;">+</span> <span style="color: #339933;">*</span>CallName<span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;&gt;</span> <span style="color: #0000dd;">6</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">^</span>
                <span style="color: #0000dd;">1025</span> <span style="color: #339933;">*</span> <span style="color: #009900;">&#40;</span>nameHash <span style="color: #339933;">+</span> <span style="color: #339933;">*</span>CallName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">for (nameHash = 0; *CallName != ANSI_NULL; CallName++
{     
    nameHash = (1025 * (nameHash + *CallName) &gt;&gt; 6) ^
                1025 * (nameHash + *CallName);
}</p></div>

<p>With some cringy JavaScript, we can write a simple WinDbg imperative script:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #3366CC;">&quot;use strict&quot;</span><span style="color: #339933;">;</span>
<span style="color: #000066; font-weight: bold;">function</span> hashName<span style="color: #009900;">&#40;</span>callName<span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">var</span> hash <span style="color: #339933;">=</span> <span style="color: #CC0000;">0</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#91;</span>...<span style="color: #660066;">callName</span><span style="color: #009900;">&#93;</span>.<span style="color: #660066;">forEach</span><span style="color: #009900;">&#40;</span>
       c <span style="color: #339933;">=&gt;</span> hash <span style="color: #339933;">=</span> <span style="color: #CC0000;">1025</span><span style="color: #339933;">*</span><span style="color: #009900;">&#40;</span>hash <span style="color: #339933;">+</span> c.<span style="color: #660066;">charCodeAt</span><span style="color: #009900;">&#40;</span><span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;&gt;&gt;</span> <span style="color: #CC0000;">6</span> <span style="color: #339933;">^</span>
                   <span style="color: #CC0000;">1025</span><span style="color: #339933;">*</span><span style="color: #009900;">&#40;</span>hash <span style="color: #339933;">+</span> c.<span style="color: #660066;">charCodeAt</span><span style="color: #009900;">&#40;</span><span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span>
       <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #000066; font-weight: bold;">return</span> hash <span style="color: #339933;">&gt;&gt;&gt;</span> <span style="color: #CC0000;">0</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">&quot;use strict&quot;;
function hashName(callName)
{
    var hash = 0;
    [...callName].forEach(
       c =&gt; hash = 1025*(hash + c.charCodeAt(0)) &gt;&gt;&gt; 6 ^
                   1025*(hash + c.charCodeAt(0))
       );
    return hash &gt;&gt;&gt; 0;
}</p></div>

<p>The trick, of course, is that the function name must be passed in without its <em>Nt</em> prefix – countless hours having been wasted trying to debug the hash algorithm by yours truly. Let’s take a look at some debugger output:</p>
<pre>lkd&gt; dps nt!KiServicesTab L2
fffff803`0e102e50  00000004`<span style="color: #000080;"><strong>b74a2d8f</strong></span>
fffff803`0e102e58  fffff803`0dfe2ac0 nt!NtOpenKeyTransacted</pre>
<pre>lkd&gt; dx @$scriptContents.hashName("OpenKeyTransacted")
@$scriptContents.hashName("OpenKeyTransacted") : <strong>0xb74a2d8f</strong></pre>
<p>Back to KeSetSystemServiceCallback, if a system call callback is being registered, the KiSystemServiceTraceCallbackCount variable is incremented, and the KiDynamicTraceMask has its lowest bit set (the operations are reversed in the case of a system call callback unregistration). Unregistration is done by looping while KiSystemServiceTraceCallbacksActive is set, acting as a barrier to avoid unregistration in the middle of a call. All of these operations are further done under a lock (KiSystemServiceTraceCallbackLock).</p>
<p>Once the callback is registered (which must also satisfy the checks done by KeIsValidTraceCallbackTarget), it will interact with the system call handler as follows: inside of KiSystemServiceCopyEnd, a check is made with KiDynamicTraceMask to verify if the lowest bit is set, if so, system call execution goes through a path where KiTrackSystemCallEntry is called, passing in all of the register-based arguments in a single stack-based structure.  This uses the KiSystemServiceTraceCallbackTable Red-Black Tree to locate any matching callbacks, and if one is present, and KiDynamicTraceEnabled is set, KiSystemServiceTraceCallbacksActive is incremented, the callback is made, and then the KiSystemServiceTraceCallbacksActive is decremented.</p>
<p>When this function returns, the return value is captured, and the actual system call handler is called. Then, KiTrackSystemCallExit is called, passing in both the capture result from earlier, as well as the return value of the system call handler. It performs the same operations as the entry routine, but calling the exit callback instead. Note that callbacks cannot override input parameters nor the return value, at the moment.</p>
<h2>Trace Points</h2>
<p>KeSetTracepoint is the last of the new capabilities, and introduces an ability to register dynamic trace points, enable and disable them, and finally unregister them. The idea of a ‘trace point’ should be familiar with anyone that has used Linux-based <em>kprobes</em> before.</p>
<p>A trace point is registered by passing in an address and which is then looked up against any currently loaded kernel modules. As long as the address is not part of the INIT (which is discarded by now, or soon will be) or KVASCODE section (which is the KVA Shadow space used to mitigate Meltdown), a trace point structure is allocated in non-paged pool (with the Ftrp tag). Next, the KiTpHashTable is used to scan for existing trace points on the same address. If one is found, an error is returned, as only a single trace point is supported per function. Note that trace point callbacks are also validated by calling KeIsValidTraceCallbackTarget just like in the case of the previous callbacks.</p>
<p>KiTpSetupCompletion is used to finalize registration of a trace point, which first calls KiTpReadImageData based on the instruction size that was specified. An instruction parser (KiTpParseInstructionPrefix, KiTpFetchInstructionBytes) is used, followed by an emulator (KiTpEmulateInstruction, KiTpEmulateMovzx, and many more) are used to determine the instruction size that is required. Once the information is known, the original instructions are copied. For what it’s worth, KiTpReadImageData is a simple function which attaches to the input process and basically does a memcpy of the address and specified bytes.</p>
<p>Once registered, the KiTpRegisteredCount variable is incremented, and the trace point can now be enabled. The first time this happens, KiTpEnabledCount is incremented, and the KiDynamicTraceMask is modified, this time setting the next lowest bit. Then, KiTpWriteMemory is called, which follows a similar code path as when using the debugger to set breakpoints (attaching to the process, if any, calling MmDbgCopyMemory to probe the address, and then using MmDbgCopyMemory wrapped inside of KdEnterDebugger and KdExitDebugger to make the patch.</p>
<p>Disabling a trace point follows the same pattern, but in the opposite direction. Just like system call callback unregistration, a variable, this time called KiTpActiveTrapsCount, is used to avoid removing a trace point while it is still active, and all operations are done by holding a lock (KiTpStateLock).</p>
<p>So how are trace points actually triggered? Simple (again, no surprise to kprobe users) – an “INT 3” instruction is what ends up getting patched on top of the existing code at the target address, which will result in an eventual exception to be handled by KiDispatchException. If the status code is STATUS_BREAKPOINT, and KiDynamicTraceMask has Bit 1 set, KiTpHandleTrap is called.</p>
<p>This increments KiTpActiveTrapsCount to protect against racing unregistration, and looks up the address in KiTpHashTable. If there’s a match, it then makes sure that an INT 3 is actually present at the address. In case of a match, the handler checks if this is a first chance exception and if dynamic tracing is enabled. If so, the callback is executed, and its return value is used to determine if the exception should be raised or not. If the function returns FALSE, then KiTpEmulateInstruction is called to emulate the original instruction stream and resume execution. Otherwise, if dynamic tracing is not enabled, or if this is a second chance exception, KiTpWriteMemory is used to restore the original code to avoid any further traps on that address.</p>
<h2>Conclusion</h2>
<p>Well, there you have it – the latest 19H1 release of Windows should introduce some exciting new functionality for tracing and debugging. Realistically, it’s unlikely that this will ever be exposed for 3<sup>rd</sup> security product party use (or even to internal competing security tools), but the addition of these capabilities may one day lead to that functionality being exposed in some way (especially the ETW tracing capability). Since there is no publicly shipping host module for the Tracing API Set, it may be that this functionality will only ever internally be used by Microsoft for their own testing, but it would be great to one day see it for 3<sup>rd</sup> party debugging and tracing as well.</p>
<p>Finally, it’s worth noting that the KiDynamicTraceEnabled variable is protected by the PsKernelRangeList, which is PatchGuard’s internal way of monitoring specific variables and tables outside of its regular set of behaviors, so attackers that try to manipulate this behavior illicitly will likely incur its wrath. Still, since this functionality is meant to be used when a kernel debugger is attached (which disables PatchGuard), it’s certainly possible to build a custom hand-crafted driver that enables and uses this functionality for legitimate purposes inside of say, a sandbox product.</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-358 -->

<article id="post-340" class="post-340 post type-post status-publish format-standard hentry category-articles-and-presentations category-coding-and-reversing">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=340" rel="bookmark"><time class="entry-date published" datetime="2017-08-07T08:12:53-05:00">August 7, 2017</time><time class="updated" datetime="2017-08-07T08:57:02-05:00">August 7, 2017</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=340" rel="bookmark">Bringing Call Gates Back</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		<h2>Introduction</h2>
<p>A few months ago, as part of looking through the changes in Windows 10 Anniversary Update for the Windows Internals 7th Edition book, I noticed that the kernel began enforcing usage of the CR4[FSGSBASE] feature (introduced in Intel Ivy Bridge processors, see Section 4.5.3 in the <a href="http://developer.amd.com/wordpress/media/2012/10/24593_APM_v21.pdf">AMD Manuals</a>) in order to allow usage of <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd627187(v=vs.85).aspx">User Mode Scheduling</a> (UMS).</p>
<p>This led me to further analyze how UMS worked before this processor feature was added – something which I knew a little bit about, but not enough to write on.</p>
<p>What I discovered completely changed my understanding of 64-bit Long Mode semantics and challenged many assumptions I was making – pinging a few other experts, it seems they were as equally surprised as I was (even Mateusz&#8221;j00ru&#8221; Jurczyk wasn’t aware!).</p>
<p>Throughout this blog post, you’ll see how x64 processors, even when operating in 64-bit long mode:</p>
<ul>
<li>Still support the usage of a Local Descriptor Table (LDT)</li>
<li>Still support the usage of Call Gates, using a new descriptor format</li>
<li>Still support descriptor-table-based (GDT/LDT) segmentation using the fs/gs segment – ignoring the new MSR-based mechanism that was intended to “replace” it</li>
</ul>
<p>Plus, we’ll see how x64 Windows still allows user-mode applications to create an LDT (with specific limitations).</p>
<p>At the end of the day, we’ll show that j00ru’s and Gynvael Coldwind&#8217;s amazing <a href="http://j00ru.vexillium.org/?p=290">paper</a> on abusing Descriptor Tables is still relevant, even on x64 systems, on systems up to Windows 10 Anniversary Update. As such, reading that paper should be considered a prerequisite to this post.</p>
<p>Please, take into consideration that all these techniques no longer work on Anniversary Update systems or later, nor will they work on Intel Ivy Bridge processors or later, which is why I am presenting them now. Additionally, there is no “vulnerability” or “zero-day” presented here, so there is no cause for alarm. This is simply an interesting combination of CPU, System, and OS Internals, which on older systems, could’ve been used as a way to gain code execution in Ring 0, in the presence of an already existing vulnerability.</p>
<h2>A brief primer on User Mode Scheduling</h2>
<p>UMS efficiently allows user-mode processes to switch between multiple “user” threads without involving the kernel – an extension and large improvement of the older “<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682661(v=vs.85).aspx">fiber</a>” mechanism. A number of <a href="https://channel9.msdn.com/Shows/Going+Deep/Dave-Probert-Inside-Windows-7-User-Mode-Scheduler-UMS">videos on Channel 9</a> explain how this is done, as does the <a href="http://www.google.com/patents/US20100083275">patent</a>.</p>
<p>One of the key issues that arises, when trying to switch between threads without involving the kernel, is the per-thread register that’s used on x86 systems and x64 systems to point to the TEB. On x86 systems, the FS segment is used, leveraging an entry in the GDT (KGDT_R3_TEB), and on x64, the GS segment is used, leveraging the two Model Specific Registers (MSRs) that AMD implemented: MSR_GS_BASE and MSR_KERNEL_GS_SWAP.</p>
<p>Because UMS would now need to allow switching the base address of this per-thread register from user-mode (as involving a kernel transition would defy the whole point), two problems exist:</p>
<ol>
<li>On x86 systems, this could be implemented through segmentation, allowing a process to have additional FS segments. But doing so in the GDT would limit the number of UMS threads available on the system (plus cause performance degradation if multiple processes use UMS), while doing so in the LDT would clash with the existing usage of the LDT in the system (such as NTVDM).</li>
<li>On x64 systems, modifying the base address of the GS segment requires modifying the aforementioned MSRs &#8212; which is a Ring 0 operation.</li>
</ol>
<p>It is worth bringing up the fact that fibers never solved this problem &#8211;instead having all fibers share a single thread (and TEB). But the whole point of UMS is to provide true thread isolation. So, what can Windows do?</p>
<p>Well, it turns out that close reading of the AMD Manuals (Section 4.8.2) indicate the following:</p>
<ul>
<li>&#8220;Segmentation is disabled in 64-bit mode&#8221;</li>
<li>&#8220;Data segments referenced by the FS and GS segment registers receive special treatment in 64-bit mode.&#8221;</li>
<li>&#8220;For these segments, the base address field is not ignored, and a non-zero value can be used in virtual-address calculations.</li>
</ul>
<p>I can&#8217;t begin to count how many times I&#8217;ve heard, seen, and myself repeated the first bullet. But that FS/GS can <em>still</em> be used with a data segment, even in 64-bit long mode? This literally brought back memories of Unreal Mode.</p>
<p>Clearly, though, Microsoft was paying attention (did they request this?). As you can probably now guess, UMS leverages this particular feature (which is why it is only available on x64 versions of Windows). As a matter of fact, the kernel creates a Local Descriptor Table as soon as one UMS thread is present in the process.</p>
<p>This was my second surprise, as I had no idea LDTs were still something supported when executing native 64-bit code (i.e.: ‘long mode’). But they still are, and so adding in the TABLE_INDICATOR (TI) bit (0x4) in a segment will result in the processor reading the LDTR to recover the LDT base address and dereference the segment indicated by the other bits.</p>
<p>Let&#8217;s see how we can get our own LDT for a process.</p>
<h2>Local Descriptor Table on x64</h2>
<p>Unlike the x86 NtSetLdtEntries API and the ProcessLdtInformation information class, the x64 Windows kernel does not provide a mechanism for arbitrary user-mode applications to create an LDT. In fact, these APIs all return STATUS_NOT_SUPPORTED.</p>
<p>That being said, by calling the user-mode API EnterUmsSchedulingMode, which basically calls NtSetInformationThread with the ThreadUmsInformation class, the kernel will go through the creation of an LDT (KeInitializeProcessLdt).</p>
<p>This, in turn, will populate the following fields in KPROCESS:</p>
<ol>
<li>LdtFreeSelectorHint which indicates the first free selector index in the LDT</li>
<li>LdtTableLength which stores the total number of LDT entries – this is hardcoded to 8192, revealing the fact that a static 64K LDT is allocated</li>
<li>LdtSystemDescriptor which stores the LDT entry that will be stored in the GDT</li>
<li>LdtBaseAddress which stores a pointer to the LDT of this process</li>
<li>LdtProcessLock which is a FAST_MUTEX used to synchronize changes to the LDT</li>
</ol>
<p>Finally, a DPC is sent to all processors which loads the LDT into all the processors.</p>
<p>This is done by reading the KPROCESS-&gt;LdtSystemDescriptor and writing into the GDT at offset 0x60 on Windows 10, or offset 0x70 on Windows 8.1 (bonus round: we’ll see why there’s a difference a bit later).</p>
<p>Then, the LLDT instruction is used, and the selector is stored in the KPRCB-&gt;LdtSelector field. At this point, the process has an LDT. The next step is to fill it out.</p>
<p>The function now reads the address of the TEB. If the TEB happens to fall in the 32-bit portion of the address space (i.e.: than 0xFFFFFF000), it is set as the base address of a new segment in the LDT (using LdtFreeSelectorHint to choose which selector – in this case, 0x00), and the TebMappedLowVa field in KTHREAD replicates the real TEB address.</p>
<p>On the other hand, if the TEB address is above 4GB, Windows 8.1 and earlier will transform the private allocation holding the TEB into a shared mapping (using a prototype PTE) and re-allocate a second copy at the first available top-down address available (which would usually be 0xFFFFE000). Then, TebMappedLowVa will have this re-mapped address below 4GB.</p>
<p>Additionally, the VAD, which remains “private” (and this will not show up as a truly shared allocation) will be marked as NoChange, and further will have the VadFlags.Teb field set to indicate it is a special allocation. This prevents any changes to be made to this address through calls such as VirtualProtect.</p>
<p>Why this 4GB limitation and re-mapping? How does an LDT help here? Well, it turns out that the AMD64 manuals are pretty clear about the fact that the mov gs, XXX and pop gs instructions:</p>
<ul>
<li>Wipe the upper 32-bit address of the GS base address shadow register</li>
<li>Load the lower 32-bit address of the GS base address shadow register with the contents of the descriptor table entry at the given selector</li>
</ul>
<p>Therefore, x86-style segmentation is still fully supported when it comes to FS and GS, even when operating in long mode, and overrides the 64-bit base address stored in MSR_GS_BASE. However, because there is no 64-bit data segment descriptor table entry, only a 32-bit base address can be used, requiring this complex remapping done by the kernel.</p>
<p>On Windows 10, however, this functionality is not present, and instead, the kernel checks for presence of the FSGSBASE CPU feature. If the feature is present, an LDT is not created at all, and instead the fact that user-mode applications can use the WRGSBASE and RDGSBASE instructions is leveraged to avoid having to re-map a &lt; 4GB TEB.  On the other hand, if the CPU feature is <em>not</em> available, as long as the real TEB ends up below 4GB, an LDT will <em>still</em> be used.</p>
<p>A further, and final change, occurs in Anniversary Update, where the LDT functionality is completely removed – even if the TEB is below 4GB, FSGSBASE is enforced for UMS availability.</p>
<p>Lastly, during every context switch, if the KPROCESS of the newly scheduled thread contains an LDT base address that’s different than the one currently loaded in the GDT, the new LDT base address is loaded in the GDT, and the LDT selector is loaded against (hardcoded from 0x60 or 0x70 again).</p>
<p>Note that if the new KPROCESS does not have an LDT, the LDT entry in the GDT is not deleted – therefore the GDT will always have an LDT entry now that at least one UMS thread in a process has been created, as can be seen in this debugger output:</p>
<pre>lkd&gt; $$&gt;a&lt; c:\class\dumpgdt.wds 70 70
                                                    P Si Gr Pr Lo
Sel        Base              Limit          Type    l ze an es ng
---- ----------------- ----------------- ---------- - -- -- -- --
0070 ffffe000`2037d000 00000000`0000ffff LDT        0 Nb By P  Nl</pre>
<p>You can see how this matches the LDT descriptor of “UMS Test” application:</p>
<pre>lkd&gt; dt nt!_KPROCESS ffffe0002143e080 Ldt*
+0x26c LdtFreeSelectorHint : 1
+0x26e LdtTableLength : 0x2000
+0x270 LdtSystemDescriptor : _KGDTENTRY64
+0x280 LdtBaseAddress : <strong>0xffffe000</strong>`2037<strong>d000</strong> Void</pre>
<pre>lkd&gt; dx ((nt!_KGDTENTRY64 *)0xffffe0002143e2f0)
[+0x000] LimitLow : 0xffff [Type: unsigned short]
[+0x002] BaseLow : <strong>0xd000</strong> [Type: unsigned short]
[+0x004] Bytes [Type: ]
[+0x004] Bits [Type: ]
[+0x008] BaseUpper : <strong>0xffffe000</strong> [Type: unsigned long]
[+0x00c] MustBeZero : 0x0 [Type: unsigned long]</pre>
<h2>Call Gates on x64</h2>
<p>Call gates are a mechanism which allows 16-bit and 32-bit legacy applications to go from a lower privilege level to a higher privilege level. Although Windows NT never used such call gates internally, a number of poorly written AV software did, a few emulators, as well as exploits, both on 9x and NT systems, because of the easy way they allowed someone with access to physical memory (or with a Write-What-Where vulnerability in virtual memory) to create a backdoor way to elevate privileges.</p>
<p>With the advent of Supervisor Mode Execution Prevention (SMEP), however, this technique seems to have fallen out of fashion. Additionally, on x64 systems, since Call Gates are expected to be inserted into the Global Descriptor Table (GDT), which PatchGuard is known to protect, the technique is even further degraded. On top of that, most people (myself included) assumed that AMD had simply removed this oft-unused feature completely from the x64 architecture.</p>
<p>Yet, interestingly, AMD <em>did</em> go through the trouble of re-defining a new x64 long mode call gate descriptor format, removing the legacy “parameter count”, and extending it to a 16-byte format to make room for a 64-bit offset, as shown below:</p>
<p><img loading="lazy" class="alignnone size-full wp-image-344" src="http://www.alex-ionescu.com/wp-content/uploads/callgate.png" alt="" width="535" height="209" srcset="https://alex-ionescu.com/wp-content/uploads/callgate.png 535w, https://alex-ionescu.com/wp-content/uploads/callgate-300x117.png 300w" sizes="(max-width: 535px) 100vw, 535px" /></p>
<p>That means that if a call gate were to find itself into a descriptor table, the processor would still support the usage of a far call or far jmp in order to reference a call gate descriptor and change CS:RIP to a new location!</p>
<h2>Exploit Technique: Finding the LDT</h2>
<p>First, although SMEP makes a Ring 3 RIP unusable for the purposes of getting Ring 0 execution, setting the Target Offset of a 64-bit Call Gate to a stack pivot instruction, then RET’ing into a disable-SMEP gadget will allow Ring 0 code execution to continue.</p>
<p>Obviously, HyperGuard now prevents this behavior, but HyperGuard was only added in Anniversary Update, which disables usage of the LDT anyway.</p>
<p>This means that the ability to install a 64-bit Call Gate is still a viable technique for getting controlled execution with Ring 0 privileges.</p>
<p>That being said, if the GDT is protected by PatchGuard, then it means that inserting a call gate is not really viable – there’s a chance that it may be detected as soon as its inserted, and even an attempt to clean-up the call gate after using it might come too late. When trying to implement a stable, persistent, exploit technique, it’s best to avoid things which PatchGuard will detect.</p>
<p>On the other hand, now we know that x64 processors still support using an LDT, and that Windows leverages this when implementing UMS. Additionally, since arbitrary processes can have arbitrary LDTs, PatchGuard does <em>not</em> guard individual process’ LDT entries, unlike the GDT.</p>
<p>That still leaves the question of how do we find the LDT of the current process, once we’ve enabled UMS? Well, given that the LDT is a static, 64KB allocation, from non-paged pool, this does still leave us with an option. As explained a few years ago on <a href="http://www.alex-ionescu.com/?p=231">my post about the Big Pool</a>, such a large allocation will be easily enumerable from user-mode as long as its tag is known:</p>
<pre>lkd&gt; !pool ffffe000`22f3b000</pre>
<pre>Pool page ffffe00022f3b000 region is Nonpaged pool
*ffffe00022f3b000 : large allocation, tag <strong>kLDT</strong>, size 0x10000 bytes</pre>
<p>While this is a nice information leak even on Windows 10, a mitigation comes into play unfortunately in Windows 8.1: Low IL processes can no longer use the API I described, meaning that the LDT address can only be leaked (without an existing Ring 0 arbitrary read/infoleak vulnerability) at Medium IL or higher.</p>
<p>Given that this is a fairly large size allocation, however, it means that if a controlled 64KB allocation can be made in non-paged pool and its address leaked from Low IL, one can still guess the LDT address. Ways for doing so are left as an exercise to the reader 🙂</p>
<p>Alternatively, if an arbitrary read vulnerability is available to the attacker, the LDT address is easily retrievable from the KPROCESS structure by reading the LdtBaseAddress field or by computing it from the LdtSystemDescriptor field. Getting the KPROCESS is easy through a variety of undocumented APIs, although these are now also blocked on Windows 8.1 from Low IL.</p>
<p>Therefore, another common technique is to use a GDI or User object which has an owner such a tagTHREADINFO, which then points to ETHREAD (which then points to EPROCESS). Alternatively, one could retrieve the GDT base address from the KPCR’s GdtBase field, if a way of leaking the KPCR is available, and then read the segment base address at offset 0x60 or 0x70. The myriad ways of leaking pointers and bypassing KASLR, even from Low IL, is beyond (beneath?) the content of this post.</p>
<h2>Exploit Technique: Building a Call Gate</h2>
<p>The next step is to now write a call gate in one of the selectors present in the LDT. By default, if this is the initial scheduler thread, we expect to find its TEB. Indeed, on this sample Windows 8.1 VM, we can see the re-mapped TEB at 0xFFFFE000:</p>
<pre>lkd&gt; dq 0xffffe000`2037d000
ffffe000`2037d000 <strong>ffff</strong>f3ff`<strong>e000</strong>1820</pre>
<pre>lkd&gt; dt nt!_KGDTENTRY64 ffffe000`2037d000 -b
+0x000 LimitLow : 0x1820
+0x002 BaseLow : <strong>0xe000</strong>
+0x004 Bytes :
+0x000 BaseMiddle : <strong>0xff</strong> ''
+0x001 Flags1 : 0xf3 ''
+0x002 Flags2 : 0xff ''
+0x003 BaseHigh : <strong>0xff</strong> ''
+0x004 Bits :
+0x000 BaseMiddle : 0y11111111 (0xff)
+0x000 Type : 0y10011 (0x13)
+0x000 Dpl : 0y11
+0x000 Present : 0y1
+0x000 LimitHigh : 0y1111
+0x000 System : 0y1
+0x000 LongMode : 0y1
+0x000 DefaultBig : 0y1
+0x000 Granularity : 0y1
+0x000 BaseHigh : 0y11111111
+0x008 BaseUpper : 0
+0x00c MustBeZero : 0</pre>
<p>Converting this data segment into a call gate can be achieved by merely converting the type from 0x13 (User Data Segment, R/W, Accessed) to 0x0C (System Segment, Call Gate).</p>
<p>However, doing so will now create a call gate with the following CS:[RIP] =&gt; E000:00000000FFFF1820</p>
<p>We have thus two problems:</p>
<ol>
<li>0xE000 is not a valid segment</li>
<li>0xFFFF1820 is a user-mode address, which will cause a SMEP violation on most modern systems.</li>
</ol>
<p>The first problem is not easy to solve – while we could create thousands of UMS threads, causing 0xE000 to become a valid segment (which we’d then convert into a Ring 0 Code Segment), this would be segment 0xE004. And if one can change 0xE000, might as well avoid the trouble, and set it to its correct value – (KGDT64_R0_CODE) 0x10, from the get go.</p>
<p>The second problem can be fixed in a few ways.</p>
<ol>
<li>An arbitrary write can be used to set BaseUpper, BaseHigh, LimitHigh, Flags2, and LimitLow (which make up the 64-bits of Code Offset) to the desired Ring 0 RIP that contains a stack pivot or some other interesting instruction or gadget.</li>
<li>Or, an arbitrary write to modify the PTE to make it Ring 0, since the PTE base address is not randomized on the Windows versions vulnerable to an LDT-based attack.</li>
<li>Lastly, if one is only interested in SYSTEM-&gt;Ring 0 escalation, systems prior to Windows 10 can be attacked through the AWE-based attack I described at Infiltrate 2015, which will allow the creation of an executable Ring 0 page.</li>
</ol>
<p>It is also worth mentioning that since Windows 7 has all of non-paged pool marked as executable, and the LDT is itself a 64KB non-paged pool allocation, it is made up of entirely executable pages, so an arbitrary write could be used to set the Call Gate offset to somewhere within the LDT allocation itself.</p>
<h2>Exploit Technique: Writing the Ring 0 Payload</h2>
<p>Writing x64 Ring 0 payload code is a lot harder than x86.</p>
<p>For starters, the GS segment must be immediately set to its correct value, else a triple fault could occur. This is done through the swapgs instruction.</p>
<p>Next, it’s important to realize that a call gate sets the stack segment selector (SS) to 0. While x64 natively operates in this fashion, Windows expects SS to be KGDT64_R0_DATA, or 0x18, and it may be a good idea to respect that.</p>
<p>Additionally, note that the value to which RSP will be set to is equal to the TSS’s Rsp0, normally used for interrupts, while a typical system call would use the KPRCB’s RspBase field. These ought to be in sync, but keep in mind that a call gate does not disable interrupts automatically, unlike an interrupt gate.</p>
<p>A reliable exploit must take note of all these details to avoid crashing the machine.</p>
<p>Further, exiting from a call gate <em>must</em> be done with the ‘far return’ instruction. Once again, another caveat applies: some assemblers may not generate a true 64-bit far return (i.e.: lacking a rex.w prefix), which will incorrectly pop 32-bit data from the stack. Make sure that a ‘retfq’ or ‘retfl’ or ‘rex.w retf’ is generated instead.</p>
<h2>Exploit Techniques Bonus: Corrupting the LDT Address, Hidden Segment, Lazy GDT Clear</h2>
<p>Note that we’ve gone through some difficulty in obtaining the address of the LDT, and describing the ways in which the UMS TEB entries could be corrupted in a way to convert them to Call Gate entries, it’s useful to mention that perhaps a much easier (depending on the attack parameters and vulnerability) technique is to just overwrite the LdtSystemDescriptor field in EPROCESS (something which j00ru&#8217;s x86-based paper also pointed out).</p>
<p>That&#8217;s because, at the next context switch, the GDT will automatically be updated a copy of this descriptor, which could be set to a user-mode base address (due to a lack of SMAP in the OS), avoiding the need to either patch the GDT (and locating it &#8212; which is hard when Hyper-V&#8217;s NPIEP feature is enabled) or modifying the true kernel LDT (and leaking its address).</p>
<p>Indeed, for this to work, a single 32-bit (in fact, even less) arbitrary write is required, which must, at minimum, set the fields:</p>
<ul>
<li>P to 1 (Making the segment present)</li>
<li>Type to 2 (Setting the segment as an LDT entry)</li>
<li>BaseMid to 1 (Setting the base to 0x10000, as an example, as addresses below this are no longer allowed)</li>
</ul>
<p>Therefore, a write of 0x00008201, for example, is sufficient to achieve the desired result of setting this process’ LDT to 0x10000.</p>
<p>As soon as a context switch occurs back to the process, the GDT will have this LDT segment descriptor loaded:</p>
<pre>lkd&gt; $$&gt;a&lt; c:\class\dumpgdt.wds 70 70
                                                    P Si Gr Pr Lo
Sel        Base              Limit          Type    l ze an es ng
---- ----------------- ----------------- ---------- - -- -- -- --
0070 00000000`00010000 00000000`00000000 LDT        0 Nb By P  Nl</pre>
<p>But wait – isn’t setting a limit of 0 creating an empty LDT? Not to worry! In long mode, limits on LDT descriptor entries are completely ignored&#8230; unfortunately though, although this is what the AMD64 manual states, I get access violations, at least on Hyper-V x64, if the limit is not large enough to contain the segment. So your mileage my vary.</p>
<p>But that’s all right – we can still limit this to a simple 4-byte overwrite! The trick lies into simply going through the process of creating a real LDT in the first place, then leaking its address (as described). Following that, allocate the user-mode fake LDT at the same lower 32-bit address, keeping the upper 32-bits zeroed. Then, use the 4-byte overwrite to clear the KPROCESS’ LdtSystemDescriptor’s BaseUpper field.</p>
<p>Even if the kernel LDT address cannot be leaked for some reason, one can easily “guess” every possibility (knowing it will be page aligned) and spray the entire 32-bit address space. This sounds like a lot, but is really only about a million allocations.</p>
<p>Finally, an alternate technique is to leverage exception handling: if the wrong LDT is overwritten, the kernel won’t crash when loading the invalid LDT segment (as long as it’s canonical, the PTE isn’t checked for validity). Instead, only when the exploit attempts to <em>use</em> the call gate, will a GPF be generated, and only in the context of the Ring 3 application. As such, one can progressively try each possible lower 32-bit LDT address until a GPF is no longer issued. Voila: we have found the correct lower 32-bits.</p>
<p>As another bonus, why is it that the selector for the LDT is 0x70 on Windows 8.1 and earlier, but 0x60 on Windows 10?</p>
<p>The answer lies in an even lesser known fact: up until the latter, the kernel created a Ring 0 Compatibility Mode Segment at offset 0x60! This means that a sneaky attacker can set CS to 0x60 and enjoy a weird combination of 32-bit legacy code execution with Ring 0 privileges (a number of caveats apply, including what an interrupt would do when returning, and the fact that no kernel API could be used at all).</p>
<p>Finally, note that even once a UMS-leveraging process exists, the GDT entry is not cleared, and points to a freed pool allocation. This means that if a way to allocate 64KB of controlled non-paged pool memory is known (such as some of the ways described in my Big Pool blog post), the GDT entry could be made to point to controlled memory (such as a named pipe buffer) which will re-use the same pointer. Then, some way to make the system continue to trust this address/entry should be achieved (either by causing an LLDT of 0x60/0x70 to be issued or having an EPROCESS’s LdtSystemDescriptor field re-use this address).</p>
<p>This is more of an anti-forensics technique than anything, because it keeps the GDT pointing to a kernel-mode LDT, even though it’s attacker controlled.</p>
<h2>PoC||GTFO</h2>
<p>While I won&#8217;t be releasing sample code leveraging this attack, it could easily be added to the various PowerShell-based &#8220;Vulnerable Driver&#8221; techniques that @b33f has been creating.</p>
<p>Here&#8217;s a sample screenshot of the attack based on a C program, with me using the debugger to perform the 32-bit arbitrary write (vs. sending an IOCTL to a vulnerable driver).</p>
<p>It sits in a loop (after leaking and allocating the data that it needs) and attempts to execute the call gate every second, until the arbitrary write is performed.</p>
<p>Once successful, the Ring 0 payload merely reads SharedUserData-&gt;SystemTime (every second).</p>
<p><img loading="lazy" class="alignnone size-full wp-image-345" src="http://www.alex-ionescu.com/wp-content/uploads/ums-exploit.png" alt="" width="594" height="450" srcset="https://alex-ionescu.com/wp-content/uploads/ums-exploit.png 594w, https://alex-ionescu.com/wp-content/uploads/ums-exploit-300x227.png 300w" sizes="(max-width: 594px) 100vw, 594px" /></p>
<h2>Conclusion: Windows 10 Anniversary Update Mitigations</h2>
<p>In Windows 10 Anniversary Update (“Redstone 1”), a number of changes make these exploit techniques impossible to use:</p>
<ul>
<li>All of the LDT-related fields and code in the kernel is removed. There is now no way of having an LDT through any Windows-supported mechanism.</li>
<li>PatchGuard now checks the LDTR register. If it’s non-zero, it crashes the system.</li>
</ul>
<p>MSRC and the various security teams at Microsoft deserve kudos for thinking about &#8212; and plugging &#8212; the attack vector that LDTs provided, which is certainly not a coincidence 🙂</p>
<p>Further, the following generic mitigations make classes of such attacks much harder to exploit:</p>
<ul>
<li>Randomization of the PTE base make it harder to bypass SMEP by making Ring 3 memory appear as Ring 0.</li>
<li>Technologies such as KCFG make it even harder to exploit control over arbitrary CS:RIP.</li>
</ul>
<p>Finally, as described earlier, even on Windows 8.1, if the FSGSBASE feature is available in KeFeatureBits, the kernel will not allow the creation of an LDT, nor will it load the LDT during a context switch. You can easily verify this by calling (Ex/Rtl)IsProcessorFeaturePresent(PF_RDWRFSGSBASE_AVAILABLE).</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-340 -->

<article id="post-335" class="post-335 post type-post status-publish format-standard hentry category-articles-and-presentations category-coding-and-reversing">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=335" rel="bookmark"><time class="entry-date published" datetime="2017-05-11T13:29:40-05:00">May 11, 2017</time><time class="updated" datetime="2017-05-11T13:31:36-05:00">May 11, 2017</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=335" rel="bookmark">Windows Internals, 7th Edition!</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		<h2>What am I up to?</h2>
<p>Long-time readers of this blog are probably aware that updates have been rare in the past few years, although I do try to keep time for some interesting articles from time to time. Most of my public research lately has been done through the Infosec Conference Circuit, so if you were not already aware, you can download slides from all my talks at the following URL:</p>
<p><a title="Publications from Alex Ionescu" href="http://www.alex-ionescu.com/publications">http://www.alex-ionescu.com/publications</a></p>
<p>Additionally, I have a number of presentations I am looking forward to giving this year, including:</p>
<ul>
<li>Windows Container Internals (all about the technologies powering <a href="https://developer.microsoft.com/en-us/windows/bridges/desktop">Centennial</a>, <a href="https://blogs.windows.com/msedgedev/2016/09/27/application-guard-microsoft-edge/">Windows Defender Application Guard</a>, <a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/">Hyper-V Containers</a>, Docker, and more &#8212; including the security model and bousyndaries of one of these) &#8212; <a href="https://www.syscan360.org/en/speakers/#issue-17ai">SyScan 360 in Seattle</a> (May)</li>
<li>Surface Aggregator Module (SAM) Internals &#8212; a little chip on your Surface Pro/Laptop/Book that you probably didn&#8217;t know was there. If you liked my past talks on the Apple SMC, you&#8217;ll enjoy this as well &#8212; <a href="https://recon.cx/2017/montreal/">Recon in Montreal</a> (June)</li>
</ul>
<p>I also have a number of interesting design flaws I discovered this year in various Windows components &#8212;  as these get patched (they are not Tavis-worthy wormable RCEs, not to worry), I have been mulling over a &#8220;Windows Design Flaw Garage Sale&#8221; talk similar to the famous one that Stefan Esser (i0nic) gave a few years ago about Apple/iOS &#8212; covering some past bugs (fixed and unfixed) and more recent ones.</p>
<p>However, this post is not about such small research updates &#8212; but rather about a much bigger piece of work that has taken up my time these last 12 months &#8212; the release of Windows Internals, 7th Edition (Part 1)!</p>
<p><figure style="width: 410px" class="wp-caption alignnone"><img loading="lazy" src="https://images-na.ssl-images-amazon.com/images/I/51crFn8-IzL._SX408_BO1,204,203,200_.jpg" alt="Windows Internals, 7th Edition" width="410" height="500" /><figcaption class="wp-caption-text">Windows Internals, 7th Edition</figcaption></figure></p>
<h2>Some history&#8230;</h2>
<p>After the release of the 6th Edition of the book, which covered Windows 7, it&#8217;s fair to say that I was pretty burned out. The book incurred heavy delays due to my juggling of college, internships, and various relationships, while also requiring a massive amount of work due to the ambitious new sections, and coverage of the many, many changes that Windows 7 brought to the table (either fine-tuning many small things from Vista, or completely new kernel modules). Additionally, my co-authors also had new plans: David Solomon went on to retire and sunset his training business (David Solomon Expert Seminars), and Mark Russinovich was fully committed to his new role at Microsoft which eventually took him to Azure, where he is now the Chief Technology Officer (CTO), and kicking some major cloud/fabric butt with his extensive OS experience and security background. All of this to say &#8212; there was not much of an appetite to immediately begin writing a new book, with Windows 8 looming on the horizon (at that point still called Windows Blue).</p>
<p>Something else happened at that time: under leadership from Satya Nadella, Microsoft began delivering on its &#8220;Windows as a Service (WaaS)&#8221; model, furiously releasing a Windows 8.1 Update within a year of Windows 8 having shipped. Given that a single OS update had taken us <em>years </em>to cover, this release cycle was simply too rapid to successfully think about releasing a book in a timely fashion. I stopped thinking that a new edition of the book would <em>ever </em>be released, and I certainly didn&#8217;t think I&#8217;d be able to do one.</p>
<p>All gaps create opportunities, and two other authors decided that they could take on the 7th Edition and ship a successful update. They re-arranged the book in three parts, instead of two, with the first one focusing on Windows 8 User-Mode Metro (now UWP) Application Development, the second one on the Kernel, and the third one on Driver Development. I was not contacted or involved in these changes, and honestly, was not too happy about them. There are excellent driver programming books, just as there are application development books (even on Metro/UWP). This felt, to me, like an attempt to significantly cut down on the kernel portions of the book, and monetize on the Metro/Driver programming books, which obviously have a  much wider audience.</p>
<p>Additionally, with Windows 8 having shipped, Part 1 was slated for that year, with Part 2 (Windows 8.1 would now be out) the year after, and finally, Part 3, a year after that (Windows 10 would now be in beta). By the time you&#8217;d get to the last part, the OS would&#8217;ve already moved two releases further &#8212; or, each part could cover that OS. Becoming a Windows 8 Metro App Development book, with Windows 8.1 Kernel Internals book, and Windows 10 Driver Development book. These were just my personal thoughts at the time &#8212; which I kept to myself, because every author needs a chance to be successful, and others may well have liked this model, and the book may have sold more copies than all previous combined &#8211; who was I to judge?</p>
<p>One year passed. Then another&#8230; then another. By now, given that my name was still on the cover &#8212; regardless of my lack of involvement &#8212; many people would come to me and ask me &#8220;What&#8217;s going on? Why are you taking so long? Do you need help?&#8221; on the friendly side&#8230; and of course, some not-so-friendly comments, from people that had pre-ordered on Day 1, paying anywhere between $30-90, and receiving nothing 3 years later, with an ever-delayed release date. I strongly considered putting out a statement that I had nothing to do with this book &#8212; but chose to simply ask Microsoft Press to remove my name from the cover and all marketing materials. I preferred losing my association with this Bible, rather than be responsible for its contents, and its delays.</p>
<h2>A new hope</h2>
<p>Around the time that I did that, however, I realized that yet &#8211;another&#8211; name had been added to the pool! It was that of Pavel Yosifovich, a Microsoft MVP <a href="http://blogs.microsoft.co.il/pavely/">whose blog</a> I had followed a few times, and whom I had heard about doing some Windows Internals training in the past, mostly in Israel. I thought highly of Pavel &#8212; and he was an <a href="https://www.amazon.com/Pavel-Yosifovich/e/B00A2OTORO">established author</a> of previous books. Additionally, he now had a Microsoft e-mail address &#8212; suggesting that once again, the series would have a real &#8220;internal&#8221; presence, who would communicate with the developer team, read source code comments, and more &#8212; while Mark and I had only, and solely, been reverse engineering, we had always had help from David&#8217;s connections and insight into the developer team, which the new books would&#8217;ve lacked.</p>
<blockquote class="twitter-tweet" data-lang="en">
<p dir="ltr" lang="en">started writing the <a href="https://twitter.com/hashtag/Windows?src=hash">#Windows</a>-Internals book 7th edition&#8230; almost done with chapter 1</p>
<p>— Pavel Yosifovich (@zodiacon) <a href="https://twitter.com/zodiacon/status/698246486337916928">February 12, 2016</a></p></blockquote>
<p><script src="//platform.twitter.com/widgets.js" async="" charset="utf-8"></script></p>
<p>So I reached out, and to my pleasure, found out that Pavel had now become the sole co-author, the previous two having completely abandoned the project with no materials to show for it. Pavel was doing a herculean task of updating the entire book to now only cover Windows 8 and 8.1, but of course Windows 10 as well, which had reached its Threshold 2 (1511) Update, with Redstone 1 (1607) currently shipping to the Windows Insider Program (WIP). While having source access helps, this is still a task that I knew a single person would struggle with &#8212; and I really wanted the book to succeed for all of those that had placed their faith in it. I had also, over the last few years, had made lots of Windows reverse engineering, as many of you know, covering large parts of new Windows 8 and later components. This meant significantly reduced research time for me &#8212; all while having an amazing co-author. It seemed obvious that I should jump into the deep abyss of Windows Internals once again.</p>
<p>Pavel was extremely gracious in accepting an uninvited guest to the party, allowing me to make many changes to chapters that he had already completed (I don&#8217;t know if I would&#8217;ve done the same!). This started adding delays to the book, and Redstone 1 was about to ship &#8212; we decided to update the book to cover Redstone 1 from now on, and to go back to any places we knew there were changes. As we kept writing, I came up with new ideas and changes to the book &#8212; moving some things around, adding new kernel components, expanding on experiments, and the scope continued to increase. It was clear that I was once again, going to cause delays, which deeply bothered me.</p>
<p>Yet, Pavel was always there to pick up the slack, go beyond the call of duty, and spend nights on researching components as well as the more mundane parts of a book (screenshots and graphics). I could not have asked for a more humble host inside the world of his book. As we were wrapping up, I realized that Redstone 2 (1703) was nearing its feature complete date (around January of this year). I made yet another potentially delaying decision to go back, once again, and to hurriedly find any places where I knew changes had been made, and to update as much of the book as I could. I saw an opportunity &#8212; to release a Windows Internals book within weeks of a Windows release, covering <em>that </em>Windows release. A feat which had not happened in many, many releases.</p>
<p>And so, here we are today, a little over a month since Windows 10 Creators Update &#8212; Redstone 2 &#8212; 1703 has shipped, with the update slowly rolling out over the month of April to hundreds of millions of users, with Build 2017 right around the corner, and with a Windows Internals book in the midst of it all, covering the very same operating system. While I apologize for the additional six months this has cost your pre-orders, I do believe it was the right call.</p>
<h2>What&#8217;s new in the book? What&#8217;s changed?</h2>
<p>One of the first things that Pavel had changed (other than returning the book to its usual two-part focus on the kernel and related system components) is to better organize key Windows concepts into the first part of the book, instead of having them spread out over both parts &#8212; this way, people could get what would likely be 80% of the material that is relevant to 90% of people as soon as the first part was released, instead of having to wait for both. This meant making the following changes:</p>
<ol>
<li>Moving Memory Management and I/O Manager to Part 1</li>
<li>Breaking out Processes, Jobs, and Thread Scheduling in two chapters &#8212; Processes &amp; Jobs, and Thread Scheduling</li>
<li>Moving System &amp; Management Mechanisms to Part 2</li>
<li>Removing Networking from Part 1</li>
</ol>
<p>Once I joined, it made sense, with this new flow, to make a few additional changes:</p>
<ol>
<li>Processes and Jobs, now being its own chapter, became Processes, Jobs and Silos, which is the internal name for Windows Server Containers as well as Centennial/Desktop Bridge containers.</li>
<li>It made little sense that we were covering the User-Mode Loader (a section I first added in the 5th Edition) as a System Mechanism, instead of an integral part of the Process section (which made constant references to Part 2). I moved this section to be part of the same chapter.</li>
</ol>
<p>Outside of these broad strokes, a full list of all the changes would obviously be too complex. I would estimate the sheer amount of new pages to be around 150 &#8212; with probably 50 other pages that have received heavy modification and/or updating. You can definitely expect coverage of the following new features:</p>
<ul>
<li>Auto Boost [Scheduling]</li>
<li>Directed Switch [Scheduling]</li>
<li>Memory Partitions [Memory]</li>
<li>Priority Donation/Inheritance [Scheduling]</li>
<li>Security/Process Mitigations [Security]</li>
<li>CPU Sets [Scheduling]</li>
<li>Windows Containers [Processes]</li>
<li>Store Manager [Memory]</li>
<li>API Sets [Processes]</li>
<li>AppContainer [Security]</li>
<li>Token Attributes &amp; Claims [Security]</li>
<li>Protected Process Light [Security / Processes]</li>
<li>Windows Subsystem for Linux [Architecture]</li>
<li>Memory Compression [Memory]</li>
<li>Virtual Trust Levels [Architecture]</li>
<li>Device Guard &amp; Credential Guard [Security]</li>
<li>Processor Enclaves [Memory]</li>
<li>Secure Kernel Mode / Isolated User Mode [Architecture]</li>
<li>Pico Processes [Processes]</li>
<li>Power Management Framework (PoFx) [I/O Manager]</li>
<li>Power Availability Requests [I/O Manager]</li>
<li>And a lot more</li>
</ul>
<h2>Thank You!</h2>
<p>Finally, I&#8217;d like to thank many people, inside and outside of Microsoft, that helped with some of the content, ideas, experiments, etc. Especially <a class="ProfileHeaderCard-nameLink u-textInheritColor js-nav" href="https://twitter.com/aall86"><span style="color: #414d7f;">Andrea Allievi</span></a>, who helped with some very hairy parts of the Memory Management section!</p>
<p>I know both Pavel and I hope you&#8217;ll enjoy this flow a bit better, and that you&#8217;ll have lots of reading to do in this new Edition. Feel free to hit me up at <a href="http://www.twitter.com/aionescu">@aionescu</a> as usual.</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-335 -->

<article id="post-323" class="post-323 post type-post status-publish format-standard hentry category-coding-and-reversing category-random-tidbits">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=323" rel="bookmark"><time class="entry-date published updated" datetime="2016-05-06T09:34:06-05:00">May 6, 2016</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=323" rel="bookmark">Owning the Image Object File Format, the Compiler Toolchain, and the Operating System: Solving Intractable Performance Problems Through Vertical Engineering</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		<h2>Closing Down Another Attack Vector</h2>
<p>As the Windows kernel continues to pursue in its quest for ever-stronger security features and exploit mitigations, the existence of fixed addresses in memory continues to undermine the advances in this area, as attackers can use data corruption vulnerabilities and combine these with stack and instruction pointer control in order to bypass SMEP, DEP, and countless other architectural defense-in-depth techniques. In some cases, entire mitigations (such as CFG) are undone due to their reliance on a single, well-known static address.</p>
<p>In the latest builds of Windows 10 Redstone 1, aka “Anniversary Update”, the kernel takes a much stronger toward Kernel Address Space Layout Randomization (KASLR), employing an arsenal of tools that can only be available to an operating system developer that also happens to own the world’s most commercially successful compiler, and the world’s most pervasive executable object image format.</p>
<h2><strong>The Page Table Entry Array</strong></h2>
<p>One of the most unique aspects of the Windows kernel is the reliance on a fixed kernel address to represent the virtual base address of an array of page table entries that describes the entire virtual address space, and the usage of a self-referencing entry which acts as a pivot describing the page directory for the space itself (and, on x64 systems, describing the page directory table itself, and the page map level 4 itself).</p>
<p>This elegant solutions allows instant O(1) translation of any virtual address to its corresponding PTE, and with the correct shifts and base addresses, a conversion into the corresponding PDE (and PPE/PXE on x64 systems). For example, the function <em>MmGetPhysicalAddress</em> only needs to work as follows:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre class="c" style="font-family:monospace;">PHYSICAL_ADDRESS
MmGetPhysicalAddress <span style="color: #009900;">&#40;</span>
    _In_ PVOID Address
    <span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
    MMPTE TempPte<span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #808080; font-style: italic;">/* Check if the PXE/PPE/PDE is valid */</span>
    <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span>
<span style="color: #339933;">#if (_MI_PAGING_LEVELS == 4)</span>
       <span style="color: #009900;">&#40;</span>MiAddressToPxe<span style="color: #009900;">&#40;</span>Address<span style="color: #009900;">&#41;</span><span style="color: #339933;">-&gt;</span>u.<span style="color: #202020;">Hard</span>.<span style="color: #202020;">Valid</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&amp;&amp;</span>
<span style="color: #339933;">#endif</span>
<span style="color: #339933;">#if (_MI_PAGING_LEVELS &gt;= 3)</span>
       <span style="color: #009900;">&#40;</span>MiAddressToPpe<span style="color: #009900;">&#40;</span>Address<span style="color: #009900;">&#41;</span><span style="color: #339933;">-&gt;</span>u.<span style="color: #202020;">Hard</span>.<span style="color: #202020;">Valid</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&amp;&amp;</span>
<span style="color: #339933;">#endif</span>
       <span style="color: #009900;">&#40;</span>MiAddressToPde<span style="color: #009900;">&#40;</span>Address<span style="color: #009900;">&#41;</span><span style="color: #339933;">-&gt;</span>u.<span style="color: #202020;">Hard</span>.<span style="color: #202020;">Valid</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span>
   <span style="color: #009900;">&#123;</span>
       <span style="color: #808080; font-style: italic;">/* Check if the PTE is valid */</span>
       TempPte <span style="color: #339933;">=</span> <span style="color: #339933;">*</span>MiAddressToPte<span style="color: #009900;">&#40;</span>Address<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
       ...
   <span style="color: #009900;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">PHYSICAL_ADDRESS
MmGetPhysicalAddress (
    _In_ PVOID Address
    )
{
    MMPTE TempPte;

    /* Check if the PXE/PPE/PDE is valid */
    if (
#if (_MI_PAGING_LEVELS == 4)
       (MiAddressToPxe(Address)-&gt;u.Hard.Valid) &amp;&amp;
#endif
#if (_MI_PAGING_LEVELS &gt;= 3)
       (MiAddressToPpe(Address)-&gt;u.Hard.Valid) &amp;&amp;
#endif
       (MiAddressToPde(Address)-&gt;u.Hard.Valid))
   {
       /* Check if the PTE is valid */
       TempPte = *MiAddressToPte(Address);
       ...
   }</p></div>

<p>Each iteration of the MMU table walk uses simple <em>MiAddressTo</em> macros such as the one below, which in turn rely on hard-code static addresses.</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="line_numbers"><pre>1
2
3
</pre></td><td class="code"><pre class="c" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/* Convert an address to a corresponding PTE */</span>
<span style="color: #339933;">#define MiAddressToPte(x) \
   ((PMMPTE)(((((ULONG)(x)) &gt;&gt; 12) &lt;&lt; 2) + PTE_BASE))</span></pre></td></tr></table><p class="theCode" style="display:none;">/* Convert an address to a corresponding PTE */
#define MiAddressToPte(x) \
   ((PMMPTE)(((((ULONG)(x)) &gt;&gt; 12) &lt;&lt; 2) + PTE_BASE))</p></div>

<p>As attackers have figured out, however, this “elegance” has notable security implications. For example, if a write-what-where is mitigated by the existence of a read-only page (which, in Linux, would often imply requiring the WP bit to be disabled in CR0), a Windows attacker can simply direct the write-what-where attack toward the pre-computed PTE address in order to disable the WriteProtect bit, and then follow that by the actual write-what-where on the data.</p>
<p>Similarly, if an exploit is countered by SMEP, which causes an access violation when a Ring 0 Code Segment’s Instruction Pointer (CS:RIP) points to a Ring 3 PTE, the exploit can simply use a write-what-where (if one exists), or ROP (if the stack can be controlled), in order to mark the target user-mode PTE containing malicious code, as a Ring 0 page.</p>
<p>Other PTE-based attacks are also possible, such as by using write-what-where vulnerabilities to redirect a PTE to a different physical address which is controlled by the attacker (undocumented APIs available to Administrators will leak the physical address space of the OS, and some physical addresses are also leaked in the registry or CPU registers).</p>
<p>Ultimately, the list goes on and on, and many excellent papers exist on the topic. It’s clear that Microsoft needed to address this limitation of the operating system (or clever optimization, as some would call it). Unfortunately, a number of obstacles exist:</p>
<ul>
<li>Using virtual-mapped tables based on the EPROCESS structure (as Linux and OS X do) causes significant performance impact, as pointer chasing the different tables now causes cache misses and page translations. This becomes even worse when thinking about multi-processor systems, and the cache waste that this causes (where the TLB may end up getting filled with the various global (locked) pages corresponding to the page tables of various processes, instead of only the current process).</li>
<li>Changing the address of the PTE array has a number of compatibility concerns, as PTE_BASE is actually documented in ntddk.h, part of the Windows Driver Kit. Additionally, once the new address is discovered, attackers can simply adjust their exploits to use the appropriate static address based on the version of the operating system.</li>
<li>Randomizing the address of the PTE array means that Windows memory manager functions can no longer use a static constant or preprocessor definition for the address, but must instead access a global address which contains it. Forcing every processor to dereference a single global address every single time a virtual memory operation (allocation, protection, page walk, fault, etc…) is performed is a significantly negative performance hit, especially on multi-socket, NUMA systems.</li>
<li>Dealing with the global variable problem above by creating cache-aligned copies of the address in a per-processor structure causes a waste of precious kernel storage space (for example, assuming a 64-byte cache line and 640 processors, 40KB of physical memory are used to replicate the variable most efficiently). However, on NUMA systems, one would also want the page containing this data to be local to the node, so we might imagine an overhead of 4KB per socket. In practice, this wouldn’t be quite as bad, as Windows already has a per-NUMA-node-allocated, per-processor, cache-aligned list of critical kernel variables: the Kernel Processor Region Control Block (KPRCB).</li>
</ul>
<p>In a normal world, the final bullet would probably be the most efficient solution: sacrificing what is today a modest amount of physical memory (or re-using such a structure) for dealing with effects of global access. Yet, locating this per-processor data would still not be cheap: most operating systems access such a structure by relying on a segment register such as FS or GS on x86 and x64 systems, or use special CPU registers such as those located on CP15 inside of ARM processors. At the very least, this causes more pointer dereferences and potentially complex microcode accesses. But if we own the compiler and the output format, can’t we think outside the box?</p>
<h2><strong>Dynamic Relocation Generation</strong></h2>
<p>When the Portable Executable (PE) file format was created, its designers realized an important issue: if compiled code made absolute references to data or functions, these hardcoded pointer values might become invalid if the operating system loaded the executable binary at a different base address than its preferred address. Originally a corner case, the advent of user-mode ASLR made this a common occurrence and new reality.</p>
<p>In order to deal with such rebasing operations, the PE format includes the definition of a special data directory entry called the Relocation Table Directory (IMAGE_DIRECTORY_ENTRY_BASERELOC). In turn, this directory includes a number of tables, each of which is an array of entries. Each entry ultimately describes the offset of a piece of code that is accessing an absolute virtual address, and the required adjustment that is needed to fixup the address. On a modern x64 binary, the only possible fixup is an absolute delta (increment or decrement), but more exotic architectures such as MIPS and ARM had different adjustments based on how absolute addresses were encoded on such processors).</p>
<p>These relocations work great to adjust hardcoded virtual addresses that correspond to code or data within the image itself – but if there is a hard-coded access to 0xC0000000, an address which the compiler has no understanding of, and which is not part of the image, it can’t possibly emit relocations for it – this is a meaningless data dereference. But what if it could?</p>
<p>In such an implementation, all accesses to a particular magic hardcoded address could be described as such to the compiler, which could then work with the linker to generate a similar relocation table – but instead of describing addresses within the image, it would describe addresses outside of the image, which, if known and understood by the PE parser, could be adjusted to the new location of the hard-coded external data address. By doing so, compiled code would continue to access what appears to be a single literal value, and no global variable would ever be needed, cancelling out any disadvantages associated with the randomization of this address.</p>
<p>Indeed, the new build of the Microsoft C Compiler, which is expected to ship with Visual Studio 15 (now in preview), address a special annotation that can be associated with constant values that correspond to external virtual addresses. Upon usage of such a constant, the compiler will ensure that accesses are done in a way that does not “break up” the address, but rather causes its absolute value to be expressed in code (i.e.: “mov rax, 0xC0000000”). Then, the linker collects the RVAs of such locations and builds structures of type IMAGE_DYNAMIC_RELOCATION_ENTRY, as shown below:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
</pre></td><td class="code"><pre class="c" style="font-family:monospace;"><span style="color: #993333;">typedef</span> <span style="color: #993333;">struct</span> _IMAGE_DYNAMIC_RELOCATION_TABLE <span style="color: #009900;">&#123;</span>
   DWORD Version<span style="color: #339933;">;</span>
   DWORD Size<span style="color: #339933;">;</span>
<span style="color: #666666; font-style: italic;">// IMAGE_DYNAMIC_RELOCATION DynamicRelocations[0];</span>
<span style="color: #009900;">&#125;</span> IMAGE_DYNAMIC_RELOCATION_TABLE<span style="color: #339933;">,</span> <span style="color: #339933;">*</span>PIMAGE_DYNAMIC_RELOCATION_TABLE<span style="color: #339933;">;</span></pre></td></tr></table><p class="theCode" style="display:none;">typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
   DWORD Version;
   DWORD Size;
// IMAGE_DYNAMIC_RELOCATION DynamicRelocations[0];
} IMAGE_DYNAMIC_RELOCATION_TABLE, *PIMAGE_DYNAMIC_RELOCATION_TABLE;</p></div>

<p>When all entries have been written in the image, an IMAGE_DYNAMIC_RELOCATION_TABLE structure is written, with the type below:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
</pre></td><td class="code"><pre class="c" style="font-family:monospace;"><span style="color: #993333;">typedef</span> <span style="color: #993333;">struct</span> _IMAGE_DYNAMIC_RELOCATION <span style="color: #009900;">&#123;</span>
   PVOID Symbol<span style="color: #339933;">;</span>
   DWORD BaseRelocSize<span style="color: #339933;">;</span>
<span style="color: #666666; font-style: italic;">// IMAGE_BASE_RELOCATION BaseRelocations[0];</span>
<span style="color: #009900;">&#125;</span> IMAGE_DYNAMIC_RELOCATION<span style="color: #339933;">,</span> <span style="color: #339933;">*</span>PIMAGE_DYNAMIC_RELOCATION<span style="color: #339933;">;</span></pre></td></tr></table><p class="theCode" style="display:none;">typedef struct _IMAGE_DYNAMIC_RELOCATION {
   PVOID Symbol;
   DWORD BaseRelocSize;
// IMAGE_BASE_RELOCATION BaseRelocations[0];
} IMAGE_DYNAMIC_RELOCATION, *PIMAGE_DYNAMIC_RELOCATION;</p></div>

<p>The RVA of this table is then written into the IMAGE_LOAD_CONFIG_DIRECTORY, which has been extended with the new field <em>DynamicValueRelocTable </em>and whose size has now been increased:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="line_numbers"><pre>1
2
</pre></td><td class="code"><pre class="c" style="font-family:monospace;">   ULONGLONG DynamicValueRelocTable<span style="color: #339933;">;</span>         <span style="color: #666666; font-style: italic;">// VA</span>
<span style="color: #009900;">&#125;</span> IMAGE_LOAD_CONFIG_DIRECTORY64<span style="color: #339933;">,</span> <span style="color: #339933;">*</span>PIMAGE_LOAD_CONFIG_DIRECTORY64<span style="color: #339933;">;</span></pre></td></tr></table><p class="theCode" style="display:none;">   ULONGLONG DynamicValueRelocTable;         // VA
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;</p></div>

<p>Now that we know how the compiler and linker work together to generate the data, the next question is who processes it?</p>
<h2><strong>Runtime Dynamic Relocation Processing</strong></h2>
<p>In the Windows boot architecture, as the kernel is a standard PE file loaded by the boot loader, it is therefore the boot loader’s responsibility to process the import table of the kernel, and load other required dependencies, to generate the security cookie, and to process the static (standard) relocation table. However, the boot loader does not have all the information required by the memory manager in order to randomize the address space as Windows 10 Redstone 1 now does – this remains the purview of the memory manager. Therefore, as far as the boot loader is concerned, the static PTE_BASE address is still the one to use, and indeed, early phases of boot still use this address (and associate PDE/PPE/PXE base addresses and self-referencing entry).</p>
<p>This clearly implies that it is not considered part of a PE loader’s job to process the dynamic relocation table, but rather the job of the component that creates the dynamic address space map, which has now been enlightened with this knowledge. In the most recent builds, this is done by <em>MiRebaseDynamicRelocationRegions, </em>which eventually calls <em>MiPerformDynamicFixups</em>. This routine locates the PE file’s Load Configuration Directory, gets the RVA (now a VA, thanks to relocations done by the boot loader) of the Dynamic Relocation Table, and begins parsing it. At this moment, it only supports version 1 of the table. Then, it loops through each entry, adjusting the absolute address with the required delta to point to the new PTE_BASE address.</p>
<p>It is important to note that the memory manager only calls <em>MiPerformDynamicFixups </em>on the binaries that it knows require such fixups due to the use of PTE_BASE: the kernel (ntoskrnl.exe) and the HAL (hal.dll). As such, this is not (yet) intended as a generic mechanism for all PE files to allow dynamic relocations of hard-coded addresses toward ASLRed regions of memory – but rather a highly vertically integrated feature specifically designed for dealing with the randomization of the PTE array, and the components that have hardcoded dependencies on it.</p>
<p>As such, even if one were to discover the undocumented annotation which allows the new version of the compiler to generate such tables, no component would currently parse such a table.</p>
<h2><strong>Sneaky Side Effects</strong></h2>
<p>A few interesting details are of note in the implementation. The first is that the initial version of the implementation, which shipped in build 14316, contained a static address in the loader block, which corresponded to the PTE base address that the loader had selected, and was then overwritten by a new fixed PTE base address (0xFFFFFA00`00000000 on x64).</p>
<p>The WDK, which contains the PTE_BASE address for developers to see (but apparently not use!) also contained this new address, and the debugger was updated to support it. This was presumably done to gauge the impact of changing the address in any way – and indeed we can see release notes referring to certain AV products breaking around the time this build was released. I personally noticed this change by disassembling <em>MmGetPhysicalAddress</em> to see if the PTE base had been changed (a normal part of my build analysis).</p>
<p>The next build, 14332, seemingly contained no changes: reverse engineering of the function showed usage of the same address once again. However, as I was playing around with the <em>!pte </em>extension in the debugger, I noticed that a new address was now being used – and that on a separate machine, this address was different again. Staring in IDA/Hex-Rays, I could not understand how this was possible, as <em>MmGetPhysicalAddress </em>was clearly using the same new base as 14316!</p>
<p>It is only once I unassembled the function in WinDBG that I noticed something strange – the base address had been modified to a different value. This led me to the hunt for the dynamic relocation table mechanism. But this is an important point about this implementation – it offers a small amount of “security through obscurity” as a side-effect: attackers or developers attempting to ‘dynamically discover’ the value of the PTE base by analyzing the kernel file on disk will hit a roadblock – they must look at the kernel file in memory, once relocations have been made. Spooky!</p>
<h2><strong>Conclusion</strong></h2>
<p>It is often said that all software engineering decisions and features lie somewhere between the four quadrants of security, performance, compatibility and functionality. As such, as an example, the only way to increase security without affecting functionality is to impact compatibility and performance. Although randomizing the PTE_BASE does indeed cause potential compatibility issues, we’ve seen here how control of the compiler (and the underlying linked object file) can allow implementers to “cheat” and violate the security quadrant, in a similar way that silicon vendors can often work with operating system vendors in order to create overhead-free security solutions (one major advantage that Apple has, for example).</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-323 -->

<article id="post-300" class="post-300 post type-post status-publish format-standard hentry category-articles-and-presentations category-coding-and-reversing">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=300" rel="bookmark"><time class="entry-date published" datetime="2015-12-30T12:34:18-05:00">December 30, 2015</time><time class="updated" datetime="2015-12-30T12:41:16-05:00">December 30, 2015</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=300" rel="bookmark">Closing &#8220;Heaven&#8217;s Gate&#8221;</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		<h2>Brief Overview of WoW64</h2>
<p>&#8220;Heaven&#8217;s Gate&#8221; refers to a technique first popularized by the infamous &#8220;Roy G. Biv&#8221; of <a href="http://www.29a.net/">29a</a> <a href="http://malware.wikia.com/wiki/29A">fame</a>, and later <a href="http://vxheaven.org/lib/vrg16.html">re-published</a> in Valhalla #1. <a href="http://www.malwaretech.com/2014/02/the-0x33-segment-selector-heavens-gate.html">Cited</a> and <a href="http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/">improved</a> in various <a href="http://www.malwaretech.com/2015/07/windows-10-system-call-stub-changes.html">new</a> forms, and even seen in the wild used by the <a href="http://int0xcc.svbtle.com/notes-on-vawtrak-banking-malware">Vawtrak</a> banking malware, it centers around the fact that on a 64-bit Windows OS, seeing as how all kernel-mode components always execute in 64-bit mode, the address space, core OS structures (EPROCESS, PEB, etc&#8230;), and code segments for processes are all initially setup for 64-bit &#8220;long mode&#8221; execution, regardless of the process actually being hosted by a 32-bit executable binary.</p>
<p>In fact, on 64-bit Windows, the first piece of code to execute in *any* process, is always the 64-bit NTDLL, which takes care of initializing the process in user-mode (as a 64-bit process!). It&#8217;s only later that the Windows-on-Windows (WoW64) interface takes over, loads a 32-bit NTDLL, and execution begins in 32-bit mode through a far jump to a compatibility code segment. The 64-bit world is never entered again, except whenever the 32-bit code attempts to issue a system call. The 32-bit NTDLL that was loaded, instead of containing the expected SYSENTER instruction, actually contains a series of instructions to jump back into 64-bit mode, so that the system call can be issued with the SYSCALL instruction, and so that parameters can be sent using the x64 ABI, sign-extending as needed.</p>
<p>This process is accurately described in <a href="http://download.microsoft.com/download/3/a/9/3a9ad58f-5634-4cdd-8528-c78754d712e8/28-dw04040_winhec2004.ppt">many</a> <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa384274(v=vs.85).aspx">sources</a>, including in the <a href="https://www.safaribooksonline.com/library/view/windows-internals-fifth/9780735625303/ch03s08.html">Windows Internals books</a>, so if you&#8217;re interested in reading more, you can do so, but I&#8217;ll spare additional details here.</p>
<h2>Enter Heaven&#8217;s Gate</h2>
<p>Heaven&#8217;s Gate, then, refers to subverting the fact that a 64-bit NTDLL exists (and a 64-bit heap, PEB and TEB), and manually jumping into the long-mode code segment without having to issue a system call and being subjected to the code flow that WoW64 will attempt to enforce. In other words, it gives one the ability to create &#8220;naked&#8221; 64-bit code, which will be able to run covertly, including issuing system calls, without the majority of products able to intercept and/or introspect its execution:</p>
<ul>
<li>Microsoft&#8217;s EMET, as well as a myriad of similar tools and sandboxes, only hook/protect the 32-bit NTDLL for WoW64 processes, under the assumption that the 64-bit NTDLL can&#8217;t be reached in any other way. The mitigations can therefore be <a href="https://www.duosecurity.com/static/pdf/wow-64-and-so-can-you.pdf">bypassed using Heaven&#8217;s Gate</a>. The same technique has been <a href="https://camal.coseinc.com/publish/Phenom%20-%20Bypassing%20Antivirus.pdf">used by the Phenom malware</a> to bypass AV solutions.</li>
<li>When debugging a 32-bit application with a 64-bit debugger (such as WinDBG), you will initially see the 64-bit state (heap, stack, NTDLL, TEB, etc&#8230;). Since this state is uninteresting, as it only contains the WoW64 system call layer, manual commands and extensions must be used to investigate the 32-bit state instead &#8212; and so in order to avoid this, even Microsoft often recommends using the 32-bit WinDBG instead, which will provide a much more seamless debugging experience and show the 32-bit state of the process. Other 3rd party debuggers, which are 32-bit only, will also behave the same way. The problem, therefore, is that by using Heaven&#8217;s Gate, there IS now interesting 64-bit state, <a href="http://scrammed.blogspot.com/2014/10/code-obfunscation-mixing-32-and-64-bit.html">that these debuggers will miss.</a></li>
<li>Many emulation/detonation engines will, upon seeing a 32-bit executable, emulate it using x86 instructions. They will either ignore or be unable to handle x64 instructions, as they never expect them to run. In fact, this was recently shown by a <a href="http://www.hexacorn.com/blog/2015/10/26/heavens-gate-and-a-chameleon-code-x8664/">blog post over at Hexacorn</a>. Heaven&#8217;s Gate allows such x64 instructions to run, rendering the x86 code into &#8220;dummy&#8221; code for misdirection purposes.</li>
</ul>
<h2>Memory Restrictions</h2>
<p>These and other &#8220;benefits&#8221; make Heaven&#8217;s Gate a tool of choice for malicious code.  However, there always existed an interesting limitation in 32-bit applications running under WoW64: even when executing in 64-bit long-mode, addresses above the 4 GB could never be allocated (in fact, addresses above 2 GB could normally never be used for compatibility purposes, unless the image was linked with <a href="https://msdn.microsoft.com/en-us/library/wz223b1z.aspx">/LARGEADDRESSAWARE</a> &#8212; the switch was originally designed to support <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff556232(v=vs.85).aspx">/3GB</a> x86 server environments, but outgrew its original intent to allow full 4 GB addresses under WoW64, a fact leveraged by many 32-bit games and <a href="https://code.google.com/p/chromium/issues/detail?id=239803">browsers</a> even today).</p>
<p>Using a kernel debugger and the <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff565574(v=vs.85).aspx">!vad </a>command, it&#8217;s simple to see why, such as on this Windows 7 system, where I&#8217;ve typed the command before the process has any chance of executing even a single instruction &#8212; not even NTDLL has loaded here, folks. This is an interesting view of what are the &#8220;earliest&#8221; memory structures you can find in a WoW64 process (at least on Windows 7).</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/vad1.png"><img loading="lazy" class="alignnone wp-image-308" src="http://www.alex-ionescu.com/wp-content/uploads/vad1.png" alt="vad" width="600" height="245" srcset="https://alex-ionescu.com/wp-content/uploads/vad1.png 731w, https://alex-ionescu.com/wp-content/uploads/vad1-300x122.png 300w" sizes="(max-width: 600px) 100vw, 600px" /></a></p>
<p>Note that a giant VAD at the end, highlighted in teal, occupies the entire 64-bit portion of the address space. Let&#8217;s see what !vad has to say about it:</p>
<p><img loading="lazy" class="alignnone wp-image-306" src="http://www.alex-ionescu.com/wp-content/uploads/vadblock.png" alt="vadblock" width="600" height="122" srcset="https://alex-ionescu.com/wp-content/uploads/vadblock.png 686w, https://alex-ionescu.com/wp-content/uploads/vadblock-300x61.png 300w" sizes="(max-width: 600px) 100vw, 600px" /></p>
<p>Seeing as how it&#8217;s configured as a &#8220;NoChange&#8221; and &#8220;OneSecured&#8221; VAD, it cannot be freed or modified in any way. This is further confirmed by the commit charge of -1.</p>
<p>On Windows 8 and later, however, the output changes, as you can see below. Note that I&#8217;ve re-used the same colors as in the Windows 7 output for clarity (and the uncolored VADs correspond to the CFG entries).</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/vad81.png"><img loading="lazy" class="alignnone wp-image-309" src="http://www.alex-ionescu.com/wp-content/uploads/vad81.png" alt="vad81" width="600" height="284" srcset="https://alex-ionescu.com/wp-content/uploads/vad81.png 732w, https://alex-ionescu.com/wp-content/uploads/vad81-300x142.png 300w" sizes="(max-width: 600px) 100vw, 600px" /></a></p>
<p>The 64-bit NTDLL is actually loaded in 64-bit address space now! And we have not one, but two teal-colored VADs, which surround it, re-creating the &#8220;no man&#8217;s land&#8221; just as on Windows 7 and earlier. This change was briefly mentioned, I believe, by Matt Miller (of skape fame) at one of Microsoft&#8217;s BlackHat presentations: it made it a bit harder to guess the location of the 64-bit NTDLL by simply adding a fixed size to the 32-bit NTDLL. In my screenshot, since this is a CFG-enabled process, the VADs don&#8217;t exactly envelop NTDLL &#8212; rather they surround the native CFG bitmap + NTDLL, but the point remains.</p>
<p>This change in NTDLL load behavior also had the likely intended side effect of making hooks in 64-bit NTDLL extremely hard, or outright impossible. You see, without consuming an enormous amount of space, it&#8217;s simply not possible to overwrite an x64 instruction with a call or jmp to an absolute 64-bit address efficiently. Instead, hooking engines will allocate a &#8220;trampoline&#8221; that is within the 32-bit address range of the hooked function, and use a much smaller 5 byte 32-bit relative jump, which happens to fit nicely in the &#8220;hotpatch aware&#8221; region that Microsoft binaries have (or anyone linking with /hotpadmin). The trampoline then uses the full 64-bit absolute jump instruction.</p>
<p>As you&#8217;ve figured out by now, if the trampoline needs to be within 2GB, but there are two large VADs blocking off all 64-bit addresses around NTDLL, this hooking technique is dead in the water. Other, more complex and error-prone techniques must (and can) be used instead.</p>
<p>Nevertheless, nothing stops Heaven&#8217;s Gate on Windows 8. There some minor WoW64 changes which one must adapt to, and accessing or hooking 64-bit NTDLL becomes harder.</p>
<h2>Control Flow Guard and WoW64</h2>
<p>In Windows 10, a new exploit mitigation is introduced called Control Flow Guard, or CFG. It too, has been rather <a href="http://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf">well described</a> in <a href="https://www.blackhat.com/docs/us-15/materials/us-15-Zhang-Bypass-Control-Flow-Guard-Comprehensively-wp.pdf">multiple</a> <a href="www.powerofcommunity.net/poc2014/mj0011.pdf">sources</a>, so I won&#8217;t go into details inside of this post. The important piece to remember about CFG is that all relative function calls are now subject to an additional compiler-generated check, which is implemented by NTDLL: only valid function prologues (within 8 bytes of alignment) can be the target of such a call. Valid function prologues, in turn, are marked by a bit being set in a very large bitmap (bit array) structure, which describes the entire user-mode address space (all 128TB of it!). I previously <a title="How Control Flow Guard Drastically Caused Windows 8.1 Address Space and Behavior Changes" href="http://www.alex-ionescu.com/?p=246">posted on some interesting changes</a> this required in the memory manager, as this bit array obviously becomes quite large (2 TB, in fact).</p>
<p>What&#8217;s not been documented too clearly in most research is that on 64-bit systems, there are in fact not one, but two CFG bitmaps: one for 32-bit code, and one for 64-bit code. The addresses of both of these bitmaps is stored in the per-process working set structure (called MMWSL). This structure is pointed to by the MMSUPPORT structure inside of EPROCESS (i..e.: PsGetCurrentProcess()-&gt;Vm.VmWorkingSetList), but a unique thing about it, is that it&#8217;s stored in a region of memory called &#8220;hyperspace&#8221;, which is at a fixed address&#8230; much like the per-process page table entry array. On recent 64-bit systems, this hard-coded address is 0xFFFFF58010804000, a fact I pointed out in a previous blog <a title="How Control Flow Guard Drastically Caused Windows 8.1 Address Space and Behavior Changes" href="http://www.alex-ionescu.com/?p=246">post addressing the 64-bit address space of Windows 8.1 and later</a>.</p>
<p>As one can see in the symbols that WinDBG can dump, the MMWSL structure contains a field:</p>
<pre lang="c!" escaped="true">+0x1f8 UserVaInfo       : _MI_USER_VA_INFO</pre>
<p>And inside of MI_USER_VA_INFO, we can find an array:</p>
<pre lang="c!" escaped="true">+0x0c8 CfgBitMap : [2] _MI_CFG_BITMAP_INFO</pre>
<p>Whose two entries correspond to the following enumeration:</p>
<pre lang="c!" escaped="true">0:000&gt; dt _MI_CFG_BITMAP_TYPE
 CfgBitMapNative = 0n0
 CfgBitMapWow64 = 0n1
 CfgBitMapMax = 0n2</pre>
<p>Clearly, thus, a 64-bit Windows 10 kernel contains not one, but two CFG bitmaps. And indeed, the 32-bit NTDLL will utilize the address of the WoW64 bitmap, while the 64-bit NTDLL will utilize the Native bitmap. But why use two separate bitmaps? What separates a WoW64 bitmap from a native bitmap? One would imagine that 64-bit code is marked as executable in the native bitmap, and 32-bit code is marked as executable in the WoW64 bitmap&#8230; but that&#8217;s not quite the full story.</p>
<p>At verification time, indeed, it is the version of NTDLL that is being used, which determines which bitmap will be looked at. But how does the OS populate the bits?</p>
<p>In CFG-aware versions of Windows, the CFG bitmap is touched through two paths: <em>MiCommitVadCfgBits, </em>and <em>MiCfgMarkValidEntries</em>. These, in turn, correspond to either intrinsic CFG modifications (side-effects of allocating, protecting and/or mapping executable memory), or explicit CFG modifications (effect of calling <em>SetValidCallTargets</em>). Both of these paths will eventually call MiSelectCfgBitMap, whose pseudo-code is shown below.</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/cfg1.png"><img loading="lazy" class="alignnone wp-image-305" src="http://www.alex-ionescu.com/wp-content/uploads/cfg1.png" alt="cfg" width="600" height="544" srcset="https://alex-ionescu.com/wp-content/uploads/cfg1.png 640w, https://alex-ionescu.com/wp-content/uploads/cfg1-300x272.png 300w" sizes="(max-width: 600px) 100vw, 600px" /></a></p>
<p>As is quite clear from the code, any private memory allocations below the 64-bit boundary will be marked only in the 32-bit bitmap, while the opposite applies to the 64-bit bitmap. In fact, this is the result of an optimization: instead of having two 2TB bit arrays for each processor execution mode, a single 2TB array is used for 64-bit native code, while a single 32MB array is used for 32-bit native code, greatly reducing address space consumption.</p>
<h2>Closing the Gate</h2>
<p>Basing the decision of which CFG bitmap to populate on the virtual address of the executable allocation creates an obvious dichotomy: 64-bit code, if running in a 32-bit address range, will instantly trip up CFG, because the NTDLL library that is active in that environment is the 64-bit version, which will check the 64-bit bitmap, which will not have any bits set in the 0-4 GB range. Similarly, any 32-bit code must be running below the 4 GB boundary, else the 32-bit NTDLL&#8217;s CFG validation routine will trip up, as the 32-bit bitmap isn&#8217;t even large enough to account for addresses above 4 GB.</p>
<p>A naive solution is therefore proposed: simply allocate 64-bit code above the 4GB range, and the problem goes away. There is, of course, a problem with this approach: the NoChange VADs which block the entire &gt; 4 GB region of memory and mark it unusable, leaving only 64-bit NTDLL as the only valid allocation in that address range.</p>
<p>In Windows 10, these two factors combined result in the inability to execute any useful 64-bit code in a 32-application/WoW64 process, because the two restrictions combine, creating an impossible condition. You may be tempted to dismiss the reality by stating that all the 64-bit malicious code has to do is not to have been compiled with CFG. In this case, the compiler should not be emitting calls to the validation routine. However, this misses a critical point: it&#8217;s not the process&#8217; own executable code/shellcode which are necessarily performing the 64-bit CFG checks &#8212; it&#8217;s the 64-bit NTDLL itself, or any other additional 64-bit DLLs you may have injected through the initial 64-bit shellcode, into your own process.</p>
<p>Even worse, even if no other 64-bit DLLs are imported, some core system functionality, implemented by NTDLL, also validates the CFG bitmap: Exceptions, User-Mode Callbacks, and APCs. Any usage of these system mechanisms, because they always initially execute in 64-bit mode, will cause a CFG violation if the target is not in the bitmap &#8212; which it cannot possibly be. The same goes for higher level functionality like using the Thread Pool, or any other callback-based mechanism owned by NTDLL in 64-bit mode. For example, because kernel-mode injects user-mode APCs through the 64-bit NTDLL, the user-mode APC routine cannot possibly be a custom, non-DLL function: it would&#8217;ve been impossible to allocate it &gt; 4 GB, and the APC dispatcher will validate the CFG bits for any address &lt; 4 GB, and be unable to find it.</p>
<p>Perhaps the best example of these unexpected side-effects is to analyze what Heaven&#8217;s Gate-using malware often does to gain some usefulness in the hidden 64-bit context: it will lookup LdrLoadDll inside of NTDLL.DLL and attempt to load additional 64-bit DLLs, such as kernel32.dll. With some coercing (as some of the articles I linked to at the beginning showed), this can be made to work. The problem, in a CFG-aware NTDLL.DLL, is that LdrpCallInitRoutines will perform a CFG bitmap check before calling the DllMain of this DLL. As the DLL will be loaded in 32-bit address space, the WoW64 CFG bitmap will be marked, and not the Native CFG bitmap &#8212; causing the 64-bit NTDLL to believe that DllMain is not a valid relative call target, and crash the process.</p>
<p>Suffice it to say, although it still is possible to have a very simple 64-bit piece of code, even possibly performing some system calls, execute in the hidden 64-bit world of a WoW64 process/32-bit application, any attempts to load additional DLLs, use APCs, handle exceptions or user-mode callbacks in 64-bit mode will result in the process crashing, as a CFG violation will be tripped. For most intents and purposes, therefore, CFG has a potentially unintended side-effect: it closes down Heaven&#8217;s Gate.</p>
<p>Reopening the gate is left as an exercise to the reader 😉</p>
<h2>Final Note</h2>
<p>Astute readers may have noticed the following discrepancies, especially if following along on their own systems:</p>
<ul>
<li>Windows 8.1 Update 3 does have support for CFG</li>
<li>We saw three, not two VADs, on my Windows 8.1 Update 3 screenshot</li>
<li>This post mentions how Windows 10 closes Heaven&#8217;s Gate, but not Windows 8.1 Update 3</li>
</ul>
<p>The key is in  dumping the MI_USER_VA_INFO structure on such a system:</p>
<pre lang="c!" escaped="true">+0x060 CfgBitMap : [3] _MI_CFG_BITMAP_INFO</pre>
<p>Three entries? Let&#8217;s take a look:</p>
<pre lang="c!" escaped="true">0:000&gt; dt _MI_CFG_BITMAP_TYPE
 CfgBitMapNative = 0n0
 CfgBitMapWow64 = 0n1
 CfgBitMapWow64NativeLow = 0n2
 CfgBitMapMax = 0n3</pre>
<p>This explains the three, not two VADs in my dump: in the original CFG implementation on Windows 8.1, 64-bit code could live in the 32-bit address range, as the Native bitmap had a &#8220;Wow64Low&#8221; portion. In Windows 10, this is now gone (saving 32MB of address space) &#8212; Native code is <em>only </em>aware of the 64-bit address ranges.</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-300 -->

<article id="post-290" class="post-290 post type-post status-publish format-standard hentry category-uncategorized">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=290" rel="bookmark"><time class="entry-date published" datetime="2015-06-22T18:28:27-05:00">June 22, 2015</time><time class="updated" datetime="2015-06-22T18:43:19-05:00">June 22, 2015</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=290" rel="bookmark">What are Little PatchGuards Made Of?</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		<p>A number of excellent PatchGuard articles have been written around what PatchGuard is, how to bypass it, what triggers it uses, its obfuscation techniques, and more.</p>
<p>But for some reason, nobody has published a full list of everything that PatchGuard actually verifies. Microsoft used to have a website that listed the initial first 7 checks, but nothing beyond that.</p>
<p>I asked around at conferences, and the answer I got was that the code was too complex to analyze, and nobody really wanted to take the time to figure out every single check. I had my own private list of checks I knew PatchGuard does (through runtime analysis), but I was surprised to see the real reason nobody&#8217;s bothered to analyze this&#8230;</p>
<p>&#8230; Microsoft&#8217;s own public debugger (known as WinDBG) tells you &#8212; why bother reversing? 🙂</p>
<p>Lo&#8217; and behold, the 39 different checks in PatchGuard Windows 8.1 Update. There&#8217;s a few more in Windows 10, I guess they&#8217;re not yet documented.</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="c" style="font-family:monospace;">CRITICAL_STRUCTURE_CORRUPTION <span style="color: #009900;">&#40;</span><span style="color: #0000dd;">109</span><span style="color: #009900;">&#41;</span>
Arguments<span style="color: #339933;">:</span>
Arg1<span style="color: #339933;">:</span> <span style="color: #208080;">00000000</span><span style="color: #339933;">,</span> Reserved
Arg2<span style="color: #339933;">:</span> <span style="color: #208080;">00000000</span><span style="color: #339933;">,</span> Reserved
Arg3<span style="color: #339933;">:</span> <span style="color: #208080;">00000000</span><span style="color: #339933;">,</span> Failure type dependent information
Arg4<span style="color: #339933;">:</span> <span style="color: #208080;">00000000</span><span style="color: #339933;">,</span> Type of corrupted region<span style="color: #339933;">,</span> can be
<span style="color: #0000dd;">0</span> <span style="color: #339933;">:</span> A generic data region
<span style="color: #0000dd;">1</span> <span style="color: #339933;">:</span> Modification of a <span style="color: #000000; font-weight: bold;">function</span> or .<span style="color: #202020;">pdata</span>
<span style="color: #0000dd;">2</span> <span style="color: #339933;">:</span> A processor IDT
<span style="color: #0000dd;">3</span> <span style="color: #339933;">:</span> A processor GDT
<span style="color: #0000dd;">4</span> <span style="color: #339933;">:</span> Type <span style="color: #0000dd;">1</span> process list corruption
<span style="color: #0000dd;">5</span> <span style="color: #339933;">:</span> Type <span style="color: #0000dd;">2</span> process list corruption
<span style="color: #0000dd;">6</span> <span style="color: #339933;">:</span> Debug routine modification
<span style="color: #0000dd;">7</span> <span style="color: #339933;">:</span> Critical MSR modification
<span style="color: #0000dd;">8</span> <span style="color: #339933;">:</span> Object type
<span style="color: #0000dd;">9</span> <span style="color: #339933;">:</span> A processor IVT
a <span style="color: #339933;">:</span> Modification of a <span style="color: #000066;">system</span> service <span style="color: #000000; font-weight: bold;">function</span>
b <span style="color: #339933;">:</span> A generic session data region
c <span style="color: #339933;">:</span> Modification of a session <span style="color: #000000; font-weight: bold;">function</span> or .<span style="color: #202020;">pdata</span>
d <span style="color: #339933;">:</span> Modification of an import table
e <span style="color: #339933;">:</span> Modification of a session import table
f <span style="color: #339933;">:</span> Ps Win32 callout modification
<span style="color: #0000dd;">10</span> <span style="color: #339933;">:</span> Debug <span style="color: #b1b100;">switch</span> routine modification
<span style="color: #0000dd;">11</span> <span style="color: #339933;">:</span> IRP allocator modification
<span style="color: #0000dd;">12</span> <span style="color: #339933;">:</span> Driver call dispatcher modification
<span style="color: #0000dd;">13</span> <span style="color: #339933;">:</span> IRP completion dispatcher modification
<span style="color: #0000dd;">14</span> <span style="color: #339933;">:</span> IRP deallocator modification
<span style="color: #0000dd;">15</span> <span style="color: #339933;">:</span> A processor control <span style="color: #993333;">register</span>
<span style="color: #0000dd;">16</span> <span style="color: #339933;">:</span> Critical floating point control <span style="color: #993333;">register</span> modification
<span style="color: #0000dd;">17</span> <span style="color: #339933;">:</span> Local APIC modification
<span style="color: #0000dd;">18</span> <span style="color: #339933;">:</span> Kernel notification callout modification
<span style="color: #0000dd;">19</span> <span style="color: #339933;">:</span> Loaded module list modification
1a <span style="color: #339933;">:</span> Type <span style="color: #0000dd;">3</span> process list corruption
1b <span style="color: #339933;">:</span> Type <span style="color: #0000dd;">4</span> process list corruption
1c <span style="color: #339933;">:</span> Driver object corruption
1d <span style="color: #339933;">:</span> Executive callback object modification
1e <span style="color: #339933;">:</span> Modification of module padding
<span style="color:#800080;">1f</span> <span style="color: #339933;">:</span> Modification of a protected process
<span style="color: #0000dd;">20</span> <span style="color: #339933;">:</span> A generic data region
<span style="color: #0000dd;">21</span> <span style="color: #339933;">:</span> A page hash mismatch
<span style="color: #0000dd;">22</span> <span style="color: #339933;">:</span> A session page hash mismatch
<span style="color: #0000dd;">23</span> <span style="color: #339933;">:</span> Load config directory modification
<span style="color: #0000dd;">24</span> <span style="color: #339933;">:</span> Inverted <span style="color: #000000; font-weight: bold;">function</span> table modification
<span style="color: #0000dd;">25</span> <span style="color: #339933;">:</span> Session configuration modification
<span style="color: #0000dd;">102</span> <span style="color: #339933;">:</span> Modification of win32k.<span style="color: #202020;">sys</span></pre></td></tr></table><p class="theCode" style="display:none;">CRITICAL_STRUCTURE_CORRUPTION (109)
Arguments:
Arg1: 00000000, Reserved
Arg2: 00000000, Reserved
Arg3: 00000000, Failure type dependent information
Arg4: 00000000, Type of corrupted region, can be
0 : A generic data region
1 : Modification of a function or .pdata
2 : A processor IDT
3 : A processor GDT
4 : Type 1 process list corruption
5 : Type 2 process list corruption
6 : Debug routine modification
7 : Critical MSR modification
8 : Object type
9 : A processor IVT
a : Modification of a system service function
b : A generic session data region
c : Modification of a session function or .pdata
d : Modification of an import table
e : Modification of a session import table
f : Ps Win32 callout modification
10 : Debug switch routine modification
11 : IRP allocator modification
12 : Driver call dispatcher modification
13 : IRP completion dispatcher modification
14 : IRP deallocator modification
15 : A processor control register
16 : Critical floating point control register modification
17 : Local APIC modification
18 : Kernel notification callout modification
19 : Loaded module list modification
1a : Type 3 process list corruption
1b : Type 4 process list corruption
1c : Driver object corruption
1d : Executive callback object modification
1e : Modification of module padding
1f : Modification of a protected process
20 : A generic data region
21 : A page hash mismatch
22 : A session page hash mismatch
23 : Load config directory modification
24 : Inverted function table modification
25 : Session configuration modification
102 : Modification of win32k.sys</p></div>

<p>I have to admit, there are some things I didn&#8217;t realize PatchGuard would actually think about protecting, such as the Local APIC. It&#8217;s also interesting to see some more esoteric hooks in the list as well, such as <em>PsEstablishWin32Callout</em> protection. I also did not realize PatchGuard now protects the DRIVER_OBJECT structure &#8212; indeed, hooking a major function will now give you code 0x1C. And finally, the protection of protected processes means that technically something such as Mimikatz&#8217;s &#8220;MimiDrv&#8221; may crash some machines in the wild.</p>
<p>I usually try to avoid talking about PatchGuard since I&#8217;m glad it&#8217;s giving AV companies hell, but I can&#8217;t have been the only person that never noticed that the checks were documented in the debugger all along, hidden behind a simple command (it makes sense that Microsoft wouldn&#8217;t want their own support engineers to be wondering what on Earth they&#8217;re looking at):</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="c" style="font-family:monospace;"><span style="color: #339933;">!</span>analyze <span style="color: #339933;">-</span>show <span style="color: #0000dd;">109</span></pre></td></tr></table><p class="theCode" style="display:none;">!analyze -show 109</p></div>

<p>I can&#8217;t even take credit for discovering this on my own. Reading Microsoft&#8217;s famous &#8220;NT Debugging&#8221; blog made me realize that this had been there <a href="http://blogs.msdn.com/b/ntdebugging/archive/2014/11/20/driver-object-corruption-triggers-bugcheck-109.aspx"> all along.</a></p>
<p>Enjoy!</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-290 -->

<article id="post-271" class="post-271 post type-post status-publish format-standard hentry category-uncategorized">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=271" rel="bookmark"><time class="entry-date published updated" datetime="2015-05-14T11:22:06-05:00">May 14, 2015</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=271" rel="bookmark">Analyzing MS15-050 With Diaphora</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		<p>One of the most common ways that I glean information on new and upcoming features on releases of Windows is obviously to use reverse engineering such as <a href="https://www.hex-rays.com/products/ida/">IDA Pro</a> and look at changed functions and variables, which usually imply a change in functionality.</p>
<p>Of course, such changes can also reveal security fixes, but those are a lot harder to notice at the granular level of diff-analysis that I perform as part of understanding feature changes.</p>
<p>For those type of fixes, a specialized diffing tool, such as <a href="http://www.zynamics.com/bindiff/manual/">BinDiff </a>is often used by reverse engineers and security experts. Recently, such tools have either become obsoleted, abandoned, or cost prohibitive. A good friend of mine, <a href="http://joxeankoret.com/">Joxean Koret</a> (previously of Hex-Rays fame, un-coincidentally), has recently developed a Python plugin for IDA Pro, called &#8220;<a href="http://joxeankoret.com/blog/2015/03/13/diaphora-a-program-diffing-plugin-for-ida-pro/">Diaphora</a>&#8220;, (diaforá, the Greek word for &#8220;difference&#8221;).</p>
<p>In this blog post, we&#8217;ll analyze the recent <a href="https://technet.microsoft.com/en-us/library/security/ms15-050.aspx">MS15-050</a> patch and do a very quick walk-through of how to use Diaphora.</p>
<h2>Installation</h2>
<p>Installing the plugin is as easy as going over to the <a href="https://github.com/joxeankoret/diaphora">GitHub page</a>, cloning the repository into a <a href="https://github.com/joxeankoret/diaphora/archive/master.zip">.zip file</a>, and extracting the contents into the appropriate directory (I chose IDA&#8217;s plugin folder, but this can be anything you wish).</p>
<p>As long as your IDA Python is configured correctly (which has been a default in IDA for many releases), clicking on File, Script file&#8230;, should let you select a .py file</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/diaphora5.png"><img loading="lazy" class="alignnone wp-image-279" src="http://www.alex-ionescu.com/wp-content/uploads/diaphora5.png" alt="diaphora5" width="576" height="304" srcset="https://alex-ionescu.com/wp-content/uploads/diaphora5.png 625w, https://alex-ionescu.com/wp-content/uploads/diaphora5-300x158.png 300w" sizes="(max-width: 576px) 100vw, 576px" /></a></p>
<h2>Generating the initial baseline</h2>
<p>The first time you run Diaphora, you&#8217;ll be making the initial SQLite library. If you don&#8217;t have Hex-Rays, or disable the &#8220;Use the decompiler if available&#8221; flag, this process only takes a few seconds. Otherwise, with Hex-Rays enabled, you&#8217;ll be spending more of the time waiting for the decompiler to run on the entire project. Depending on code complexity, this could take a while.</p>
<p>This SQLite library will essentially contain the assembly and pseudo-code in a format easily parsable by the plugin, as well as all your types, enumerations, and decompiler data (such as your annotations and renamed variables). In this case, I had an existing fairly well-maintained IDB for the latest version of the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms685150%28v=vs.85%29.aspx">Service Control Manager</a> for Windows 7 SP1, which had actually not changed since 2012. My pseudo-code had over 3 years to grow into a well-documented, thoroughly structured IDA database.</p>
<h2>Diff me once, importing your metadata</h2>
<p>On the second run of Diaphora (which at this point, should be on your new, fresh binary), this is where you will direct it to the initial SQLite database from the step above, plus select your diffing options. The default set I use are in the screenshot below.</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/diaphora4.png"><img loading="lazy" class="alignnone wp-image-275" src="http://www.alex-ionescu.com/wp-content/uploads/diaphora4.png" alt="diaphora4" width="450" height="425" srcset="https://alex-ionescu.com/wp-content/uploads/diaphora4.png 526w, https://alex-ionescu.com/wp-content/uploads/diaphora4-300x283.png 300w" sizes="(max-width: 450px) 100vw, 450px" /></a></p>
<p>This second run can take much longer than the first, because not only are you taking the time to generate the a second database, but you are then running all of the diffing algorithms that Diaphora implements (which you can customize), which can take significantly longer. Once the run is complete, Diaphora will show you identical code (&#8220;Best Matches&#8221;), close matches (&#8220;Partial Matches&#8221;), and Unidentifiable Matches. This is where comparing a very annotated IDB with a fresh IDB for purposes of security research can have problems.</p>
<p>Since I renamed many of the static global variables, any code using them in their renamed format would appear different from the original &#8220;loc_325345&#8221; format that IDA uses by default. Any function prototypes which I manually fixed up would also appear different (Hex-Rays is especially bad with variable argument __stdcall on x86), as well any callers of those functions.</p>
<p>So in the initial analysis, I got tons of &#8220;Partial Matches&#8221; and very few &#8220;Best Matches&#8221;. Nothing was unmatched, however.</p>
<p>One of the great parts of Diaphora, however, is that you can then confirm that the functions are truly identical. Since we&#8217;re talking about files which have symbols, it makes sense to claim that <em>ScmFooBar</em> is identical to <em>ScmFooBar</em>. This will now import all the metadata from your first first IDB to the other, and then give you the option of re-running the analysis stage.</p>
<p>At this point, I have taken all of the 3 years of research I had on one IDB, and instantly (well, almost) merged it to a brand new IDB that covers a more recent version of the binary.</p>
<h2>Diff me twice, locating truly changed code</h2>
<p>Now that the IDBs have been &#8220;synced up&#8221;, the second run should identify true code changes &#8212; new variables that have been added, structures that changed, and new code paths. In truth, those were identified the first time around, but hidden in the noise of all the IDB annotation changes. Here&#8217;s an incredible screenshot of what happened the second time I ran Diaphora.</p>
<p>First, note how almost all the functions are now seen as identical:</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/diaphora2.png"><img loading="lazy" class="alignnone wp-image-273" src="http://www.alex-ionescu.com/wp-content/uploads/diaphora2.png" alt="" width="598" height="128" srcset="https://alex-ionescu.com/wp-content/uploads/diaphora2.png 878w, https://alex-ionescu.com/wp-content/uploads/diaphora2-300x64.png 300w" sizes="(max-width: 598px) 100vw, 598px" /></a></p>
<p>And then, on the Partial Matches tab&#8230; we see one, and only one function. This is likely what MS15-050 targeted (the description in the Security Bulletin is that this fixed an &#8220;Impersonation Level Check&#8221; &#8212; the function name sounds like it could be related to an access check!).</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/diaphora3.png"><img loading="lazy" class="alignnone wp-image-274" src="http://www.alex-ionescu.com/wp-content/uploads/diaphora3.png" alt="" width="599" height="127" srcset="https://alex-ionescu.com/wp-content/uploads/diaphora3.png 887w, https://alex-ionescu.com/wp-content/uploads/diaphora3-300x64.png 300w" sizes="(max-width: 599px) 100vw, 599px" /></a></p>
<p>Now that we have our only candidate for the fix delivered in this update, we can investigate what the change actually was. We do this by right-clicking on the function and selecting &#8220;Diff pseudo-code&#8221;. The screenshot below is Diaphora&#8217;s output:</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/diaphora1.png"><img loading="lazy" class="alignnone wp-image-272" src="http://www.alex-ionescu.com/wp-content/uploads/diaphora1.png" alt="" width="649" height="371" srcset="https://alex-ionescu.com/wp-content/uploads/diaphora1.png 1183w, https://alex-ionescu.com/wp-content/uploads/diaphora1-300x171.png 300w, https://alex-ionescu.com/wp-content/uploads/diaphora1-1024x585.png 1024w" sizes="(max-width: 649px) 100vw, 649px" /></a></p>
<h2>Conclusion</h2>
<p>At this point, the vulnerability is pretty clear. In at least some cases where an access check is being made due to someone calling the Service Control Manager, the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa378832%28v=vs.85%29.aspx">impersonation level</a> isn&#8217;t verified &#8212; meaning that someone with an <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa378610%28v=vs.85%29.aspx">Anonymous SYSTEM token</a> (for example) could pass off as actually being a <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms684190%28v=vs.85%29.aspx">SYSTEM </a>caller, and therefore be able to perform actions that only SYSTEM could do. In fact, in this case, we see that the <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff556688%28v=vs.85%29.aspx">Authentication ID (LUID)</a> of 0x3E7 is checked, which is actually <a href="https://www.google.com/search?q=SYSTEM_LUID%200x3e7">SYSTEM_LUID</a>, making our example reality.</p>
<p>At this point, I won&#8217;t yet go into the details on which Service Control Manager calls exactly are vulnerable to this incorrect access check (<em>ScAccessCheck</em>, which is normally used, actually isn&#8217;t vulnerable, as it calls <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa374815%28v=vs.85%29.aspx"><em>NtAccessCheck</em></a>), or how this vulnerability could be used for local privilege escalation, because I wanted to give kudos to Joxean for this amazing plugin and get more people aware of its existence.</p>
<p>Perhaps we&#8217;ll keep the exploitation for a later post? For some  ideas, read up <a href="https://twitter.com/tiraniddo">James Forshaw&#8217;s</a> excellent Project Zero <a href="http://googleprojectzero.blogspot.com/2015/02/a-tokens-tale_9.html">blog post</a>, in which he details another case of poor impersonation checks in the operating system.</p>
<p>&nbsp;</p>
	</div><!-- .entry-content -->

	
</article><!-- #post-271 -->

<article id="post-246" class="post-246 post type-post status-publish format-standard hentry category-random-tidbits">
		<header class="entry-header">
		<div class="entry-meta"><span class="screen-reader-text">Posted on</span> <a href="https://alex-ionescu.com/?p=246" rel="bookmark"><time class="entry-date published" datetime="2015-01-22T00:10:50-05:00">January 22, 2015</time><time class="updated" datetime="2015-01-22T00:55:38-05:00">January 22, 2015</time></a></div><!-- .entry-meta --><h3 class="entry-title"><a href="https://alex-ionescu.com/?p=246" rel="bookmark">How Control Flow Guard Drastically Caused Windows 8.1 Address Space and Behavior Changes</a></h3>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		<p>Windows 8.1 radically changes the address space layout of the system by finally removing the 44-bit limitation which I described in one of the <a title="Behind Windows x64’s 44-bit Virtual Memory Addressing Limit" href="http://www.alex-ionescu.com/?p=50">earliest blog posts</a> on this website (and which Wikipedia even links to!). This is a little-known detail about the operating system, and an odd thing for Microsoft not to emphasize on with more aplomb, especially given that 8.1 is considered a &#8220;patch&#8221; of Windows 8.</p>
<p>Now, you may think that 16 TB to 256 TB is a meaningless change since no applications currently use even a fraction of that space, but the main benefit of this change are not the ability to allocate additional memory, but rather the increased entropy space available for Address Space Load Randomization (ASLR), especially given that Windows 8 introduced <a href="http://2012.ruxconbreakpoint.com/assets/Uploads/bpx/alex-breakpoint2012.pdf">High Entropy ASLR (HEASLR), Top-down Randomization and Anonymous Memory Randomization</a>.</p>
<p>Additionally, another key change was done in Windows 8.1 that is not mentioned anywhere. As <a href="https://social.technet.microsoft.com/Profile/pavel%20lebedinsky%20%5Bmsft%5D">Pavel Lebedinsky</a>, one of the lead SDETs on the Memory Manager and an extremely helpful individual indicated on one of the <a href="http://blogs.technet.com/b/markrussinovich/archive/2008/11/17/3155406.aspx">blog posts</a> from Mark Russinovich:</p>
<blockquote><p>1. Reserved memory does contribute to commit charge, because the memory manager charges commit for pagetable space necessary to map the entire reserved range. On 64 bit this can be a significant number (reserving 1 TB of memory will consume approximately 2 GB of commit).</p></blockquote>
<p>This means that attempting to reserve the full 8 TB of memory on Windows 7 results in 16 GB of commit, which is beyond&#8217;s most people&#8217;s commit limit, especially at the time. In Windows 8.1, this would result in 128 GB of commit being used, which only a beefy server would tolerate. While such large memory reservations are unusual, they do have usefulness in certain scenarios related to security and low-level testing. This Windows behavior prevented such reservations from reliably working, but in Windows 8.1, the limitation has been removed!</p>
<p>Indeed, you can easily test this by using the <a href="http://download.sysinternals.com/files/TestLimit.zip">TestLimit</a> tool from the Windows Internals Book, and run it with the -r option (and preferably with a large enough block size). Here&#8217;s a screenshot of hitting the 128 TB reservation:</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/testlimit.png"><img loading="lazy" class="alignnone wp-image-254" src="http://www.alex-ionescu.com/wp-content/uploads/testlimit.png" alt="testlimit" width="501" height="158" srcset="https://alex-ionescu.com/wp-content/uploads/testlimit.png 685w, https://alex-ionescu.com/wp-content/uploads/testlimit-300x95.png 300w" sizes="(max-width: 501px) 100vw, 501px" /></a></p>
<p>And here&#8217;s the resulting view in VMMap, which does not show the expected page table commit charge, but rather a much smaller size (256 MB).</p>
<p><a href="http://www.alex-ionescu.com/wp-content/uploads/memvm.png"><img loading="lazy" class="alignnone wp-image-257" src="http://www.alex-ionescu.com/wp-content/uploads/memvm.png" alt="memvm" width="500" height="548" srcset="https://alex-ionescu.com/wp-content/uploads/memvm.png 584w, https://alex-ionescu.com/wp-content/uploads/memvm-274x300.png 274w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p>So why did Microsoft change this behavior in Windows 8.1? Well, Windows 10, as well as Windows 8.1 Update 3 (November Update) make this clear. As I previously tweeted, these OS versions enable Control Flow Guard (CFG), a feature that laid dormant in the first versions of Windows 8.1. In order to function, CFG requires the use of optimized bitmaps in order to determine the validity of indirect calls, and on 64-bit Windows, this bitmap requires 2 TB of space. Not only would this cut the Windows 8 address space by 25%, it would&#8217;ve also resulted in 4 GB of per-process commit!</p>
<p>Here&#8217;s a screenshot of Process Hacker showing how all CFG-enabled processes now use 2 TB of virtual address space:</p>
<p><img loading="lazy" class="alignnone size-full wp-image-266" src="http://www.alex-ionescu.com/wp-content/uploads/2tb.png" alt="2tb" width="495" height="1195" srcset="https://alex-ionescu.com/wp-content/uploads/2tb.png 495w, https://alex-ionescu.com/wp-content/uploads/2tb-124x300.png 124w, https://alex-ionescu.com/wp-content/uploads/2tb-424x1024.png 424w" sizes="(max-width: 495px) 100vw, 495px" /></p>
<p>The final effect of this change from 8 TB to 128 TB is that the kernel address space layout has significantly changed. And sadly, the !address extension in WinDBG is broken and continues to show the Windows 8 address space layout (which I expanded on during my <a href="https://www.youtube.com/watch?v=Of6DemoMLaA">Blackhat 2013 talk</a>), while the Windows Internals book is stuck on Windows 7 and doesn&#8217;t even cover Windows 8 or higher.</p>
<p>Therefore, I publish below what I believe to be the only public source of information on the Windows 8.1 x64 memory layout. One of the benefits of this new layout is that it now becomes extremely easy by using the first 5 or 6 nibbles of an address to determine where it&#8217;s coming from. For example, 0xFFFFD&#8230; is a kernel stack, 0xFFFFC&#8230; is paged pool, 0xFFFFF8&#8230; is a loaded image (driver or kernel), and 0xFFFFE&#8230; is nonpaged pool.</p>
<p>
<table id="tablepress-8" class="tablepress tablepress-id-8">
<thead>
<tr class="row-1 odd">
	<th class="column-1">Start</th><th class="column-2">End</th><th class="column-3">Size</th><th class="column-4">Description</th>
</tr>
</thead>
<tbody class="row-hover">
<tr class="row-2 even">
	<td class="column-1">FFFF0000`00000000</td><td class="column-2">FFFF07FF`FFFFFFFF</td><td class="column-3">8TB</td><td class="column-4">Memory Hole</td>
</tr>
<tr class="row-3 odd">
	<td class="column-1">FFFF0800`00000000</td><td class="column-2">FFFFAFFF`FFFFFFFF</td><td class="column-3">168TB</td><td class="column-4">Unused Space</td>
</tr>
<tr class="row-4 even">
	<td class="column-1">FFFFB000`00000000</td><td class="column-2">FFFFBFFF`FFFFFFFF</td><td class="column-3">16TB</td><td class="column-4">System Cache</td>
</tr>
<tr class="row-5 odd">
	<td class="column-1">FFFFC000`00000000</td><td class="column-2">FFFFCFFF`FFFFFFFF</td><td class="column-3">16TB</td><td class="column-4">Paged Pool</td>
</tr>
<tr class="row-6 even">
	<td class="column-1">FFFFD000`00000000</td><td class="column-2">FFFFDFFF`FFFFFFFF</td><td class="column-3">16TB</td><td class="column-4">System PTEs</td>
</tr>
<tr class="row-7 odd">
	<td class="column-1">FFFFE000`00000000</td><td class="column-2">FFFFEFFF`FFFFFFFF</td><td class="column-3">16TB</td><td class="column-4">Nonpaged Pool</td>
</tr>
<tr class="row-8 even">
	<td class="column-1">FFFFF000`00000000</td><td class="column-2">FFFFF67F`FFFFFFFF</td><td class="column-3">6.5TB</td><td class="column-4">Unused Space</td>
</tr>
<tr class="row-9 odd">
	<td class="column-1">FFFFF680`00000000</td><td class="column-2">FFFFF6FF`FFFFFFFF</td><td class="column-3">512GB</td><td class="column-4">PTE Space</td>
</tr>
<tr class="row-10 even">
	<td class="column-1">FFFFF700`00000000</td><td class="column-2">FFFFF77F`FFFFFFFF</td><td class="column-3">512GB</td><td class="column-4">HyperSpace</td>
</tr>
<tr class="row-11 odd">
	<td class="column-1">FFFFF780`00000000</td><td class="column-2">FFFFF780`00000FFF</td><td class="column-3">4K</td><td class="column-4">Shared User Data</td>
</tr>
<tr class="row-12 even">
	<td class="column-1">FFFFF780`00001000</td><td class="column-2">FFFFF780`BFFFFFFF</td><td class="column-3">~3GB</td><td class="column-4">System PTE WS       </td>
</tr>
<tr class="row-13 odd">
	<td class="column-1">FFFFF780`C0000000</td><td class="column-2">FFFFF780`FFFFFFFF</td><td class="column-3">1GB</td><td class="column-4">WS Hash Table</td>
</tr>
<tr class="row-14 even">
	<td class="column-1">FFFFF781`00000000</td><td class="column-2">FFFFF791`3FFFFFFF</td><td class="column-3">65GB</td><td class="column-4">Paged Pool WS</td>
</tr>
<tr class="row-15 odd">
	<td class="column-1">FFFFF791`40000000</td><td class="column-2">FFFFF799`3FFFFFFF</td><td class="column-3">32GB</td><td class="column-4">WS Hash Table</td>
</tr>
<tr class="row-16 even">
	<td class="column-1">FFFFF799`40000000</td><td class="column-2">FFFFF7A9`7FFFFFFF</td><td class="column-3">65GB</td><td class="column-4">System Cache WS</td>
</tr>
<tr class="row-17 odd">
	<td class="column-1">FFFFF7A9`80000000</td><td class="column-2">FFFFF7B1`7FFFFFFF</td><td class="column-3">32GB</td><td class="column-4">WS Hash Table</td>
</tr>
<tr class="row-18 even">
	<td class="column-1">FFFFF7B1`80000000</td><td class="column-2">FFFFF7FF`FFFFFFFF</td><td class="column-3">314GB</td><td class="column-4">Unused Space</td>
</tr>
<tr class="row-19 odd">
	<td class="column-1">FFFFF800`00000000</td><td class="column-2">FFFFF8FF`FFFFFFFF</td><td class="column-3">1TB</td><td class="column-4">System View PTEs</td>
</tr>
<tr class="row-20 even">
	<td class="column-1">FFFFF900`00000000</td><td class="column-2">FFFFF97F`FFFFFFFF</td><td class="column-3">512GB</td><td class="column-4">Session Space</td>
</tr>
<tr class="row-21 odd">
	<td class="column-1">FFFFF980`00000000</td><td class="column-2">FFFFFA70`FFFFFFFF</td><td class="column-3">1TB</td><td class="column-4">Dynamic VA Space</td>
</tr>
<tr class="row-22 even">
	<td class="column-1">FFFFFA80`00000000</td><td class="column-2">FFFFFAFF`FFFFFFFF</td><td class="column-3">512GB</td><td class="column-4">PFN Database</td>
</tr>
<tr class="row-23 odd">
	<td class="column-1">FFFFFFFF`FFC00000</td><td class="column-2">FFFFFFFF`FFFFFFFF</td><td class="column-3">4MB</td><td class="column-4">HAL Heap</td>
</tr>
</tbody>
</table>
<span class="tablepress-table-description tablepress-table-description-id-8">Table describing the various 64-bit memory ranges in Windows 8.1</span>
<!-- #tablepress-8 from cache --></p>
	</div><!-- .entry-content -->

	
</article><!-- #post-246 -->

	<nav class="navigation pagination" role="navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Posts navigation</h2>
		<div class="nav-links"><span aria-current="page" class="page-numbers current"><span class="meta-nav screen-reader-text">Page </span>1</span>
<a class="page-numbers" href="https://alex-ionescu.com/favicon.ico/?paged=2"><span class="meta-nav screen-reader-text">Page </span>2</a>
<span class="page-numbers dots">&hellip;</span>
<a class="page-numbers" href="https://alex-ionescu.com/favicon.ico/?paged=8"><span class="meta-nav screen-reader-text">Page </span>8</a>
<a class="next page-numbers" href="https://alex-ionescu.com/favicon.ico/?paged=2"><span class="screen-reader-text">Next page</span><svg class="icon icon-arrow-right" aria-hidden="true" role="img"> <use href="#icon-arrow-right" xlink:href="#icon-arrow-right"></use> </svg></a></div>
	</nav>
		</main><!-- #main -->
	</div><!-- #primary -->
	
<aside id="secondary" class="widget-area" role="complementary" aria-label="Blog Sidebar">
	<section id="archives-4" class="widget widget_archive"><h2 class="widget-title">Archives</h2>
			<ul>
					<li><a href='https://alex-ionescu.com/?m=201901'>January 2019</a>&nbsp;(2)</li>
	<li><a href='https://alex-ionescu.com/?m=201808'>August 2018</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201708'>August 2017</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201705'>May 2017</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201605'>May 2016</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201512'>December 2015</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201506'>June 2015</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201505'>May 2015</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201501'>January 2015</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201412'>December 2014</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201409'>September 2014</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201406'>June 2014</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=201312'>December 2013</a>&nbsp;(2)</li>
	<li><a href='https://alex-ionescu.com/?m=201311'>November 2013</a>&nbsp;(2)</li>
	<li><a href='https://alex-ionescu.com/?m=201110'>October 2011</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=200907'>July 2009</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=200808'>August 2008</a>&nbsp;(2)</li>
	<li><a href='https://alex-ionescu.com/?m=200803'>March 2008</a>&nbsp;(2)</li>
	<li><a href='https://alex-ionescu.com/?m=200801'>January 2008</a>&nbsp;(3)</li>
	<li><a href='https://alex-ionescu.com/?m=200711'>November 2007</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=200709'>September 2007</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=200708'>August 2007</a>&nbsp;(2)</li>
	<li><a href='https://alex-ionescu.com/?m=200707'>July 2007</a>&nbsp;(1)</li>
	<li><a href='https://alex-ionescu.com/?m=200706'>June 2007</a>&nbsp;(2)</li>
	<li><a href='https://alex-ionescu.com/?m=200705'>May 2007</a>&nbsp;(4)</li>
	<li><a href='https://alex-ionescu.com/?m=200704'>April 2007</a>&nbsp;(4)</li>
	<li><a href='https://alex-ionescu.com/?m=200703'>March 2007</a>&nbsp;(4)</li>
	<li><a href='https://alex-ionescu.com/?m=200702'>February 2007</a>&nbsp;(3)</li>
	<li><a href='https://alex-ionescu.com/?m=200701'>January 2007</a>&nbsp;(9)</li>
	<li><a href='https://alex-ionescu.com/?m=200612'>December 2006</a>&nbsp;(4)</li>
	<li><a href='https://alex-ionescu.com/?m=200611'>November 2006</a>&nbsp;(10)</li>
			</ul>

			</section><section id="linkcat-7" class="widget widget_links"><h2 class="widget-title">Blogroll</h2>
	<ul class='xoxo blogroll'>
<li><a href="http://blogs.msdn.com/larryosterman/" title="A blog from one of the most respected and smartest Microsoft employees">Larry Osterman&#8217;s Blog</a></li>
<li><a href="http://blogs.msdn.com/oldnewthing/" title="Every quirk of Windows explained, every annoying implementation defended, Raymond will open your eyes to the harsh reality of backwards compatibility on Windows.">Raymond Chen&#8217;s Blog</a></li>
<li><a href="http://www.reactos.org" rel="me" title="Homepage of the ReactOS Project and Foundation">ReactOS</a></li>

	</ul>
</section>
<section id="categories-6" class="widget widget_categories"><h2 class="widget-title">Categories</h2>
			<ul>
					<li class="cat-item cat-item-4"><a href="https://alex-ionescu.com/?cat=4">Articles and Presentations</a> (15)
</li>
	<li class="cat-item cat-item-2"><a href="https://alex-ionescu.com/?cat=2">Coding and Reversing</a> (44)
</li>
	<li class="cat-item cat-item-6"><a href="https://alex-ionescu.com/?cat=6">Random Tidbits</a> (27)
</li>
	<li class="cat-item cat-item-5"><a href="https://alex-ionescu.com/?cat=5">School and Student Ambassador</a> (2)
</li>
	<li class="cat-item cat-item-3"><a href="https://alex-ionescu.com/?cat=3">TinyKRNL and ReactOS</a> (4)
</li>
	<li class="cat-item cat-item-1"><a href="https://alex-ionescu.com/?cat=1">Uncategorized</a> (10)
</li>
	<li class="cat-item cat-item-8"><a href="https://alex-ionescu.com/?cat=8">Work</a> (2)
</li>
			</ul>

			</section></aside><!-- #secondary -->
</div><!-- .wrap -->


		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
			<div class="wrap">
				
					<nav class="social-navigation" role="navigation" aria-label="Footer Social Links Menu">
											</nav><!-- .social-navigation -->
					<div class="site-info">
		<a href="https://wordpress.org/" class="imprint">
		Proudly powered by WordPress	</a>
</div><!-- .site-info -->
			</div><!-- .wrap -->
		</footer><!-- #colophon -->
	</div><!-- .site-content-contain -->
</div><!-- #page -->
<script src='https://alex-ionescu.com/wp-content/plugins/ultimate-tables/js/jquery.dataTables.min.js?ver=1.0' id='ultimatetables-js'></script>
<script id='contact-form-7-js-extra'>
var wpcf7 = {"apiSettings":{"root":"https:\/\/alex-ionescu.com\/index.php?rest_route=\/contact-form-7\/v1","namespace":"contact-form-7\/v1"}};
</script>
<script src='https://alex-ionescu.com/wp-content/plugins/contact-form-7/includes/js/scripts.js?ver=5.3' id='contact-form-7-js'></script>
<script src='https://alex-ionescu.com/wp-content/plugins/wp-syntax/js/wp-syntax.js?ver=1.1' id='wp-syntax-js-js'></script>
<script id='twentyseventeen-skip-link-focus-fix-js-extra'>
var twentyseventeenScreenReaderText = {"quote":"<svg class=\"icon icon-quote-right\" aria-hidden=\"true\" role=\"img\"> <use href=\"#icon-quote-right\" xlink:href=\"#icon-quote-right\"><\/use> <\/svg>","expand":"Expand child menu","collapse":"Collapse child menu","icon":"<svg class=\"icon icon-angle-down\" aria-hidden=\"true\" role=\"img\"> <use href=\"#icon-angle-down\" xlink:href=\"#icon-angle-down\"><\/use> <span class=\"svg-fallback icon-angle-down\"><\/span><\/svg>"};
</script>
<script src='https://alex-ionescu.com/wp-content/themes/twentyseventeen/assets/js/skip-link-focus-fix.js?ver=20161114' id='twentyseventeen-skip-link-focus-fix-js'></script>
<script src='https://alex-ionescu.com/wp-content/themes/twentyseventeen/assets/js/navigation.js?ver=20161203' id='twentyseventeen-navigation-js'></script>
<script src='https://alex-ionescu.com/wp-content/themes/twentyseventeen/assets/js/global.js?ver=20190121' id='twentyseventeen-global-js'></script>
<script src='https://alex-ionescu.com/wp-content/themes/twentyseventeen/assets/js/jquery.scrollTo.js?ver=2.1.2' id='jquery-scrollto-js'></script>
<script src='https://alex-ionescu.com/wp-content/plugins/enlighter/cache/enlighterjs.min.js?ver=6rbXWoIZDnNv/0r' id='enlighterjs-js'></script>
<script id='enlighterjs-js-after'>
!function(e,n){if("undefined"!=typeof EnlighterJS){var o={"selectors":{"block":"pre.EnlighterJSRAW","inline":"code.EnlighterJSRAW"},"options":{"indent":4,"ampersandCleanup":true,"linehover":true,"rawcodeDbclick":false,"textOverflow":"break","linenumbers":true,"theme":"wpcustom","language":"cpp","retainCssClasses":false,"collapse":false,"toolbarOuter":"","toolbarTop":"{BTN_RAW}{BTN_COPY}{BTN_WINDOW}{BTN_WEBSITE}","toolbarBottom":""}};(e.EnlighterJSINIT=function(){EnlighterJS.init(o.selectors.block,o.selectors.inline,o.options)})()}else{(n&&(n.error||n.log)||function(){})("Error: EnlighterJS resources not loaded yet!")}}(window,console);
</script>
<script src='https://alex-ionescu.com/wp-includes/js/wp-embed.min.js?ver=5.5.3' id='wp-embed-js'></script>
<script src='https://alex-ionescu.com/wp-content/plugins/tablepress/js/jquery.datatables.min.js?ver=1.12' id='tablepress-datatables-js'></script>
<script type="text/javascript">
jQuery(document).ready(function($){
$('#tablepress-8').dataTable({"stripeClasses":["even","odd"],"ordering":false,"paging":false,"searching":false,"info":false});
});
</script><svg style="position: absolute; width: 0; height: 0; overflow: hidden;" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<defs>
<symbol id="icon-behance" viewBox="0 0 37 32">
<path class="path1" d="M33 6.054h-9.125v2.214h9.125v-2.214zM28.5 13.661q-1.607 0-2.607 0.938t-1.107 2.545h7.286q-0.321-3.482-3.571-3.482zM28.786 24.107q1.125 0 2.179-0.571t1.357-1.554h3.946q-1.786 5.482-7.625 5.482-3.821 0-6.080-2.357t-2.259-6.196q0-3.714 2.33-6.17t6.009-2.455q2.464 0 4.295 1.214t2.732 3.196 0.902 4.429q0 0.304-0.036 0.839h-11.75q0 1.982 1.027 3.063t2.973 1.080zM4.946 23.214h5.286q3.661 0 3.661-2.982 0-3.214-3.554-3.214h-5.393v6.196zM4.946 13.625h5.018q1.393 0 2.205-0.652t0.813-2.027q0-2.571-3.393-2.571h-4.643v5.25zM0 4.536h10.607q1.554 0 2.768 0.25t2.259 0.848 1.607 1.723 0.563 2.75q0 3.232-3.071 4.696 2.036 0.571 3.071 2.054t1.036 3.643q0 1.339-0.438 2.438t-1.179 1.848-1.759 1.268-2.161 0.75-2.393 0.232h-10.911v-22.5z"></path>
</symbol>
<symbol id="icon-deviantart" viewBox="0 0 18 32">
<path class="path1" d="M18.286 5.411l-5.411 10.393 0.429 0.554h4.982v7.411h-9.054l-0.786 0.536-2.536 4.875-0.536 0.536h-5.375v-5.411l5.411-10.411-0.429-0.536h-4.982v-7.411h9.054l0.786-0.536 2.536-4.875 0.536-0.536h5.375v5.411z"></path>
</symbol>
<symbol id="icon-medium" viewBox="0 0 32 32">
<path class="path1" d="M10.661 7.518v20.946q0 0.446-0.223 0.759t-0.652 0.313q-0.304 0-0.589-0.143l-8.304-4.161q-0.375-0.179-0.634-0.598t-0.259-0.83v-20.357q0-0.357 0.179-0.607t0.518-0.25q0.25 0 0.786 0.268l9.125 4.571q0.054 0.054 0.054 0.089zM11.804 9.321l9.536 15.464-9.536-4.75v-10.714zM32 9.643v18.821q0 0.446-0.25 0.723t-0.679 0.277-0.839-0.232l-7.875-3.929zM31.946 7.5q0 0.054-4.58 7.491t-5.366 8.705l-6.964-11.321 5.786-9.411q0.304-0.5 0.929-0.5 0.25 0 0.464 0.107l9.661 4.821q0.071 0.036 0.071 0.107z"></path>
</symbol>
<symbol id="icon-slideshare" viewBox="0 0 32 32">
<path class="path1" d="M15.589 13.214q0 1.482-1.134 2.545t-2.723 1.063-2.723-1.063-1.134-2.545q0-1.5 1.134-2.554t2.723-1.054 2.723 1.054 1.134 2.554zM24.554 13.214q0 1.482-1.125 2.545t-2.732 1.063q-1.589 0-2.723-1.063t-1.134-2.545q0-1.5 1.134-2.554t2.723-1.054q1.607 0 2.732 1.054t1.125 2.554zM28.571 16.429v-11.911q0-1.554-0.571-2.205t-1.982-0.652h-19.857q-1.482 0-2.009 0.607t-0.527 2.25v12.018q0.768 0.411 1.58 0.714t1.446 0.5 1.446 0.33 1.268 0.196 1.25 0.071 1.045 0.009 1.009-0.036 0.795-0.036q1.214-0.018 1.696 0.482 0.107 0.107 0.179 0.161 0.464 0.446 1.089 0.911 0.125-1.625 2.107-1.554 0.089 0 0.652 0.027t0.768 0.036 0.813 0.018 0.946-0.018 0.973-0.080 1.089-0.152 1.107-0.241 1.196-0.348 1.205-0.482 1.286-0.616zM31.482 16.339q-2.161 2.661-6.643 4.5 1.5 5.089-0.411 8.304-1.179 2.018-3.268 2.643-1.857 0.571-3.25-0.268-1.536-0.911-1.464-2.929l-0.018-5.821v-0.018q-0.143-0.036-0.438-0.107t-0.42-0.089l-0.018 6.036q0.071 2.036-1.482 2.929-1.411 0.839-3.268 0.268-2.089-0.643-3.25-2.679-1.875-3.214-0.393-8.268-4.482-1.839-6.643-4.5-0.446-0.661-0.071-1.125t1.071 0.018q0.054 0.036 0.196 0.125t0.196 0.143v-12.393q0-1.286 0.839-2.196t2.036-0.911h22.446q1.196 0 2.036 0.911t0.839 2.196v12.393l0.375-0.268q0.696-0.482 1.071-0.018t-0.071 1.125z"></path>
</symbol>
<symbol id="icon-snapchat-ghost" viewBox="0 0 30 32">
<path class="path1" d="M15.143 2.286q2.393-0.018 4.295 1.223t2.92 3.438q0.482 1.036 0.482 3.196 0 0.839-0.161 3.411 0.25 0.125 0.5 0.125 0.321 0 0.911-0.241t0.911-0.241q0.518 0 1 0.321t0.482 0.821q0 0.571-0.563 0.964t-1.232 0.563-1.232 0.518-0.563 0.848q0 0.268 0.214 0.768 0.661 1.464 1.83 2.679t2.58 1.804q0.5 0.214 1.429 0.411 0.5 0.107 0.5 0.625 0 1.25-3.911 1.839-0.125 0.196-0.196 0.696t-0.25 0.83-0.589 0.33q-0.357 0-1.107-0.116t-1.143-0.116q-0.661 0-1.107 0.089-0.571 0.089-1.125 0.402t-1.036 0.679-1.036 0.723-1.357 0.598-1.768 0.241q-0.929 0-1.723-0.241t-1.339-0.598-1.027-0.723-1.036-0.679-1.107-0.402q-0.464-0.089-1.125-0.089-0.429 0-1.17 0.134t-1.045 0.134q-0.446 0-0.625-0.33t-0.25-0.848-0.196-0.714q-3.911-0.589-3.911-1.839 0-0.518 0.5-0.625 0.929-0.196 1.429-0.411 1.393-0.571 2.58-1.804t1.83-2.679q0.214-0.5 0.214-0.768 0-0.5-0.563-0.848t-1.241-0.527-1.241-0.563-0.563-0.938q0-0.482 0.464-0.813t0.982-0.33q0.268 0 0.857 0.232t0.946 0.232q0.321 0 0.571-0.125-0.161-2.536-0.161-3.393 0-2.179 0.482-3.214 1.143-2.446 3.071-3.536t4.714-1.125z"></path>
</symbol>
<symbol id="icon-yelp" viewBox="0 0 27 32">
<path class="path1" d="M13.804 23.554v2.268q-0.018 5.214-0.107 5.446-0.214 0.571-0.911 0.714-0.964 0.161-3.241-0.679t-2.902-1.589q-0.232-0.268-0.304-0.643-0.018-0.214 0.071-0.464 0.071-0.179 0.607-0.839t3.232-3.857q0.018 0 1.071-1.25 0.268-0.339 0.705-0.438t0.884 0.063q0.429 0.179 0.67 0.518t0.223 0.75zM11.143 19.071q-0.054 0.982-0.929 1.25l-2.143 0.696q-4.911 1.571-5.214 1.571-0.625-0.036-0.964-0.643-0.214-0.446-0.304-1.339-0.143-1.357 0.018-2.973t0.536-2.223 1-0.571q0.232 0 3.607 1.375 1.25 0.518 2.054 0.839l1.5 0.607q0.411 0.161 0.634 0.545t0.205 0.866zM25.893 24.375q-0.125 0.964-1.634 2.875t-2.42 2.268q-0.661 0.25-1.125-0.125-0.25-0.179-3.286-5.125l-0.839-1.375q-0.25-0.375-0.205-0.821t0.348-0.821q0.625-0.768 1.482-0.464 0.018 0.018 2.125 0.714 3.625 1.179 4.321 1.42t0.839 0.366q0.5 0.393 0.393 1.089zM13.893 13.089q0.089 1.821-0.964 2.179-1.036 0.304-2.036-1.268l-6.75-10.679q-0.143-0.625 0.339-1.107 0.732-0.768 3.705-1.598t4.009-0.563q0.714 0.179 0.875 0.804 0.054 0.321 0.393 5.455t0.429 6.777zM25.714 15.018q0.054 0.696-0.464 1.054-0.268 0.179-5.875 1.536-1.196 0.268-1.625 0.411l0.018-0.036q-0.411 0.107-0.821-0.071t-0.661-0.571q-0.536-0.839 0-1.554 0.018-0.018 1.339-1.821 2.232-3.054 2.679-3.643t0.607-0.696q0.5-0.339 1.161-0.036 0.857 0.411 2.196 2.384t1.446 2.991v0.054z"></path>
</symbol>
<symbol id="icon-vine" viewBox="0 0 27 32">
<path class="path1" d="M26.732 14.768v3.536q-1.804 0.411-3.536 0.411-1.161 2.429-2.955 4.839t-3.241 3.848-2.286 1.902q-1.429 0.804-2.893-0.054-0.5-0.304-1.080-0.777t-1.518-1.491-1.83-2.295-1.92-3.286-1.884-4.357-1.634-5.616-1.259-6.964h5.054q0.464 3.893 1.25 7.116t1.866 5.661 2.17 4.205 2.5 3.482q3.018-3.018 5.125-7.25-2.536-1.286-3.982-3.929t-1.446-5.946q0-3.429 1.857-5.616t5.071-2.188q3.179 0 4.875 1.884t1.696 5.313q0 2.839-1.036 5.107-0.125 0.018-0.348 0.054t-0.821 0.036-1.125-0.107-1.107-0.455-0.902-0.92q0.554-1.839 0.554-3.286 0-1.554-0.518-2.357t-1.411-0.804q-0.946 0-1.518 0.884t-0.571 2.509q0 3.321 1.875 5.241t4.768 1.92q1.107 0 2.161-0.25z"></path>
</symbol>
<symbol id="icon-vk" viewBox="0 0 35 32">
<path class="path1" d="M34.232 9.286q0.411 1.143-2.679 5.25-0.429 0.571-1.161 1.518-1.393 1.786-1.607 2.339-0.304 0.732 0.25 1.446 0.304 0.375 1.446 1.464h0.018l0.071 0.071q2.518 2.339 3.411 3.946 0.054 0.089 0.116 0.223t0.125 0.473-0.009 0.607-0.446 0.491-1.054 0.223l-4.571 0.071q-0.429 0.089-1-0.089t-0.929-0.393l-0.357-0.214q-0.536-0.375-1.25-1.143t-1.223-1.384-1.089-1.036-1.009-0.277q-0.054 0.018-0.143 0.063t-0.304 0.259-0.384 0.527-0.304 0.929-0.116 1.384q0 0.268-0.063 0.491t-0.134 0.33l-0.071 0.089q-0.321 0.339-0.946 0.393h-2.054q-1.268 0.071-2.607-0.295t-2.348-0.946-1.839-1.179-1.259-1.027l-0.446-0.429q-0.179-0.179-0.491-0.536t-1.277-1.625-1.893-2.696-2.188-3.768-2.33-4.857q-0.107-0.286-0.107-0.482t0.054-0.286l0.071-0.107q0.268-0.339 1.018-0.339l4.893-0.036q0.214 0.036 0.411 0.116t0.286 0.152l0.089 0.054q0.286 0.196 0.429 0.571 0.357 0.893 0.821 1.848t0.732 1.455l0.286 0.518q0.518 1.071 1 1.857t0.866 1.223 0.741 0.688 0.607 0.25 0.482-0.089q0.036-0.018 0.089-0.089t0.214-0.393 0.241-0.839 0.17-1.446 0-2.232q-0.036-0.714-0.161-1.304t-0.25-0.821l-0.107-0.214q-0.446-0.607-1.518-0.768-0.232-0.036 0.089-0.429 0.304-0.339 0.679-0.536 0.946-0.464 4.268-0.429 1.464 0.018 2.411 0.232 0.357 0.089 0.598 0.241t0.366 0.429 0.188 0.571 0.063 0.813-0.018 0.982-0.045 1.259-0.027 1.473q0 0.196-0.018 0.75t-0.009 0.857 0.063 0.723 0.205 0.696 0.402 0.438q0.143 0.036 0.304 0.071t0.464-0.196 0.679-0.616 0.929-1.196 1.214-1.92q1.071-1.857 1.911-4.018 0.071-0.179 0.179-0.313t0.196-0.188l0.071-0.054 0.089-0.045t0.232-0.054 0.357-0.009l5.143-0.036q0.696-0.089 1.143 0.045t0.554 0.295z"></path>
</symbol>
<symbol id="icon-search" viewBox="0 0 30 32">
<path class="path1" d="M20.571 14.857q0-3.304-2.348-5.652t-5.652-2.348-5.652 2.348-2.348 5.652 2.348 5.652 5.652 2.348 5.652-2.348 2.348-5.652zM29.714 29.714q0 0.929-0.679 1.607t-1.607 0.679q-0.964 0-1.607-0.679l-6.125-6.107q-3.196 2.214-7.125 2.214-2.554 0-4.884-0.991t-4.018-2.679-2.679-4.018-0.991-4.884 0.991-4.884 2.679-4.018 4.018-2.679 4.884-0.991 4.884 0.991 4.018 2.679 2.679 4.018 0.991 4.884q0 3.929-2.214 7.125l6.125 6.125q0.661 0.661 0.661 1.607z"></path>
</symbol>
<symbol id="icon-envelope-o" viewBox="0 0 32 32">
<path class="path1" d="M29.714 26.857v-13.714q-0.571 0.643-1.232 1.179-4.786 3.679-7.607 6.036-0.911 0.768-1.482 1.196t-1.545 0.866-1.83 0.438h-0.036q-0.857 0-1.83-0.438t-1.545-0.866-1.482-1.196q-2.821-2.357-7.607-6.036-0.661-0.536-1.232-1.179v13.714q0 0.232 0.17 0.402t0.402 0.17h26.286q0.232 0 0.402-0.17t0.17-0.402zM29.714 8.089v-0.438t-0.009-0.232-0.054-0.223-0.098-0.161-0.161-0.134-0.25-0.045h-26.286q-0.232 0-0.402 0.17t-0.17 0.402q0 3 2.625 5.071 3.446 2.714 7.161 5.661 0.107 0.089 0.625 0.527t0.821 0.67 0.795 0.563 0.902 0.491 0.768 0.161h0.036q0.357 0 0.768-0.161t0.902-0.491 0.795-0.563 0.821-0.67 0.625-0.527q3.714-2.946 7.161-5.661 0.964-0.768 1.795-2.063t0.83-2.348zM32 7.429v19.429q0 1.179-0.839 2.018t-2.018 0.839h-26.286q-1.179 0-2.018-0.839t-0.839-2.018v-19.429q0-1.179 0.839-2.018t2.018-0.839h26.286q1.179 0 2.018 0.839t0.839 2.018z"></path>
</symbol>
<symbol id="icon-close" viewBox="0 0 25 32">
<path class="path1" d="M23.179 23.607q0 0.714-0.5 1.214l-2.429 2.429q-0.5 0.5-1.214 0.5t-1.214-0.5l-5.25-5.25-5.25 5.25q-0.5 0.5-1.214 0.5t-1.214-0.5l-2.429-2.429q-0.5-0.5-0.5-1.214t0.5-1.214l5.25-5.25-5.25-5.25q-0.5-0.5-0.5-1.214t0.5-1.214l2.429-2.429q0.5-0.5 1.214-0.5t1.214 0.5l5.25 5.25 5.25-5.25q0.5-0.5 1.214-0.5t1.214 0.5l2.429 2.429q0.5 0.5 0.5 1.214t-0.5 1.214l-5.25 5.25 5.25 5.25q0.5 0.5 0.5 1.214z"></path>
</symbol>
<symbol id="icon-angle-down" viewBox="0 0 21 32">
<path class="path1" d="M19.196 13.143q0 0.232-0.179 0.411l-8.321 8.321q-0.179 0.179-0.411 0.179t-0.411-0.179l-8.321-8.321q-0.179-0.179-0.179-0.411t0.179-0.411l0.893-0.893q0.179-0.179 0.411-0.179t0.411 0.179l7.018 7.018 7.018-7.018q0.179-0.179 0.411-0.179t0.411 0.179l0.893 0.893q0.179 0.179 0.179 0.411z"></path>
</symbol>
<symbol id="icon-folder-open" viewBox="0 0 34 32">
<path class="path1" d="M33.554 17q0 0.554-0.554 1.179l-6 7.071q-0.768 0.911-2.152 1.545t-2.563 0.634h-19.429q-0.607 0-1.080-0.232t-0.473-0.768q0-0.554 0.554-1.179l6-7.071q0.768-0.911 2.152-1.545t2.563-0.634h19.429q0.607 0 1.080 0.232t0.473 0.768zM27.429 10.857v2.857h-14.857q-1.679 0-3.518 0.848t-2.929 2.134l-6.107 7.179q0-0.071-0.009-0.223t-0.009-0.223v-17.143q0-1.643 1.179-2.821t2.821-1.179h5.714q1.643 0 2.821 1.179t1.179 2.821v0.571h9.714q1.643 0 2.821 1.179t1.179 2.821z"></path>
</symbol>
<symbol id="icon-twitter" viewBox="0 0 30 32">
<path class="path1" d="M28.929 7.286q-1.196 1.75-2.893 2.982 0.018 0.25 0.018 0.75 0 2.321-0.679 4.634t-2.063 4.437-3.295 3.759-4.607 2.607-5.768 0.973q-4.839 0-8.857-2.589 0.625 0.071 1.393 0.071 4.018 0 7.161-2.464-1.875-0.036-3.357-1.152t-2.036-2.848q0.589 0.089 1.089 0.089 0.768 0 1.518-0.196-2-0.411-3.313-1.991t-1.313-3.67v-0.071q1.214 0.679 2.607 0.732-1.179-0.786-1.875-2.054t-0.696-2.75q0-1.571 0.786-2.911 2.161 2.661 5.259 4.259t6.634 1.777q-0.143-0.679-0.143-1.321 0-2.393 1.688-4.080t4.080-1.688q2.5 0 4.214 1.821 1.946-0.375 3.661-1.393-0.661 2.054-2.536 3.179 1.661-0.179 3.321-0.893z"></path>
</symbol>
<symbol id="icon-facebook" viewBox="0 0 19 32">
<path class="path1" d="M17.125 0.214v4.714h-2.804q-1.536 0-2.071 0.643t-0.536 1.929v3.375h5.232l-0.696 5.286h-4.536v13.554h-5.464v-13.554h-4.554v-5.286h4.554v-3.893q0-3.321 1.857-5.152t4.946-1.83q2.625 0 4.071 0.214z"></path>
</symbol>
<symbol id="icon-github" viewBox="0 0 27 32">
<path class="path1" d="M13.714 2.286q3.732 0 6.884 1.839t4.991 4.991 1.839 6.884q0 4.482-2.616 8.063t-6.759 4.955q-0.482 0.089-0.714-0.125t-0.232-0.536q0-0.054 0.009-1.366t0.009-2.402q0-1.732-0.929-2.536 1.018-0.107 1.83-0.321t1.679-0.696 1.446-1.188 0.946-1.875 0.366-2.688q0-2.125-1.411-3.679 0.661-1.625-0.143-3.643-0.5-0.161-1.446 0.196t-1.643 0.786l-0.679 0.429q-1.661-0.464-3.429-0.464t-3.429 0.464q-0.286-0.196-0.759-0.482t-1.491-0.688-1.518-0.241q-0.804 2.018-0.143 3.643-1.411 1.554-1.411 3.679 0 1.518 0.366 2.679t0.938 1.875 1.438 1.196 1.679 0.696 1.83 0.321q-0.696 0.643-0.875 1.839-0.375 0.179-0.804 0.268t-1.018 0.089-1.17-0.384-0.991-1.116q-0.339-0.571-0.866-0.929t-0.884-0.429l-0.357-0.054q-0.375 0-0.518 0.080t-0.089 0.205 0.161 0.25 0.232 0.214l0.125 0.089q0.393 0.179 0.777 0.679t0.563 0.911l0.179 0.411q0.232 0.679 0.786 1.098t1.196 0.536 1.241 0.125 0.991-0.063l0.411-0.071q0 0.679 0.009 1.58t0.009 0.973q0 0.321-0.232 0.536t-0.714 0.125q-4.143-1.375-6.759-4.955t-2.616-8.063q0-3.732 1.839-6.884t4.991-4.991 6.884-1.839zM5.196 21.982q0.054-0.125-0.125-0.214-0.179-0.054-0.232 0.036-0.054 0.125 0.125 0.214 0.161 0.107 0.232-0.036zM5.75 22.589q0.125-0.089-0.036-0.286-0.179-0.161-0.286-0.054-0.125 0.089 0.036 0.286 0.179 0.179 0.286 0.054zM6.286 23.393q0.161-0.125 0-0.339-0.143-0.232-0.304-0.107-0.161 0.089 0 0.321t0.304 0.125zM7.036 24.143q0.143-0.143-0.071-0.339-0.214-0.214-0.357-0.054-0.161 0.143 0.071 0.339 0.214 0.214 0.357 0.054zM8.054 24.589q0.054-0.196-0.232-0.286-0.268-0.071-0.339 0.125t0.232 0.268q0.268 0.107 0.339-0.107zM9.179 24.679q0-0.232-0.304-0.196-0.286 0-0.286 0.196 0 0.232 0.304 0.196 0.286 0 0.286-0.196zM10.214 24.5q-0.036-0.196-0.321-0.161-0.286 0.054-0.25 0.268t0.321 0.143 0.25-0.25z"></path>
</symbol>
<symbol id="icon-bars" viewBox="0 0 27 32">
<path class="path1" d="M27.429 24v2.286q0 0.464-0.339 0.804t-0.804 0.339h-25.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h25.143q0.464 0 0.804 0.339t0.339 0.804zM27.429 14.857v2.286q0 0.464-0.339 0.804t-0.804 0.339h-25.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h25.143q0.464 0 0.804 0.339t0.339 0.804zM27.429 5.714v2.286q0 0.464-0.339 0.804t-0.804 0.339h-25.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h25.143q0.464 0 0.804 0.339t0.339 0.804z"></path>
</symbol>
<symbol id="icon-google-plus" viewBox="0 0 41 32">
<path class="path1" d="M25.661 16.304q0 3.714-1.554 6.616t-4.429 4.536-6.589 1.634q-2.661 0-5.089-1.036t-4.179-2.786-2.786-4.179-1.036-5.089 1.036-5.089 2.786-4.179 4.179-2.786 5.089-1.036q5.107 0 8.768 3.429l-3.554 3.411q-2.089-2.018-5.214-2.018-2.196 0-4.063 1.107t-2.955 3.009-1.089 4.152 1.089 4.152 2.955 3.009 4.063 1.107q1.482 0 2.723-0.411t2.045-1.027 1.402-1.402 0.875-1.482 0.384-1.321h-7.429v-4.5h12.357q0.214 1.125 0.214 2.179zM41.143 14.125v3.75h-3.732v3.732h-3.75v-3.732h-3.732v-3.75h3.732v-3.732h3.75v3.732h3.732z"></path>
</symbol>
<symbol id="icon-linkedin" viewBox="0 0 27 32">
<path class="path1" d="M6.232 11.161v17.696h-5.893v-17.696h5.893zM6.607 5.696q0.018 1.304-0.902 2.179t-2.42 0.875h-0.036q-1.464 0-2.357-0.875t-0.893-2.179q0-1.321 0.92-2.188t2.402-0.866 2.375 0.866 0.911 2.188zM27.429 18.714v10.143h-5.875v-9.464q0-1.875-0.723-2.938t-2.259-1.063q-1.125 0-1.884 0.616t-1.134 1.527q-0.196 0.536-0.196 1.446v9.875h-5.875q0.036-7.125 0.036-11.554t-0.018-5.286l-0.018-0.857h5.875v2.571h-0.036q0.357-0.571 0.732-1t1.009-0.929 1.554-0.777 2.045-0.277q3.054 0 4.911 2.027t1.857 5.938z"></path>
</symbol>
<symbol id="icon-quote-right" viewBox="0 0 30 32">
<path class="path1" d="M13.714 5.714v12.571q0 1.857-0.723 3.545t-1.955 2.92-2.92 1.955-3.545 0.723h-1.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h1.143q1.893 0 3.232-1.339t1.339-3.232v-0.571q0-0.714-0.5-1.214t-1.214-0.5h-4q-1.429 0-2.429-1t-1-2.429v-6.857q0-1.429 1-2.429t2.429-1h6.857q1.429 0 2.429 1t1 2.429zM29.714 5.714v12.571q0 1.857-0.723 3.545t-1.955 2.92-2.92 1.955-3.545 0.723h-1.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h1.143q1.893 0 3.232-1.339t1.339-3.232v-0.571q0-0.714-0.5-1.214t-1.214-0.5h-4q-1.429 0-2.429-1t-1-2.429v-6.857q0-1.429 1-2.429t2.429-1h6.857q1.429 0 2.429 1t1 2.429z"></path>
</symbol>
<symbol id="icon-mail-reply" viewBox="0 0 32 32">
<path class="path1" d="M32 20q0 2.964-2.268 8.054-0.054 0.125-0.188 0.429t-0.241 0.536-0.232 0.393q-0.214 0.304-0.5 0.304-0.268 0-0.42-0.179t-0.152-0.446q0-0.161 0.045-0.473t0.045-0.42q0.089-1.214 0.089-2.196 0-1.804-0.313-3.232t-0.866-2.473-1.429-1.804-1.884-1.241-2.375-0.759-2.75-0.384-3.134-0.107h-4v4.571q0 0.464-0.339 0.804t-0.804 0.339-0.804-0.339l-9.143-9.143q-0.339-0.339-0.339-0.804t0.339-0.804l9.143-9.143q0.339-0.339 0.804-0.339t0.804 0.339 0.339 0.804v4.571h4q12.732 0 15.625 7.196 0.946 2.393 0.946 5.946z"></path>
</symbol>
<symbol id="icon-youtube" viewBox="0 0 27 32">
<path class="path1" d="M17.339 22.214v3.768q0 1.196-0.696 1.196-0.411 0-0.804-0.393v-5.375q0.393-0.393 0.804-0.393 0.696 0 0.696 1.196zM23.375 22.232v0.821h-1.607v-0.821q0-1.214 0.804-1.214t0.804 1.214zM6.125 18.339h1.911v-1.679h-5.571v1.679h1.875v10.161h1.786v-10.161zM11.268 28.5h1.589v-8.821h-1.589v6.75q-0.536 0.75-1.018 0.75-0.321 0-0.375-0.375-0.018-0.054-0.018-0.625v-6.5h-1.589v6.982q0 0.875 0.143 1.304 0.214 0.661 1.036 0.661 0.857 0 1.821-1.089v0.964zM18.929 25.857v-3.518q0-1.304-0.161-1.768-0.304-1-1.268-1-0.893 0-1.661 0.964v-3.875h-1.589v11.839h1.589v-0.857q0.804 0.982 1.661 0.982 0.964 0 1.268-0.982 0.161-0.482 0.161-1.786zM24.964 25.679v-0.232h-1.625q0 0.911-0.036 1.089-0.125 0.643-0.714 0.643-0.821 0-0.821-1.232v-1.554h3.196v-1.839q0-1.411-0.482-2.071-0.696-0.911-1.893-0.911-1.214 0-1.911 0.911-0.5 0.661-0.5 2.071v3.089q0 1.411 0.518 2.071 0.696 0.911 1.929 0.911 1.286 0 1.929-0.946 0.321-0.482 0.375-0.964 0.036-0.161 0.036-1.036zM14.107 9.375v-3.75q0-1.232-0.768-1.232t-0.768 1.232v3.75q0 1.25 0.768 1.25t0.768-1.25zM26.946 22.786q0 4.179-0.464 6.25-0.25 1.054-1.036 1.768t-1.821 0.821q-3.286 0.375-9.911 0.375t-9.911-0.375q-1.036-0.107-1.83-0.821t-1.027-1.768q-0.464-2-0.464-6.25 0-4.179 0.464-6.25 0.25-1.054 1.036-1.768t1.839-0.839q3.268-0.357 9.893-0.357t9.911 0.357q1.036 0.125 1.83 0.839t1.027 1.768q0.464 2 0.464 6.25zM9.125 0h1.821l-2.161 7.125v4.839h-1.786v-4.839q-0.25-1.321-1.089-3.786-0.661-1.839-1.161-3.339h1.893l1.268 4.696zM15.732 5.946v3.125q0 1.446-0.5 2.107-0.661 0.911-1.893 0.911-1.196 0-1.875-0.911-0.5-0.679-0.5-2.107v-3.125q0-1.429 0.5-2.089 0.679-0.911 1.875-0.911 1.232 0 1.893 0.911 0.5 0.661 0.5 2.089zM21.714 3.054v8.911h-1.625v-0.982q-0.946 1.107-1.839 1.107-0.821 0-1.054-0.661-0.143-0.429-0.143-1.339v-7.036h1.625v6.554q0 0.589 0.018 0.625 0.054 0.393 0.375 0.393 0.482 0 1.018-0.768v-6.804h1.625z"></path>
</symbol>
<symbol id="icon-dropbox" viewBox="0 0 32 32">
<path class="path1" d="M7.179 12.625l8.821 5.446-6.107 5.089-8.75-5.696zM24.786 22.536v1.929l-8.75 5.232v0.018l-0.018-0.018-0.018 0.018v-0.018l-8.732-5.232v-1.929l2.625 1.714 6.107-5.071v-0.036l0.018 0.018 0.018-0.018v0.036l6.125 5.071zM9.893 2.107l6.107 5.089-8.821 5.429-6.036-4.821zM24.821 12.625l6.036 4.839-8.732 5.696-6.125-5.089zM22.125 2.107l8.732 5.696-6.036 4.821-8.821-5.429z"></path>
</symbol>
<symbol id="icon-instagram" viewBox="0 0 27 32">
<path class="path1" d="M18.286 16q0-1.893-1.339-3.232t-3.232-1.339-3.232 1.339-1.339 3.232 1.339 3.232 3.232 1.339 3.232-1.339 1.339-3.232zM20.75 16q0 2.929-2.054 4.982t-4.982 2.054-4.982-2.054-2.054-4.982 2.054-4.982 4.982-2.054 4.982 2.054 2.054 4.982zM22.679 8.679q0 0.679-0.482 1.161t-1.161 0.482-1.161-0.482-0.482-1.161 0.482-1.161 1.161-0.482 1.161 0.482 0.482 1.161zM13.714 4.75q-0.125 0-1.366-0.009t-1.884 0-1.723 0.054-1.839 0.179-1.277 0.33q-0.893 0.357-1.571 1.036t-1.036 1.571q-0.196 0.518-0.33 1.277t-0.179 1.839-0.054 1.723 0 1.884 0.009 1.366-0.009 1.366 0 1.884 0.054 1.723 0.179 1.839 0.33 1.277q0.357 0.893 1.036 1.571t1.571 1.036q0.518 0.196 1.277 0.33t1.839 0.179 1.723 0.054 1.884 0 1.366-0.009 1.366 0.009 1.884 0 1.723-0.054 1.839-0.179 1.277-0.33q0.893-0.357 1.571-1.036t1.036-1.571q0.196-0.518 0.33-1.277t0.179-1.839 0.054-1.723 0-1.884-0.009-1.366 0.009-1.366 0-1.884-0.054-1.723-0.179-1.839-0.33-1.277q-0.357-0.893-1.036-1.571t-1.571-1.036q-0.518-0.196-1.277-0.33t-1.839-0.179-1.723-0.054-1.884 0-1.366 0.009zM27.429 16q0 4.089-0.089 5.661-0.179 3.714-2.214 5.75t-5.75 2.214q-1.571 0.089-5.661 0.089t-5.661-0.089q-3.714-0.179-5.75-2.214t-2.214-5.75q-0.089-1.571-0.089-5.661t0.089-5.661q0.179-3.714 2.214-5.75t5.75-2.214q1.571-0.089 5.661-0.089t5.661 0.089q3.714 0.179 5.75 2.214t2.214 5.75q0.089 1.571 0.089 5.661z"></path>
</symbol>
<symbol id="icon-flickr" viewBox="0 0 27 32">
<path class="path1" d="M22.286 2.286q2.125 0 3.634 1.509t1.509 3.634v17.143q0 2.125-1.509 3.634t-3.634 1.509h-17.143q-2.125 0-3.634-1.509t-1.509-3.634v-17.143q0-2.125 1.509-3.634t3.634-1.509h17.143zM12.464 16q0-1.571-1.107-2.679t-2.679-1.107-2.679 1.107-1.107 2.679 1.107 2.679 2.679 1.107 2.679-1.107 1.107-2.679zM22.536 16q0-1.571-1.107-2.679t-2.679-1.107-2.679 1.107-1.107 2.679 1.107 2.679 2.679 1.107 2.679-1.107 1.107-2.679z"></path>
</symbol>
<symbol id="icon-tumblr" viewBox="0 0 19 32">
<path class="path1" d="M16.857 23.732l1.429 4.232q-0.411 0.625-1.982 1.179t-3.161 0.571q-1.857 0.036-3.402-0.464t-2.545-1.321-1.696-1.893-0.991-2.143-0.295-2.107v-9.714h-3v-3.839q1.286-0.464 2.304-1.241t1.625-1.607 1.036-1.821 0.607-1.768 0.268-1.58q0.018-0.089 0.080-0.152t0.134-0.063h4.357v7.571h5.946v4.5h-5.964v9.25q0 0.536 0.116 1t0.402 0.938 0.884 0.741 1.455 0.25q1.393-0.036 2.393-0.518z"></path>
</symbol>
<symbol id="icon-dockerhub" viewBox="0 0 24 28">
<path class="path1" d="M1.597 10.257h2.911v2.83H1.597v-2.83zm3.573 0h2.91v2.83H5.17v-2.83zm0-3.627h2.91v2.829H5.17V6.63zm3.57 3.627h2.912v2.83H8.74v-2.83zm0-3.627h2.912v2.829H8.74V6.63zm3.573 3.627h2.911v2.83h-2.911v-2.83zm0-3.627h2.911v2.829h-2.911V6.63zm3.572 3.627h2.911v2.83h-2.911v-2.83zM12.313 3h2.911v2.83h-2.911V3zm-6.65 14.173c-.449 0-.812.354-.812.788 0 .435.364.788.812.788.447 0 .811-.353.811-.788 0-.434-.363-.788-.811-.788"></path>
<path class="path2" d="M28.172 11.721c-.978-.549-2.278-.624-3.388-.306-.136-1.146-.91-2.149-1.83-2.869l-.366-.286-.307.345c-.618.692-.8 1.845-.718 2.73.063.651.273 1.312.685 1.834-.313.183-.668.328-.985.434-.646.212-1.347.33-2.028.33H.083l-.042.429c-.137 1.432.065 2.866.674 4.173l.262.519.03.048c1.8 2.973 4.963 4.225 8.41 4.225 6.672 0 12.174-2.896 14.702-9.015 1.689.085 3.417-.4 4.243-1.968l.211-.4-.401-.223zM5.664 19.458c-.85 0-1.542-.671-1.542-1.497 0-.825.691-1.498 1.541-1.498.849 0 1.54.672 1.54 1.497s-.69 1.498-1.539 1.498z"></path>
</symbol>
<symbol id="icon-dribbble" viewBox="0 0 27 32">
<path class="path1" d="M18.286 26.786q-0.75-4.304-2.5-8.893h-0.036l-0.036 0.018q-0.286 0.107-0.768 0.295t-1.804 0.875-2.446 1.464-2.339 2.045-1.839 2.643l-0.268-0.196q3.286 2.679 7.464 2.679 2.357 0 4.571-0.929zM14.982 15.946q-0.375-0.875-0.946-1.982-5.554 1.661-12.018 1.661-0.018 0.125-0.018 0.375 0 2.214 0.786 4.223t2.214 3.598q0.893-1.589 2.205-2.973t2.545-2.223 2.33-1.446 1.777-0.857l0.661-0.232q0.071-0.018 0.232-0.063t0.232-0.080zM13.071 12.161q-2.143-3.804-4.357-6.75-2.464 1.161-4.179 3.321t-2.286 4.857q5.393 0 10.821-1.429zM25.286 17.857q-3.75-1.071-7.304-0.518 1.554 4.268 2.286 8.375 1.982-1.339 3.304-3.384t1.714-4.473zM10.911 4.625q-0.018 0-0.036 0.018 0.018-0.018 0.036-0.018zM21.446 7.214q-3.304-2.929-7.732-2.929-1.357 0-2.768 0.339 2.339 3.036 4.393 6.821 1.232-0.464 2.321-1.080t1.723-1.098 1.17-1.018 0.67-0.723zM25.429 15.875q-0.054-4.143-2.661-7.321l-0.018 0.018q-0.161 0.214-0.339 0.438t-0.777 0.795-1.268 1.080-1.786 1.161-2.348 1.152q0.446 0.946 0.786 1.696 0.036 0.107 0.116 0.313t0.134 0.295q0.643-0.089 1.33-0.125t1.313-0.036 1.232 0.027 1.143 0.071 1.009 0.098 0.857 0.116 0.652 0.107 0.446 0.080zM27.429 16q0 3.732-1.839 6.884t-4.991 4.991-6.884 1.839-6.884-1.839-4.991-4.991-1.839-6.884 1.839-6.884 4.991-4.991 6.884-1.839 6.884 1.839 4.991 4.991 1.839 6.884z"></path>
</symbol>
<symbol id="icon-skype" viewBox="0 0 27 32">
<path class="path1" d="M20.946 18.982q0-0.893-0.348-1.634t-0.866-1.223-1.304-0.875-1.473-0.607-1.563-0.411l-1.857-0.429q-0.536-0.125-0.786-0.188t-0.625-0.205-0.536-0.286-0.295-0.375-0.134-0.536q0-1.375 2.571-1.375 0.768 0 1.375 0.214t0.964 0.509 0.679 0.598 0.714 0.518 0.857 0.214q0.839 0 1.348-0.571t0.509-1.375q0-0.982-1-1.777t-2.536-1.205-3.25-0.411q-1.214 0-2.357 0.277t-2.134 0.839-1.589 1.554-0.598 2.295q0 1.089 0.339 1.902t1 1.348 1.429 0.866 1.839 0.58l2.607 0.643q1.607 0.393 2 0.643 0.571 0.357 0.571 1.071 0 0.696-0.714 1.152t-1.875 0.455q-0.911 0-1.634-0.286t-1.161-0.688-0.813-0.804-0.821-0.688-0.964-0.286q-0.893 0-1.348 0.536t-0.455 1.339q0 1.643 2.179 2.813t5.196 1.17q1.304 0 2.5-0.33t2.188-0.955 1.58-1.67 0.589-2.348zM27.429 22.857q0 2.839-2.009 4.848t-4.848 2.009q-2.321 0-4.179-1.429-1.375 0.286-2.679 0.286-2.554 0-4.884-0.991t-4.018-2.679-2.679-4.018-0.991-4.884q0-1.304 0.286-2.679-1.429-1.857-1.429-4.179 0-2.839 2.009-4.848t4.848-2.009q2.321 0 4.179 1.429 1.375-0.286 2.679-0.286 2.554 0 4.884 0.991t4.018 2.679 2.679 4.018 0.991 4.884q0 1.304-0.286 2.679 1.429 1.857 1.429 4.179z"></path>
</symbol>
<symbol id="icon-foursquare" viewBox="0 0 23 32">
<path class="path1" d="M17.857 7.75l0.661-3.464q0.089-0.411-0.161-0.714t-0.625-0.304h-12.714q-0.411 0-0.688 0.304t-0.277 0.661v19.661q0 0.125 0.107 0.018l5.196-6.286q0.411-0.464 0.679-0.598t0.857-0.134h4.268q0.393 0 0.661-0.259t0.321-0.527q0.429-2.321 0.661-3.411 0.071-0.375-0.205-0.714t-0.652-0.339h-5.25q-0.518 0-0.857-0.339t-0.339-0.857v-0.75q0-0.518 0.339-0.848t0.857-0.33h6.179q0.321 0 0.625-0.241t0.357-0.527zM21.911 3.786q-0.268 1.304-0.955 4.759t-1.241 6.25-0.625 3.098q-0.107 0.393-0.161 0.58t-0.25 0.58-0.438 0.589-0.688 0.375-1.036 0.179h-4.839q-0.232 0-0.393 0.179-0.143 0.161-7.607 8.821-0.393 0.446-1.045 0.509t-0.866-0.098q-0.982-0.393-0.982-1.75v-25.179q0-0.982 0.679-1.83t2.143-0.848h15.857q1.696 0 2.268 0.946t0.179 2.839zM21.911 3.786l-2.821 14.107q0.071-0.304 0.625-3.098t1.241-6.25 0.955-4.759z"></path>
</symbol>
<symbol id="icon-wordpress" viewBox="0 0 32 32">
<path class="path1" d="M2.268 16q0-2.911 1.196-5.589l6.554 17.946q-3.5-1.696-5.625-5.018t-2.125-7.339zM25.268 15.304q0 0.339-0.045 0.688t-0.179 0.884-0.205 0.786-0.313 1.054-0.313 1.036l-1.357 4.571-4.964-14.75q0.821-0.054 1.571-0.143 0.339-0.036 0.464-0.33t-0.045-0.554-0.509-0.241l-3.661 0.179q-1.339-0.018-3.607-0.179-0.214-0.018-0.366 0.089t-0.205 0.268-0.027 0.33 0.161 0.295 0.348 0.143l1.429 0.143 2.143 5.857-3 9-5-14.857q0.821-0.054 1.571-0.143 0.339-0.036 0.464-0.33t-0.045-0.554-0.509-0.241l-3.661 0.179q-0.125 0-0.411-0.009t-0.464-0.009q1.875-2.857 4.902-4.527t6.563-1.67q2.625 0 5.009 0.946t4.259 2.661h-0.179q-0.982 0-1.643 0.723t-0.661 1.705q0 0.214 0.036 0.429t0.071 0.384 0.143 0.411 0.161 0.375 0.214 0.402 0.223 0.375 0.259 0.429 0.25 0.411q1.125 1.911 1.125 3.786zM16.232 17.196l4.232 11.554q0.018 0.107 0.089 0.196-2.25 0.786-4.554 0.786-2 0-3.875-0.571zM28.036 9.411q1.696 3.107 1.696 6.589 0 3.732-1.857 6.884t-4.982 4.973l4.196-12.107q1.054-3.018 1.054-4.929 0-0.75-0.107-1.411zM16 0q3.25 0 6.214 1.268t5.107 3.411 3.411 5.107 1.268 6.214-1.268 6.214-3.411 5.107-5.107 3.411-6.214 1.268-6.214-1.268-5.107-3.411-3.411-5.107-1.268-6.214 1.268-6.214 3.411-5.107 5.107-3.411 6.214-1.268zM16 31.268q3.089 0 5.92-1.214t4.875-3.259 3.259-4.875 1.214-5.92-1.214-5.92-3.259-4.875-4.875-3.259-5.92-1.214-5.92 1.214-4.875 3.259-3.259 4.875-1.214 5.92 1.214 5.92 3.259 4.875 4.875 3.259 5.92 1.214z"></path>
</symbol>
<symbol id="icon-stumbleupon" viewBox="0 0 34 32">
<path class="path1" d="M18.964 12.714v-2.107q0-0.75-0.536-1.286t-1.286-0.536-1.286 0.536-0.536 1.286v10.929q0 3.125-2.25 5.339t-5.411 2.214q-3.179 0-5.42-2.241t-2.241-5.42v-4.75h5.857v4.679q0 0.768 0.536 1.295t1.286 0.527 1.286-0.527 0.536-1.295v-11.071q0-3.054 2.259-5.214t5.384-2.161q3.143 0 5.393 2.179t2.25 5.25v2.429l-3.482 1.036zM28.429 16.679h5.857v4.75q0 3.179-2.241 5.42t-5.42 2.241q-3.161 0-5.411-2.223t-2.25-5.366v-4.786l2.339 1.089 3.482-1.036v4.821q0 0.75 0.536 1.277t1.286 0.527 1.286-0.527 0.536-1.277v-4.911z"></path>
</symbol>
<symbol id="icon-digg" viewBox="0 0 37 32">
<path class="path1" d="M5.857 5.036h3.643v17.554h-9.5v-12.446h5.857v-5.107zM5.857 19.661v-6.589h-2.196v6.589h2.196zM10.964 10.143v12.446h3.661v-12.446h-3.661zM10.964 5.036v3.643h3.661v-3.643h-3.661zM16.089 10.143h9.518v16.821h-9.518v-2.911h5.857v-1.464h-5.857v-12.446zM21.946 19.661v-6.589h-2.196v6.589h2.196zM27.071 10.143h9.5v16.821h-9.5v-2.911h5.839v-1.464h-5.839v-12.446zM32.911 19.661v-6.589h-2.196v6.589h2.196z"></path>
</symbol>
<symbol id="icon-spotify" viewBox="0 0 27 32">
<path class="path1" d="M20.125 21.607q0-0.571-0.536-0.911-3.446-2.054-7.982-2.054-2.375 0-5.125 0.607-0.75 0.161-0.75 0.929 0 0.357 0.241 0.616t0.634 0.259q0.089 0 0.661-0.143 2.357-0.482 4.339-0.482 4.036 0 7.089 1.839 0.339 0.196 0.589 0.196 0.339 0 0.589-0.241t0.25-0.616zM21.839 17.768q0-0.714-0.625-1.089-4.232-2.518-9.786-2.518-2.732 0-5.411 0.75-0.857 0.232-0.857 1.143 0 0.446 0.313 0.759t0.759 0.313q0.125 0 0.661-0.143 2.179-0.589 4.482-0.589 4.982 0 8.714 2.214 0.429 0.232 0.679 0.232 0.446 0 0.759-0.313t0.313-0.759zM23.768 13.339q0-0.839-0.714-1.25-2.25-1.304-5.232-1.973t-6.125-0.67q-3.643 0-6.5 0.839-0.411 0.125-0.688 0.455t-0.277 0.866q0 0.554 0.366 0.929t0.92 0.375q0.196 0 0.714-0.143 2.375-0.661 5.482-0.661 2.839 0 5.527 0.607t4.527 1.696q0.375 0.214 0.714 0.214 0.518 0 0.902-0.366t0.384-0.92zM27.429 16q0 3.732-1.839 6.884t-4.991 4.991-6.884 1.839-6.884-1.839-4.991-4.991-1.839-6.884 1.839-6.884 4.991-4.991 6.884-1.839 6.884 1.839 4.991 4.991 1.839 6.884z"></path>
</symbol>
<symbol id="icon-soundcloud" viewBox="0 0 41 32">
<path class="path1" d="M14 24.5l0.286-4.304-0.286-9.339q-0.018-0.179-0.134-0.304t-0.295-0.125q-0.161 0-0.286 0.125t-0.125 0.304l-0.25 9.339 0.25 4.304q0.018 0.179 0.134 0.295t0.277 0.116q0.393 0 0.429-0.411zM19.286 23.982l0.196-3.768-0.214-10.464q0-0.286-0.232-0.429-0.143-0.089-0.286-0.089t-0.286 0.089q-0.232 0.143-0.232 0.429l-0.018 0.107-0.179 10.339q0 0.018 0.196 4.214v0.018q0 0.179 0.107 0.304 0.161 0.196 0.411 0.196 0.196 0 0.357-0.161 0.161-0.125 0.161-0.357zM0.625 17.911l0.357 2.286-0.357 2.25q-0.036 0.161-0.161 0.161t-0.161-0.161l-0.304-2.25 0.304-2.286q0.036-0.161 0.161-0.161t0.161 0.161zM2.161 16.5l0.464 3.696-0.464 3.625q-0.036 0.161-0.179 0.161-0.161 0-0.161-0.179l-0.411-3.607 0.411-3.696q0-0.161 0.161-0.161 0.143 0 0.179 0.161zM3.804 15.821l0.446 4.375-0.446 4.232q0 0.196-0.196 0.196-0.179 0-0.214-0.196l-0.375-4.232 0.375-4.375q0.036-0.214 0.214-0.214 0.196 0 0.196 0.214zM5.482 15.696l0.411 4.5-0.411 4.357q-0.036 0.232-0.25 0.232-0.232 0-0.232-0.232l-0.375-4.357 0.375-4.5q0-0.232 0.232-0.232 0.214 0 0.25 0.232zM7.161 16.018l0.375 4.179-0.375 4.393q-0.036 0.286-0.286 0.286-0.107 0-0.188-0.080t-0.080-0.205l-0.357-4.393 0.357-4.179q0-0.107 0.080-0.188t0.188-0.080q0.25 0 0.286 0.268zM8.839 13.411l0.375 6.786-0.375 4.393q0 0.125-0.089 0.223t-0.214 0.098q-0.286 0-0.321-0.321l-0.321-4.393 0.321-6.786q0.036-0.321 0.321-0.321 0.125 0 0.214 0.098t0.089 0.223zM10.518 11.875l0.339 8.357-0.339 4.357q0 0.143-0.098 0.241t-0.241 0.098q-0.321 0-0.357-0.339l-0.286-4.357 0.286-8.357q0.036-0.339 0.357-0.339 0.143 0 0.241 0.098t0.098 0.241zM12.268 11.161l0.321 9.036-0.321 4.321q-0.036 0.375-0.393 0.375-0.339 0-0.375-0.375l-0.286-4.321 0.286-9.036q0-0.161 0.116-0.277t0.259-0.116q0.161 0 0.268 0.116t0.125 0.277zM19.268 24.411v0 0zM15.732 11.089l0.268 9.107-0.268 4.268q0 0.179-0.134 0.313t-0.313 0.134-0.304-0.125-0.143-0.321l-0.25-4.268 0.25-9.107q0-0.196 0.134-0.321t0.313-0.125 0.313 0.125 0.134 0.321zM17.5 11.429l0.25 8.786-0.25 4.214q0 0.196-0.143 0.339t-0.339 0.143-0.339-0.143-0.161-0.339l-0.214-4.214 0.214-8.786q0.018-0.214 0.161-0.357t0.339-0.143 0.33 0.143 0.152 0.357zM21.286 20.214l-0.25 4.125q0 0.232-0.161 0.393t-0.393 0.161-0.393-0.161-0.179-0.393l-0.107-2.036-0.107-2.089 0.214-11.357v-0.054q0.036-0.268 0.214-0.429 0.161-0.125 0.357-0.125 0.143 0 0.268 0.089 0.25 0.143 0.286 0.464zM41.143 19.875q0 2.089-1.482 3.563t-3.571 1.473h-14.036q-0.232-0.036-0.393-0.196t-0.161-0.393v-16.054q0-0.411 0.5-0.589 1.518-0.607 3.232-0.607 3.482 0 6.036 2.348t2.857 5.777q0.946-0.393 1.964-0.393 2.089 0 3.571 1.482t1.482 3.589z"></path>
</symbol>
<symbol id="icon-codepen" viewBox="0 0 32 32">
<path class="path1" d="M3.857 20.875l10.768 7.179v-6.411l-5.964-3.982zM2.75 18.304l3.446-2.304-3.446-2.304v4.607zM17.375 28.054l10.768-7.179-4.804-3.214-5.964 3.982v6.411zM16 19.25l4.857-3.25-4.857-3.25-4.857 3.25zM8.661 14.339l5.964-3.982v-6.411l-10.768 7.179zM25.804 16l3.446 2.304v-4.607zM23.339 14.339l4.804-3.214-10.768-7.179v6.411zM32 11.125v9.75q0 0.732-0.607 1.143l-14.625 9.75q-0.375 0.232-0.768 0.232t-0.768-0.232l-14.625-9.75q-0.607-0.411-0.607-1.143v-9.75q0-0.732 0.607-1.143l14.625-9.75q0.375-0.232 0.768-0.232t0.768 0.232l14.625 9.75q0.607 0.411 0.607 1.143z"></path>
</symbol>
<symbol id="icon-twitch" viewBox="0 0 32 32">
<path class="path1" d="M16 7.75v7.75h-2.589v-7.75h2.589zM23.107 7.75v7.75h-2.589v-7.75h2.589zM23.107 21.321l4.518-4.536v-14.196h-21.321v18.732h5.821v3.875l3.875-3.875h7.107zM30.214 0v18.089l-7.75 7.75h-5.821l-3.875 3.875h-3.875v-3.875h-7.107v-20.679l1.946-5.161h26.482z"></path>
</symbol>
<symbol id="icon-meanpath" viewBox="0 0 27 32">
<path class="path1" d="M23.411 15.036v2.036q0 0.429-0.241 0.679t-0.67 0.25h-3.607q-0.429 0-0.679-0.25t-0.25-0.679v-2.036q0-0.429 0.25-0.679t0.679-0.25h3.607q0.429 0 0.67 0.25t0.241 0.679zM14.661 19.143v-4.464q0-0.946-0.58-1.527t-1.527-0.58h-2.375q-1.214 0-1.714 0.929-0.5-0.929-1.714-0.929h-2.321q-0.946 0-1.527 0.58t-0.58 1.527v4.464q0 0.393 0.375 0.393h0.982q0.393 0 0.393-0.393v-4.107q0-0.429 0.241-0.679t0.688-0.25h1.679q0.429 0 0.679 0.25t0.25 0.679v4.107q0 0.393 0.375 0.393h0.964q0.393 0 0.393-0.393v-4.107q0-0.429 0.25-0.679t0.679-0.25h1.732q0.429 0 0.67 0.25t0.241 0.679v4.107q0 0.393 0.393 0.393h0.982q0.375 0 0.375-0.393zM25.179 17.429v-2.75q0-0.946-0.589-1.527t-1.536-0.58h-4.714q-0.946 0-1.536 0.58t-0.589 1.527v7.321q0 0.375 0.393 0.375h0.982q0.375 0 0.375-0.375v-3.214q0.554 0.75 1.679 0.75h3.411q0.946 0 1.536-0.58t0.589-1.527zM27.429 6.429v19.143q0 1.714-1.214 2.929t-2.929 1.214h-19.143q-1.714 0-2.929-1.214t-1.214-2.929v-19.143q0-1.714 1.214-2.929t2.929-1.214h19.143q1.714 0 2.929 1.214t1.214 2.929z"></path>
</symbol>
<symbol id="icon-pinterest-p" viewBox="0 0 23 32">
<path class="path1" d="M0 10.661q0-1.929 0.67-3.634t1.848-2.973 2.714-2.196 3.304-1.393 3.607-0.464q2.821 0 5.25 1.188t3.946 3.455 1.518 5.125q0 1.714-0.339 3.357t-1.071 3.161-1.786 2.67-2.589 1.839-3.375 0.688q-1.214 0-2.411-0.571t-1.714-1.571q-0.179 0.696-0.5 2.009t-0.42 1.696-0.366 1.268-0.464 1.268-0.571 1.116-0.821 1.384-1.107 1.545l-0.25 0.089-0.161-0.179q-0.268-2.804-0.268-3.357 0-1.643 0.384-3.688t1.188-5.134 0.929-3.625q-0.571-1.161-0.571-3.018 0-1.482 0.929-2.786t2.357-1.304q1.089 0 1.696 0.723t0.607 1.83q0 1.179-0.786 3.411t-0.786 3.339q0 1.125 0.804 1.866t1.946 0.741q0.982 0 1.821-0.446t1.402-1.214 1-1.696 0.679-1.973 0.357-1.982 0.116-1.777q0-3.089-1.955-4.813t-5.098-1.723q-3.571 0-5.964 2.313t-2.393 5.866q0 0.786 0.223 1.518t0.482 1.161 0.482 0.813 0.223 0.545q0 0.5-0.268 1.304t-0.661 0.804q-0.036 0-0.304-0.054-0.911-0.268-1.616-1t-1.089-1.688-0.58-1.929-0.196-1.902z"></path>
</symbol>
<symbol id="icon-periscope" viewBox="0 0 24 28">
<path class="path1" d="M12.285,1C6.696,1,2.277,5.643,2.277,11.243c0,5.851,7.77,14.578,10.007,14.578c1.959,0,9.729-8.728,9.729-14.578 C22.015,5.643,17.596,1,12.285,1z M12.317,16.551c-3.473,0-6.152-2.611-6.152-5.664c0-1.292,0.39-2.472,1.065-3.438 c0.206,1.084,1.18,1.906,2.352,1.906c1.322,0,2.393-1.043,2.393-2.333c0-0.832-0.447-1.561-1.119-1.975 c0.467-0.105,0.955-0.161,1.46-0.161c3.133,0,5.81,2.611,5.81,5.998C18.126,13.94,15.449,16.551,12.317,16.551z"></path>
</symbol>
<symbol id="icon-get-pocket" viewBox="0 0 31 32">
<path class="path1" d="M27.946 2.286q1.161 0 1.964 0.813t0.804 1.973v9.268q0 3.143-1.214 6t-3.259 4.911-4.893 3.259-5.973 1.205q-3.143 0-5.991-1.205t-4.902-3.259-3.268-4.911-1.214-6v-9.268q0-1.143 0.821-1.964t1.964-0.821h25.161zM15.375 21.286q0.839 0 1.464-0.589l7.214-6.929q0.661-0.625 0.661-1.518 0-0.875-0.616-1.491t-1.491-0.616q-0.839 0-1.464 0.589l-5.768 5.536-5.768-5.536q-0.625-0.589-1.446-0.589-0.875 0-1.491 0.616t-0.616 1.491q0 0.911 0.643 1.518l7.232 6.929q0.589 0.589 1.446 0.589z"></path>
</symbol>
<symbol id="icon-vimeo" viewBox="0 0 32 32">
<path class="path1" d="M30.518 9.25q-0.179 4.214-5.929 11.625-5.946 7.696-10.036 7.696-2.536 0-4.286-4.696-0.786-2.857-2.357-8.607-1.286-4.679-2.804-4.679-0.321 0-2.268 1.357l-1.375-1.75q0.429-0.375 1.929-1.723t2.321-2.063q2.786-2.464 4.304-2.607 1.696-0.161 2.732 0.991t1.446 3.634q0.786 5.125 1.179 6.661 0.982 4.446 2.143 4.446 0.911 0 2.75-2.875 1.804-2.875 1.946-4.393 0.232-2.482-1.946-2.482-1.018 0-2.161 0.464 2.143-7.018 8.196-6.821 4.482 0.143 4.214 5.821z"></path>
</symbol>
<symbol id="icon-reddit-alien" viewBox="0 0 32 32">
<path class="path1" d="M32 15.107q0 1.036-0.527 1.884t-1.42 1.295q0.214 0.821 0.214 1.714 0 2.768-1.902 5.125t-5.188 3.723-7.143 1.366-7.134-1.366-5.179-3.723-1.902-5.125q0-0.839 0.196-1.679-0.911-0.446-1.464-1.313t-0.554-1.902q0-1.464 1.036-2.509t2.518-1.045q1.518 0 2.589 1.125 3.893-2.714 9.196-2.893l2.071-9.304q0.054-0.232 0.268-0.375t0.464-0.089l6.589 1.446q0.321-0.661 0.964-1.063t1.411-0.402q1.107 0 1.893 0.777t0.786 1.884-0.786 1.893-1.893 0.786-1.884-0.777-0.777-1.884l-5.964-1.321-1.857 8.429q5.357 0.161 9.268 2.857 1.036-1.089 2.554-1.089 1.482 0 2.518 1.045t1.036 2.509zM7.464 18.661q0 1.107 0.777 1.893t1.884 0.786 1.893-0.786 0.786-1.893-0.786-1.884-1.893-0.777q-1.089 0-1.875 0.786t-0.786 1.875zM21.929 25q0.196-0.196 0.196-0.464t-0.196-0.464q-0.179-0.179-0.446-0.179t-0.464 0.179q-0.732 0.75-2.161 1.107t-2.857 0.357-2.857-0.357-2.161-1.107q-0.196-0.179-0.464-0.179t-0.446 0.179q-0.196 0.179-0.196 0.455t0.196 0.473q0.768 0.768 2.116 1.214t2.188 0.527 1.625 0.080 1.625-0.080 2.188-0.527 2.116-1.214zM21.875 21.339q1.107 0 1.884-0.786t0.777-1.893q0-1.089-0.786-1.875t-1.875-0.786q-1.107 0-1.893 0.777t-0.786 1.884 0.786 1.893 1.893 0.786z"></path>
</symbol>
<symbol id="icon-whatsapp" viewBox="0 0 32 32">
<path d="M15.968 2.003a14.03 13.978 0 0 0-14.03 13.978 14.03 13.978 0 0 0 2.132 7.391L1.938 29.96l6.745-2.052a14.03 13.978 0 0 0 7.285 2.052 14.03 13.978 0 0 0 14.03-13.978 14.03 13.978 0 0 0-14.03-13.978z" stroke-width=".2000562"/>
<path d="M10.454 8.236a2.57 3.401 51.533 0 0-1.475 3.184v.015c.01 2.04 4.045 10.076 10.017 12.688l.017-.013a2.57 3.401 51.533 0 0 3.454-.706 2.57 3.401 51.533 0 0 1.064-4.129 2.57 3.401 51.533 0 0-4.262.103 2.57 3.401 51.533 0 0-.505.473c-1.346-.639-2.952-1.463-4.168-2.98-.771-.962-1.257-2.732-1.549-4.206a2.57 3.401 51.533 0 0 .605-.403 2.57 3.401 51.533 0 0 1.064-4.129 2.57 3.401 51.533 0 0-4.262.103z" stroke-width=".372"/>
</symbol>
<symbol id="icon-telegram" viewBox="0 0 32 32">
<path d="M30.8,2.2L0.6,13.9c-0.8,0.3-0.7,1.3,0,1.6l7.4,2.8l2.9,9.2c0.2,0.6,0.9,0.8,1.4,0.4l4.1-3.4 c0.4-0.4,1-0.4,1.5,0l7.4,5.4c0.5,0.4,1.2,0.1,1.4-0.5L32,3.2C32.1,2.5,31.4,1.9,30.8,2.2z M25,8.3l-11.9,11 c-0.4,0.4-0.7,0.9-0.8,1.5l-0.4,3c-0.1,0.4-0.6,0.4-0.7,0.1l-1.6-5.5c-0.2-0.6,0.1-1.3,0.6-1.6l14.4-8.9C25,7.7,25.3,8.1,25,8.3z"/>
</symbol>
<symbol id="icon-hashtag" viewBox="0 0 32 32">
<path class="path1" d="M17.696 18.286l1.143-4.571h-4.536l-1.143 4.571h4.536zM31.411 9.286l-1 4q-0.125 0.429-0.554 0.429h-5.839l-1.143 4.571h5.554q0.268 0 0.446 0.214 0.179 0.25 0.107 0.5l-1 4q-0.089 0.429-0.554 0.429h-5.839l-1.446 5.857q-0.125 0.429-0.554 0.429h-4q-0.286 0-0.464-0.214-0.161-0.214-0.107-0.5l1.393-5.571h-4.536l-1.446 5.857q-0.125 0.429-0.554 0.429h-4.018q-0.268 0-0.446-0.214-0.161-0.214-0.107-0.5l1.393-5.571h-5.554q-0.268 0-0.446-0.214-0.161-0.214-0.107-0.5l1-4q0.125-0.429 0.554-0.429h5.839l1.143-4.571h-5.554q-0.268 0-0.446-0.214-0.179-0.25-0.107-0.5l1-4q0.089-0.429 0.554-0.429h5.839l1.446-5.857q0.125-0.429 0.571-0.429h4q0.268 0 0.446 0.214 0.161 0.214 0.107 0.5l-1.393 5.571h4.536l1.446-5.857q0.125-0.429 0.571-0.429h4q0.268 0 0.446 0.214 0.161 0.214 0.107 0.5l-1.393 5.571h5.554q0.268 0 0.446 0.214 0.161 0.214 0.107 0.5z"></path>
</symbol>
<symbol id="icon-chain" viewBox="0 0 30 32">
<path class="path1" d="M26 21.714q0-0.714-0.5-1.214l-3.714-3.714q-0.5-0.5-1.214-0.5-0.75 0-1.286 0.571 0.054 0.054 0.339 0.33t0.384 0.384 0.268 0.339 0.232 0.455 0.063 0.491q0 0.714-0.5 1.214t-1.214 0.5q-0.268 0-0.491-0.063t-0.455-0.232-0.339-0.268-0.384-0.384-0.33-0.339q-0.589 0.554-0.589 1.304 0 0.714 0.5 1.214l3.679 3.696q0.482 0.482 1.214 0.482 0.714 0 1.214-0.464l2.625-2.607q0.5-0.5 0.5-1.196zM13.446 9.125q0-0.714-0.5-1.214l-3.679-3.696q-0.5-0.5-1.214-0.5-0.696 0-1.214 0.482l-2.625 2.607q-0.5 0.5-0.5 1.196 0 0.714 0.5 1.214l3.714 3.714q0.482 0.482 1.214 0.482 0.75 0 1.286-0.554-0.054-0.054-0.339-0.33t-0.384-0.384-0.268-0.339-0.232-0.455-0.063-0.491q0-0.714 0.5-1.214t1.214-0.5q0.268 0 0.491 0.063t0.455 0.232 0.339 0.268 0.384 0.384 0.33 0.339q0.589-0.554 0.589-1.304zM29.429 21.714q0 2.143-1.518 3.625l-2.625 2.607q-1.482 1.482-3.625 1.482-2.161 0-3.643-1.518l-3.679-3.696q-1.482-1.482-1.482-3.625 0-2.196 1.571-3.732l-1.571-1.571q-1.536 1.571-3.714 1.571-2.143 0-3.643-1.5l-3.714-3.714q-1.5-1.5-1.5-3.643t1.518-3.625l2.625-2.607q1.482-1.482 3.625-1.482 2.161 0 3.643 1.518l3.679 3.696q1.482 1.482 1.482 3.625 0 2.196-1.571 3.732l1.571 1.571q1.536-1.571 3.714-1.571 2.143 0 3.643 1.5l3.714 3.714q1.5 1.5 1.5 3.643z"></path>
</symbol>
<symbol id="icon-thumb-tack" viewBox="0 0 21 32">
<path class="path1" d="M8.571 15.429v-8q0-0.25-0.161-0.411t-0.411-0.161-0.411 0.161-0.161 0.411v8q0 0.25 0.161 0.411t0.411 0.161 0.411-0.161 0.161-0.411zM20.571 21.714q0 0.464-0.339 0.804t-0.804 0.339h-7.661l-0.911 8.625q-0.036 0.214-0.188 0.366t-0.366 0.152h-0.018q-0.482 0-0.571-0.482l-1.357-8.661h-7.214q-0.464 0-0.804-0.339t-0.339-0.804q0-2.196 1.402-3.955t3.17-1.759v-9.143q-0.929 0-1.607-0.679t-0.679-1.607 0.679-1.607 1.607-0.679h11.429q0.929 0 1.607 0.679t0.679 1.607-0.679 1.607-1.607 0.679v9.143q1.768 0 3.17 1.759t1.402 3.955z"></path>
</symbol>
<symbol id="icon-arrow-left" viewBox="0 0 43 32">
<path class="path1" d="M42.311 14.044c-0.178-0.178-0.533-0.356-0.711-0.356h-33.778l10.311-10.489c0.178-0.178 0.356-0.533 0.356-0.711 0-0.356-0.178-0.533-0.356-0.711l-1.6-1.422c-0.356-0.178-0.533-0.356-0.889-0.356s-0.533 0.178-0.711 0.356l-14.578 14.933c-0.178 0.178-0.356 0.533-0.356 0.711s0.178 0.533 0.356 0.711l14.756 14.933c0 0.178 0.356 0.356 0.533 0.356s0.533-0.178 0.711-0.356l1.6-1.6c0.178-0.178 0.356-0.533 0.356-0.711s-0.178-0.533-0.356-0.711l-10.311-10.489h33.778c0.178 0 0.533-0.178 0.711-0.356 0.356-0.178 0.533-0.356 0.533-0.711v-2.133c0-0.356-0.178-0.711-0.356-0.889z"></path>
</symbol>
<symbol id="icon-arrow-right" viewBox="0 0 43 32">
<path class="path1" d="M0.356 17.956c0.178 0.178 0.533 0.356 0.711 0.356h33.778l-10.311 10.489c-0.178 0.178-0.356 0.533-0.356 0.711 0 0.356 0.178 0.533 0.356 0.711l1.6 1.6c0.178 0.178 0.533 0.356 0.711 0.356s0.533-0.178 0.711-0.356l14.756-14.933c0.178-0.356 0.356-0.711 0.356-0.889s-0.178-0.533-0.356-0.711l-14.756-14.933c0-0.178-0.356-0.356-0.533-0.356s-0.533 0.178-0.711 0.356l-1.6 1.6c-0.178 0.178-0.356 0.533-0.356 0.711s0.178 0.533 0.356 0.711l10.311 10.489h-33.778c-0.178 0-0.533 0.178-0.711 0.356-0.356 0.178-0.533 0.356-0.533 0.711v2.311c0 0.178 0.178 0.533 0.356 0.711z"></path>
</symbol>
<symbol id="icon-play" viewBox="0 0 22 28">
<path d="M21.625 14.484l-20.75 11.531c-0.484 0.266-0.875 0.031-0.875-0.516v-23c0-0.547 0.391-0.781 0.875-0.516l20.75 11.531c0.484 0.266 0.484 0.703 0 0.969z"></path>
</symbol>
<symbol id="icon-pause" viewBox="0 0 24 28">
<path d="M24 3v22c0 0.547-0.453 1-1 1h-8c-0.547 0-1-0.453-1-1v-22c0-0.547 0.453-1 1-1h8c0.547 0 1 0.453 1 1zM10 3v22c0 0.547-0.453 1-1 1h-8c-0.547 0-1-0.453-1-1v-22c0-0.547 0.453-1 1-1h8c0.547 0 1 0.453 1 1z"></path>
</symbol>
</defs>
</svg>

</body>
</html>
